{"version":3,"sources":["webpack:///firebase-firestore.js","webpack:///./firestore/index.js","webpack:///../firestore/dist/esm/src/util/log.js","webpack:///../firestore/dist/esm/src/util/assert.js","webpack:///../firestore/dist/esm/src/platform/platform.js","webpack:///../firestore/dist/esm/src/util/api.js","webpack:///../firestore/dist/esm/src/util/obj.js","webpack:///../firestore/dist/esm/src/util/input_validation.js","webpack:///../firestore/dist/esm/src/util/misc.js","webpack:///../firestore/dist/esm/src/api/blob.js","webpack:///../firestore/dist/esm/src/model/field_value.js","webpack:///../firestore/dist/esm/src/util/types.js","webpack:///../firestore/dist/esm/src/core/query.js","webpack:///../firestore/dist/esm/src/remote/rpc_error.js","webpack:///../firestore/dist/esm/src/model/collections.js","webpack:///../firestore/dist/esm/src/remote/watch_change.js","webpack:///../firestore/dist/esm/src/remote/serializer.js","webpack:///../firestore/dist/esm/src/api/field_path.js","webpack:///../firestore/dist/esm/src/core/view.js","webpack:///../firestore/dist/esm/src/local/encoded_resource_path.js","webpack:///../firestore/dist/esm/src/local/indexeddb_schema.js","webpack:///../firestore/dist/esm/src/local/simple_db.js","webpack:///../firestore/dist/esm/src/local/indexeddb_mutation_queue.js","webpack:///../firestore/dist/esm/src/local/indexeddb_query_cache.js","webpack:///../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js","webpack:///../firestore/dist/esm/src/local/local_serializer.js","webpack:///../firestore/dist/esm/src/api/credentials.js","webpack:///../firestore/dist/esm/src/api/observer.js","webpack:///../firestore/dist/esm/src/api/user_data_converter.js","webpack:///../firestore/dist/esm/src/api/database.js","webpack:///../firestore/dist/esm/src/platform/config.js","webpack:///../firestore/dist/esm/index.js","webpack:///../firestore/dist/esm/src/core/version.js","webpack:///../firestore/dist/esm/src/util/error.js","webpack:///../firestore/dist/esm/src/api/geo_point.js","webpack:///../firestore/dist/esm/src/core/database_info.js","webpack:///../firestore/dist/esm/src/model/path.js","webpack:///../firestore/dist/esm/src/model/document_key.js","webpack:///../firestore/dist/esm/src/model/document.js","webpack:///../firestore/dist/esm/src/util/sorted_map.js","webpack:///../firestore/dist/esm/src/local/query_data.js","webpack:///../firestore/dist/esm/src/core/timestamp.js","webpack:///../firestore/dist/esm/src/core/snapshot_version.js","webpack:///../firestore/dist/esm/src/model/mutation.js","webpack:///../firestore/dist/esm/src/remote/existence_filter.js","webpack:///../firestore/dist/esm/src/util/sorted_set.js","webpack:///../firestore/dist/esm/src/remote/remote_event.js","webpack:///../firestore/dist/esm/src/remote/stream_bridge.js","webpack:///../firestore/dist/esm/src/platform_browser/webchannel_connection.js","webpack:///../firestore/dist/esm/src/platform_browser/browser_platform.js","webpack:///../firestore/dist/esm/src/platform_browser/browser_init.js","webpack:///../firestore/dist/esm/src/core/types.js","webpack:///../firestore/dist/esm/src/core/view_snapshot.js","webpack:///../firestore/dist/esm/src/core/target_id_generator.js","webpack:///../firestore/dist/esm/src/model/document_set.js","webpack:///../firestore/dist/esm/src/util/obj_map.js","webpack:///../firestore/dist/esm/src/core/event_manager.js","webpack:///../firestore/dist/esm/src/local/persistence_promise.js","webpack:///../firestore/dist/esm/src/local/eager_garbage_collector.js","webpack:///../firestore/dist/esm/src/local/local_view_changes.js","webpack:///../firestore/dist/esm/src/local/reference_set.js","webpack:///../firestore/dist/esm/src/util/async_queue.js","webpack:///../firestore/dist/esm/src/core/sync_engine.js","webpack:///../firestore/dist/esm/src/model/mutation_batch.js","webpack:///../firestore/dist/esm/src/local/indexeddb_persistence.js","webpack:///../firestore/dist/esm/src/local/local_documents_view.js","webpack:///../firestore/dist/esm/src/local/remote_document_change_buffer.js","webpack:///../firestore/dist/esm/src/local/local_store.js","webpack:///../firestore/dist/esm/src/local/memory_mutation_queue.js","webpack:///../firestore/dist/esm/src/local/memory_query_cache.js","webpack:///../firestore/dist/esm/src/local/memory_remote_document_cache.js","webpack:///../firestore/dist/esm/src/local/memory_persistence.js","webpack:///../firestore/dist/esm/src/local/no_op_garbage_collector.js","webpack:///../firestore/dist/esm/src/util/promise.js","webpack:///../firestore/dist/esm/src/remote/persistent_stream.js","webpack:///../firestore/dist/esm/src/remote/backoff.js","webpack:///../firestore/dist/esm/src/remote/datastore.js","webpack:///../firestore/dist/esm/src/core/transaction.js","webpack:///../firestore/dist/esm/src/remote/remote_store.js","webpack:///../firestore/dist/esm/src/core/firestore_client.js","webpack:///../firestore/dist/esm/src/util/async_observer.js","webpack:///../firestore/dist/esm/src/auth/user.js","webpack:///../firestore/dist/esm/src/api/field_value.js","webpack:///../webchannel-wrapper/dist/index.js"],"names":["webpackJsonpFirebase","114","module","exports","__webpack_require__","115","__webpack_exports__","getLogLevel","logLevel","setLogLevel","newLevel","debug","tag","msg","obj","_i","arguments","length","LogLevel","DEBUG","time","Date","toISOString","args","map","argToString","console","log","apply","SDK_VERSION","concat","log_error","ERROR","error","platform","platform_PlatformSupport","getPlatform","formatJSON","e","fail","failure","message","Error","assert","assertion","emptyByteString","makeConstructorPrivate","cls","optionalMessage","PublicConstructor","error_FirestoreError","Code","INVALID_ARGUMENT","prototype","staticProperty","hasOwnProperty","contains","key","Object","call","defaulted","value","defaultValue","undefined","forEachNumber","fn","num","isNaN","forEach","isEmpty","shallowCopy","result","validateExactNumberOfArgs","functionName","numberOfArgs","formatPlural","validateAtLeastNumberOfArgs","minNumberOfArgs","validateBetweenNumberOfArgs","maxNumberOfArgs","validateNamedArrayAtLeastNumberOfElements","name","minNumberOfElements","Array","validateArgType","type","position","argument","validateType","ordinal","validateOptionalArgType","validateNamedType","optionName","validateNamedOptionalType","validateNamedPropertyEquals","inputName","input","expected","expectedDescription","expected_1","val","push","valueDescription","actualDescription","join","validateNamedOptionalPropertyEquals","isPlainObject","description","getPrototypeOf","substring","JSON","stringify","customObjectName","tryGetCustomObjectType","constructor","funcNameRegex","results","exec","validateDefined","validateOptionNames","options","optionNames","_","indexOf","invalidClassError","str","primitiveComparator","left","right","equals","isEqual","arrayEquals","i","immediatePredecessor","s","lastIndex","charAt","String","fromCharCode","charCodeAt","immediateSuccessor","assertUint8ArrayAvailable","Uint8Array","UNIMPLEMENTED","assertBase64Available","base64Available","numericComparator","numericEquals","isNullOrUndefined","isSafeInteger","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","fieldFilter","field","op","field_value_NullValue","INSTANCE","query_RelationOp","EQUAL","NullFilter","field_value_DoubleValue","NAN","NanFilter","query_RelationFilter","isPermanentError","code","OK","CANCELLED","UNKNOWN","DEADLINE_EXCEEDED","RESOURCE_EXHAUSTED","INTERNAL","UNAVAILABLE","UNAUTHENTICATED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","DATA_LOSS","mapCodeFromRpcStatus","status","RpcCode","mapCodeFromRpcCode","mapRpcCodeFromCode","mapCodeFromHttpStatus","maybeDocumentMap","EMPTY_MAYBE_DOCUMENT_MAP","documentMap","EMPTY_DOCUMENT_MAP","documentVersionMap","EMPTY_DOCUMENT_VERSION_MAP","documentKeySet","EMPTY_DOCUMENT_KEY_SET","applyResumeToken","change","resumeToken","assertPresent","parseInt64","hasTag","fromDotSeparatedString","path","search","RESERVED","field_path_FieldPath","bind","split","compareChangeType","c1","c2","order","ChangeType","Added","Modified","Metadata","Removed","encode","encodeSeparator","encodeSegment","get","segment","resultBuf","c","escapeChar","encodedNul","encodedEscape","encodedSeparatorChar","decode","path_ResourcePath","EMPTY_PATH","lastReasonableEscapeIndex","segments","segmentBuilder","start","end","currentPiece","createOrUpgradeDb","db","oldVersion","createObjectStore","DbMutationQueue","store","keyPath","DbMutationBatch","DbTargetDocument","createIndex","documentTargetsIndex","documentTargetsKeyPath","unique","DbTarget","queryTargetsIndexName","queryTargetsKeyPath","indexeddb_schema_DbDocumentMutation","DbRemoteDocument","DbOwner","DbTargetGlobal","wrapRequest","request","persistence_promise_PersistencePromise","resolve","reject","onsuccess","event","target","onerror","validateStreamToken","token","mutationsStore","txn","getStore","documentMutationsStore","mutationQueuesStore","simple_db_SimpleDbTransaction","targetsStore","indexeddb_query_cache_getStore","globalTargetStore","documentTargetStore","remoteDocumentsStore","dbKey","docKey","toArray","isDocumentQuery","dbQuery","documents","makeCredentialsProvider","credentials","credentials_EmptyCredentialsProvider","credentials_FirstPartyCredentialsProvider","client","sessionIndex","isPartialObserver","implementsAnyMethods","methods","object","methods_1","method","isWrite","dataSource","UserDataSource","Set","MergeSet","Update","QueryValue","looksLikeJsonObject","geo_point_GeoPoint","blob_Blob","DocumentKeyReference","FieldValueImpl","validatePlainObject","context","createError","fieldPathFromArgument","methodName","_internalPath","fieldPathFromDotSeparatedString","errorMessage","validateSetOptions","merge","validateSnapshotOptions","serverTimestamps","validateReference","documentRef","firestore","database_DocumentReference","changesFromSnapshot","snapshot","oldDocs","lastDoc_1","index_1","docChanges","doc","database_QueryDocumentSnapshot","fromCache","query","docComparator","oldIndex","newIndex","indexTracker_1","delete","add","resultChangeType","configureForFirebase","firebase","registerService","app","database_Firestore","firestoreNamespace","registerFirestore","instance","defineProperty","esm","PlatformSupport","setPlatform","tslib_es6","_super","FirestoreError","_this","this","toString","misc_AutoId","AutoId","newId","chars","autoId","Math","floor","random","Blob","binaryString","_binaryString","fromBase64String","base64","atob","fromUint8Array","array","char","toBase64","btoa","toUint8Array","buffer","other","_compareTo","PublicBlob","GeoPoint","latitude","longitude","isFinite","_lat","_long","enumerable","configurable","DatabaseInfo","databaseId","persistenceKey","host","ssl","DEFAULT_DATABASE_NAME","database_info_DatabaseId","DatabaseId","projectId","database","compareTo","path_Path","Path","offset","init","len","construct","create","comparator","child","nameOrPath","slice","limit","popFirst","size","popLast","firstSegment","lastSegment","index","isPrefixOf","p1","p2","min","ResourcePath","canonicalString","fromString","filter","identifierRegExp","path_FieldPath","FieldPath","isValidIdentifier","test","replace","isKeyField","keyField","fromServerFormat","current","addCurrentSegment","inBackticks","next","document_key_DocumentKey","DocumentKey","isDocumentKey","k1","k2","fromSegments","fromPathString","EMPTY","document_Document","Document","version","data","hasLocalMutations","fieldValue","compareByKey","d1","d2","compareByField","v1","v2","document_NoDocument","NoDocument","SortedMap","root","sorted_map_LLRBNode","insert","copy","BLACK","remove","node","cmp","prunedNodes","minKey","maxKey","inorderTraversal","action","k","v","reverseTraversal","getIterator","sorted_map_SortedMapIterator","getIteratorFrom","getReverseIterator","getReverseIteratorFrom","SortedMapIterator","startKey","isReverse","nodeStack","getNext","pop","hasNext","peek","LLRBNode","color","RED","n","fixUp","removeMin","isRed","moveRedLeft","smallest","rotateRight","moveRedRight","rotateLeft","colorFlip","nl","nr","checkMaxDepth","blackDepth","check","pow","LLRBEmptyNode","TypeOrder","ServerTimestampBehavior","QueryPurpose","field_value_FieldValueOptions","FieldValueOptions","serverTimestampBehavior","fromSnapshotOptions","Estimate","Previous","defaultOptions","Default","field_value_FieldValue","FieldValue","defaultCompareTo","typeOrder","NullValue","internalValue","field_value_BooleanValue","BooleanValue","of","TRUE","FALSE","field_value_NumberValue","NumberValue","field_value_IntegerValue","IntegerValue","DoubleValue","NaN","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","field_value_StringValue","StringValue","field_value_TimestampValue","TimestampValue","toDate","field_value_ServerTimestampValue","ServerTimestampValue","localWriteTime","previousValue","field_value_BlobValue","BlobValue","field_value_RefValue","RefValue","field_value_GeoPointValue","GeoPointValue","field_value_ObjectValue","ObjectValue","it1","it2","next1","next2","set","to","setChild","newChild","pathSegment","childName","field_value_ArrayValue","ArrayValue","minLength","NumberAsAny","Number","query_Query","Query","explicitOrderBy","filters","startAt","endAt","memoizedCanonicalId","memoizedOrderBy","assertValidBound","atPath","inequalityField","getInequalityFilterField","firstOrderByField","getFirstOrderByField","KEY_ORDERING_ASC","query_OrderBy","foundKeyOrdering","_a","orderBy","lastDirection","dir","Direction","ASCENDING","KEY_ORDERING_DESC","addFilter","isInequality","newFilters","addOrderBy","newOrderBy","withLimit","withStartAt","bound","withEndAt","canonicalId","_b","_c","comparedOnKeyField","comp","compare","matches","matchesAncestor","matchesOrderBy","matchesFilters","matchesBounds","hasLimit","docPath","sortsBeforeDocument","RelationOp","LESS_THAN","LESS_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","GREATER_THAN","RelationFilter","refValue","comparison","matchesComparison","matchesValue","DESCENDING","query_Bound","Bound","before","component","orderByComponent","docValue","thisPosition","otherPosition","OrderBy","isKeyOrderBy","isoRegExp","RegExp","timestamp_Timestamp","Timestamp","seconds","nanos","now","fromEpochMilliseconds","fromDate","date","getTime","milliseconds","fromISOString","utc","fraction","nanoStr","substr","toEpochMilliseconds","snapshot_version_SnapshotVersion","SnapshotVersion","timestamp","fromMicroseconds","fromTimestamp","forDeletedDoc","MIN","toMicroseconds","toTimestamp","MutationType","query_data_QueryData","QueryData","targetId","purpose","snapshotVersion","update","updated","mutation_FieldMask","FieldMask","fields","ServerTimestampTransform","FieldTransform","transform","MutationResult","transformResults","mutation_Precondition","Precondition","updateTime","exists","isValidFor","maybeDoc","isNone","NONE","mutation_Mutation","Mutation","verifyKeyMatches","getPostMutationVersion","mutation_SetMutation","SetMutation","precondition","applyToRemoteDocument","mutationResult","applyToLocalView","baseDoc","mutation_PatchMutation","PatchMutation","fieldMask","Patch","newData","patchDocument","patchObject","fieldPath","newValue","mutation_TransformMutation","TransformMutation","fieldTransforms","Transform","requireDocument","transformObject","localTransformResults","fieldTransform","mutation_DeleteMutation","DeleteMutation","Delete","ExistenceFilter","count","CurrentStatusUpdate","sorted_set_SortedSet","SortedSet","fromMapKeys","keys","has","elem","first","last","cb","forEachInRange","range","iter","forEachWhile","firstAfterOrEqual","unionWith","thisIt","otherIt","thisElem","otherElem","remote_event_RemoteEvent","RemoteEvent","targetChanges","documentUpdates","addDocumentUpdate","handleExistenceFilterMismatch","mapping","ResetMapping","currentStatusUpdate","MarkNotCurrent","WatchTargetChangeState","EMPTY_KEY_SET","docs","UpdateMapping","addedDocuments","removedDocuments","applyToKeySet","DocumentWatchChange","updatedTargetIds","removedTargetIds","newDoc","ExistenceFilterChange","existenceFilter","watch_change_WatchTargetChange","WatchTargetChange","state","targetIds","cause","watch_change_WatchChangeAggregator","WatchChangeAggregator","listenTargets","pendingTargetResponses","existenceFilters","frozen","watchChange","addDocumentChange","addTargetChange","addExistenceFilterChange","addChanges","watchChanges","createRemoteEvent","isActiveTarget","ensureTargetChange","None","docChange","relevant","targetChange","NoChange","recordTargetResponse","Current","MarkCurrent","Reset","newCount","DIRECTIONS","dirs","OPERATORS","ops","serializer_JsonProtoSerializer","JsonProtoSerializer","useProto3Json","unsafeCastProtoByteString","byteString","fromRpcStatus","toInt32Value","fromInt32Value","toBytes","bytes","fromBlob","blob","toVersion","fromVersion","toResourceName","fullyQualifiedPrefixPath","fromResourceName","resource","isValidResourceName","toName","fromName","extractLocalPathFromResourceName","toQueryPath","encodedDatabaseId","fromQueryPath","resourceName","toValue","nullValue","booleanValue","integerValue","doubleValue","stringValue","mapValue","toMapValue","arrayValue","toArrayValue","timestampValue","geoPointValue","bytesValue","referenceValue","fromValue","fromFields","values","dbId","toMutationDocument","toFields","toDocument","document","fromDocument","fromFound","found","fromMissing","missing","readTime","fromMaybeDocument","toWatchTargetChangeState","toTestWatchChange","documentChange","documentDelete","documentRemove","targetChangeType","fromWatchChange","fromWatchTargetChangeState","causeProto","entityChange","docDelete","docRemove","versionFromListenResponse","toMutation","mutation","updateMask","toDocumentMask","toFieldTransform","currentDocument","toPrecondition","fromMutation","proto","fromPrecondition","fromDocumentMask","fromFieldTransform","fromWriteResult","fromWriteResults","protos","setToServerValue","toDocumentsTarget","fromDocumentsTarget","documentsTarget","toQueryTarget","structuredQuery","parent","from","collectionId","where","toFilter","toOrder","toCursor","fromQueryTarget","fromCount","filterBy","fromFilter","fromOrder","fromCursor","toListenRequestLabels","queryData","toLabel","goog-listen-tags","Listen","ExistenceFilterMismatch","LimboResolution","toTarget","toRelationFilter","toUnaryFilter","compositeFilter","unaryFilter","fromUnaryFilter","fromRelationFilter","f","reduce","accum","orderBys","toPropertyOrder","fromPropertyOrder","cursor","toDirection","fromDirection","toOperatorName","fromOperatorName","toFieldPathReference","fromFieldPathReference","fieldReference","direction","nanField","nullField","fieldPaths","paths","dist","stream_bridge_StreamBridge","StreamBridge","sendFn","closeFn","onOpen","callback","wrappedOnOpen","onClose","wrappedOnClose","onMessage","wrappedOnMessage","close","send","callOnOpen","callOnClose","err","callOnMessage","LOG_TAG","RPC_NAME_REST_MAPPING","BatchGetDocuments","Commit","X_GOOG_API_CLIENT_VALUE","webchannel_connection_WebChannelConnection","WebChannelConnection","info","pool","baseUrl","modifyHeadersForRequest","headers","header","authHeaders","invokeRPC","rpcName","url","makeUrl","Promise","getObject","xhr","listenOnce","COMPLETE","getLastErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","status_1","getStatus","getResponseText","getStatusText","getLastError","releaseObject","requestString","Content-Type","invokeStreamingRPC","openStream","urlParts","webchannelTransport","backgroundChannelTest","httpSessionIdParam","initMessageHeaders","httpHeadersOverwriteParam","sendRawJson","supportsCrossDomainXhr","channel","createWebChannel","opened","closed","streamBridge","open","unguardedEventListen","listen","param","setTimeout","EventType","OPEN","CLOSE","MESSAGE","msgData","status_2","urlRpcName","browser_platform_BrowserPlatform","BrowserPlatform","loadConnection","databaseInfo","newSerializer","encoded","raw","OnlineState","fieldNames","documentId","_DOCUMENT_ID","SyncState","GeneratorIds","view_snapshot_DocumentChangeSet","DocumentChangeSet","changeMap","track","oldChange","getChanges","changes","ViewSnapshot","hasPendingWrites","syncStateChanged","otherChanges","document_set_DocumentSet","DocumentSet","keyedMap","sortedSet","emptySet","oldSet","thisDoc","otherDoc","docStrings","newSet","obj_map_ObjectMap","ObjectMap","mapKeyFn","inner","id","matches_1","otherKey","splice","entries","entries_1","QueryListenersInfo","listeners","event_manager_EventManager","EventManager","syncEngine","queries","q","onlineState","Unknown","subscribe","onChange","onError","listener","firstListen","queryInfo","applyOnlineStateChange","viewSnap","onViewSnapshot","then","unlisten","lastListen","viewSnaps","viewSnaps_1","event_manager_QueryListener","QueryListener","queryObserver","raisedInitialEvent","snap","includeDocumentMetadataChanges","shouldRaiseEvent","shouldRaiseInitialEvent","raiseInitialEvent","maybeOnline","Failed","waitForSyncWhenOnline","hasPendingWritesChanged","includeQueryMetadataChanges","getInitialViewChanges","PersistencePromise","nextCallback","catchCallback","isDone","callbackAttached","catch","nextFn","catchFn","wrapFailure","wrapSuccess","toPromise","wrapUserFunction","waitFor","all","promise","nextPromise","idx","initial","eager_garbage_collector_EagerGarbageCollector","EagerGarbageCollector","isEager","sources","potentialGarbage","addGarbageSource","garbageSource","setGarbageCollector","removeGarbageSource","addPotentialGarbageKey","collectGarbage","promises","garbageKeys","hasRefsPromise","documentHasAnyReferences","hasRefs","source","containsKey","local_view_changes_LocalViewChanges","LocalViewChanges","addedKeys","removedKeys","fromSnapshot","viewSnapshot","reference_set_ReferenceSet","ReferenceSet","refsByKey","reference_set_DocReference","refsByTarget","compareByTargetId","garbageCollector","addReference","ref","addReferences","removeReference","removeRef","removeReferences","removeReferencesForId","emptyKey","startRef","endRef","removeAllReferences","referencesForId","firstRef","DocReference","targetOrBatchId","RESERVED_BITS","TimerId","TargetIdGenerator","generatorId","initAfter","afterWithoutGenerator","afterGenerator","previousId","forLocalStore","LocalStore","forSyncEngine","SyncEngine","AddedLimboDocument","RemovedLimboDocument","view_View","View","syncedDocuments","syncState","limboDocuments","mutatedKeys","documentSet","computeDocChanges","previousChanges","changeSet","oldDocumentSet","newMutatedKeys","newDocumentSet","needsRefill","lastDocInLimit","newMaybeDoc","oldDoc","docsEqual","applyChanges","sort","applyTargetChange","limboChanges","updateLimboDocuments","synced","newSyncState","Synced","Local","shouldBeInLimbo","targetMapping","oldLimboDocuments","QueryView","view","sync_engine_SyncEngine","localStore","remoteStore","currentUser","viewHandler","errorHandler","queryViewsByQuery","queryViewsByTarget","limboTargetsByKey","limboKeysByTarget","limboDocumentRefs","limboCollector","mutationUserCallbacks","targetIdGenerator","assertSubscribed","allocateQuery","executeQuery","remoteDocumentKeys","remoteKeys","viewDocChanges","viewChange","queryView","releaseQuery","removeAndCleanupQuery","write","batch","userCallback","localWrite","addMutationCallback","batchId","emitNewSnapsAndNotifyLocalStore","fillWritePipeline","wrapUpdateFunctionError","runTransaction","updateFunction","retries","transaction","createTransaction","userPromise","commit","applyRemoteEvent","remoteEvent","limboKey","newViewSnapshots","rejectListen","docMap","event_1","queryView_1","applySuccessfulWrite","mutationBatchResult","processUserCallback","acknowledgeBatch","rejectFailedWrite","rejectBatch","newCallbacks","toKey","gcLimboDocuments","updateTrackedLimbos","limboChanges_1","limboChange","trackLimboChange","limboTargetId","currentLimboDocs","newSnaps","docChangesInAllViews","queriesProcessed","notifyLocalViewChanges","fnName","handleUserChange","user","BATCHID_UNKNOWN","mutation_batch_MutationBatch","MutationBatch","mutations","batchResult","mutationResults","keySet","isTombstone","toTombstone","mutation_batch_MutationBatchResult","MutationBatchResult","commitVersion","streamToken","docVersions","versionMap","DbTimestamp","ownerId","leaseTimestampMs","userId","lastAcknowledgedBatchId","lastStreamToken","localWriteTimeMs","DbDocumentMutation","prefixForUser","prefixForPath","PLACEHOLDER","DbNoDocument","noDocument","lastListenSequenceNumber","highestTargetId","highestListenSequenceNumber","lastRemoteSnapshotVersion","ALL_STORES","simple_db_SimpleDb","SimpleDb","openOrCreate","runUpgrade","isAvailable","window","indexedDB","onupgradeneeded","deleteDatabase","ua","navigator","userAgent","mode","objectStores","transactionFn","transactionFnResult","abort","completionPromise","IterationController","dbCursor","shouldStop","nextKey","done","skip","SimpleDbTransaction","objectStoresNames","aborted","onabort","oncomplete","storeName","objectStore","simple_db_SimpleDbStore","SimpleDbStore","put","keyOrValue","loadAll","indexOrRange","iterateCursor","deleteAll","keysOnly","control","iterate","optionsOrCallback","cursorRequest","controller","userResult","primaryKey","skipToKey","continue","indexName","reverse","openKeyCursor","openCursor","indexeddb_mutation_queue_IndexedDbMutationQueue","IndexedDbMutationQueue","serializer","forUser","uid","isAuthenticated","loadNextBatchIdFromDb","nextBatchId","metadata","checkEmpty","empty","maxBatchId","nextUser","IDBKeyRange","keyForBatchId","getNextBatchId","getHighestAcknowledgedBatchId","getLastStreamToken","setLastStreamToken","addMutationBatch","dbBatch","toDbMutationBatch","mutations_1","indexKey","lookupMutationBatch","fromDbMutationBatch","getNextMutationBatchAfterBatchId","lowerBound","foundBatch","getAllMutationBatches","dbBatches","getAllMutationBatchesThroughBatchId","getAllMutationBatchesAffectingDocumentKey","documentKey","indexPrefix","indexStart","userID","encodedPath","batchID","mutationKey","getAllMutationBatchesAffectingQuery","queryPath","immediateChildrenLength","uniqueBatchIDs","removeMutationBatches","batches","indexTxn","this_1","batches_1","only","numDeleted","removePromise","performConsistencyCheck","startRange","danglingMutationReferences","p","gc","indexeddb_query_cache_IndexedDbQueryCache","IndexedDbQueryCache","lastSavedVersion","getHighestTargetId","getLastRemoteSnapshotVersion","setLastRemoteSnapshotVersion","addQueryData","addedQueryPromise","toDbTarget","removeQueryData","removeMatchingKeysForTargetId","getQueryData","fromDbTarget","addMatchingKeys","removeMatchingKeys","notifyGCForRemovedKeys","getMatchingKeysForTargetId","indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache","IndexedDbRemoteDocumentCache","addEntry","maybeDocument","toDbRemoteDocument","removeEntry","getEntry","dbRemoteDoc","fromDbRemoteDocument","getDocumentsMatchingQuery","local_serializer_LocalSerializer","LocalSerializer","remoteSerializer","remoteDoc","serializedMutations","m","dbTarget","queryProto","dbTimestamp","EXISTING_OWNER_ERROR_MSG","indexeddb_persistence_IndexedDbPersistence","IndexedDbPersistence","prefix","generateOwnerId","dbName","MAIN_DATABASE","localStoragePrefix","started","simpleDb","tryAcquireOwnerLease","scheduleOwnerLeaseRefreshes","attachWindowUnloadHook","persistenceError","shutdown","detachWindowUnloadHook","stopOwnerLeaseRefreshes","releaseOwnerLease","getMutationQueue","getQueryCache","getRemoteDocumentCache","operation","ensureOwnerLease","buildStoragePrefix","isDefaultDatabase","dbOwner","validOwner","newDbOwner","minAcceptable","maxAcceptable","getZombiedOwnerId","ownerLeaseRefreshHandle","setInterval","reason","clearInterval","windowUnloadHandler","setZombiedOwnerId","addEventListener","removeEventListener","zombiedOwnerId","localStorage","getItem","zombiedOwnerLocalStorageKey","zombieOwnerId","removeItem","setItem","local_documents_view_LocalDocumentsView","LocalDocumentsView","remoteDocumentCache","mutationQueue","getDocument","computeLocalDocument","getDocuments","getDocumentsMatchingDocumentQuery","getDocumentsMatchingCollectionQuery","queryResults","computeLocalDocuments","promisedResults","matchingMutationBatches","matchingKeys","matchingMutationBatches_1","mutatedDoc","remote_document_change_buffer_RemoteDocumentChangeBuffer","RemoteDocumentChangeBuffer","assertChanges","bufferedEntry","local_store_LocalStore","persistence","initialUser","localViewReferences","heldBatchResults","remoteDocuments","queryCache","localDocuments","startMutationQueue","startQueryCache","oldBatches","promisedOldBatches","newBatches","changedKeys","_d","highestAck","ackedBatches","promisedBatch","changedDocuments","affected","shouldHoldBatchResult","documentBuffer_1","releaseBatchResults","promisedAffectedKeys","toReject","affectedKeys","promisedToReject","lastAcked","removeMutationBatch","documentBuffer","changedDocKeys","existingDoc","lastRemoteVersion","remoteVersion","releasedWriteKeys","releaseHeldBatchResults","promisedReleasedWriteKeys","viewChanges","viewChanges_1","nextMutationBatch","afterBatchId","readDocument","cached","documentBuffer_2","garbage","toRelease","isRemoteUpToVersion","batchResults","promiseChain","batchResults_1","applyWriteToRemoteDocuments","affectedDocs","batches_2","docKeys","ackVersion","memory_mutation_queue_MemoryMutationQueue","MemoryMutationQueue","highestAcknowledgedBatchId","batchesByDocumentKey","batchIndex","indexOfExistingBatchId","findMutationBatch","max","rawIndex","indexOfBatchId","getAllLiveMutationBatchesBeforeIndex","endIndex","immediateChildrenPathLength","startPath","rowKeyPath","batchCount","firstBatchId","queueCount","startIndex","queueIndex","length_1","references","memory_query_cache_MemoryQueryCache","MemoryQueryCache","memory_remote_document_cache_MemoryRemoteDocumentCache","MemoryRemoteDocumentCache","iterator","memory_persistence_MemoryPersistence","MemoryPersistence","mutationQueues","queue","MemoryPersistenceTransaction","no_op_garbage_collector_NoOpGarbageCollector","NoOpGarbageCollector","Deferred","PersistentStreamState","async_queue_DelayedOperation","DelayedOperation","asyncQueue","timerId","targetTimeMs","removalCallback","deferred","createAndSchedule","delayMs","targetTime","delayedOp","timerHandle","handleDelayElapsed","skipDelay","cancel","clearTimeout","enqueue","async_queue_AsyncQueue","AsyncQueue","tail","delayedOperations","operationInProgress","verifyNotFailed","newTail","stack","enqueueAfterDelay","containsDelayedOperation","removeDelayedOperation","verifyOperationInProgress","drain","findIndex","runDelayedOperationsEarly","lastTimerId","a","b","backoff_ExponentialBackoff","ExponentialBackoff","initialDelayMs","backoffFactor","maxDelayMs","timerPromise","reset","currentBaseMs","resetToMax","backoffAndRun","delayWithJitterMs","jitterDelayMs","BACKOFF_INITIAL_DELAY_MS","BACKOFF_MAX_DELAY_MS","BACKOFF_FACTOR","persistent_stream_PersistentStream","PersistentStream","connectionTimerId","idleTimerId","connection","credentialsProvider","inactivityTimerPromise","stream","backoff","Initial","isStarted","Backoff","Auth","Open","isOpen","performBackoff","auth","stop","Stopped","inhibitBackoff","markIdle","handleIdleCloseTimer","sendRequest","cancelIdleCheck","finalState","tearDown","getToken","startStream","rpcError","handleStreamClose","dispatchIfStillActive","currentStream_1","startRpc","persistent_stream_PersistentListenStream","PersistentListenStream","ListenStreamConnection","ListenStreamIdle","watchChangeProto","onWatchChange","watch","addTarget","labels","unwatch","removeTarget","persistent_stream_PersistentWriteStream","PersistentWriteStream","WriteStreamConnection","WriteStreamIdle","handshakeComplete_","writeMutations","responseProto","writeResults","commitTime","onMutationResult","onHandshakeComplete","writeHandshake","writes","datastore_Datastore","Datastore","newPersistentWriteStream","newPersistentWatchStream","params","response","lookup","transaction_Transaction","Transaction","datastore","readVersions","committed","recordVersion","docVersion","existingVersion","preconditionForUpdate","toMutations","unwritten","remote_store_RemoteStore","RemoteStore","onlineStateHandler","pendingWrites","lastBatchSeen","accumulatedWatchChanges","watchStream","writeStream","watchStreamOnlineState","watchStreamFailures","shouldWarnOffline","enableNetwork","updateOnlineState","newState","Healthy","updateOnlineStateAfterFailure","isNetworkEnabled","shouldStartWatchStream","startWatchStream","disableNetwork","disableNetworkInternal","cleanUpWatchStreamState","cleanUpWriteStreamState","sendWatchRequest","sendUnwatchRequest","recordPendingTargetRequest","onWatchStreamOpen","onWatchStreamClose","onWatchStreamChange","handleTargetError","handleWatchChangeBatch","aggregator","deletedDoc","trackedRemote","newQueryData","requestQueryData","canWriteMutations","outstandingWrites","shouldStartWriteStream","startWriteStream","handshakeComplete","onWriteStreamOpen","onWriteStreamClose","onWriteHandshakeComplete","shift","success","errorHandling","handleWriteError","handleHandshakeError","firestore_client_FirestoreClient","FirestoreClient","usePersistence","initializationDone","persistenceResult","initialized","setUserChangeListener","initializePersistence","initializeRest","startIndexedDbPersistence","canFallback","warn","startMemoryPersistence","storagePrefix","onlineStateChangedHandler","eventMgr","removeUserChangeListener","observer","AsyncObserver","muted","scheduleEvent","mute","eventHandler","User","otherUser","GOOGLE_CREDENTIALS","FIRST_PARTY","OAuthToken","Authorization","EmptyCredentialsProvider","userListener","forceRefresh","credentials_FirebaseCredentialsProvider","FirebaseCredentialsProvider","tokenListener","userCounter","newUser","getUser","addAuthTokenListener","initialUserCounter","tokenData","accessToken","removeAuthTokenListener","getUid","currentUid","credentials_FirstPartyToken","FirstPartyToken","gapi","X-Goog-AuthUser","FirstPartyCredentialsProvider","field_value_DeleteFieldValueImpl","serverTimestamp","field_value_ServerTimestampFieldValueImpl","DeleteFieldValueImpl","ServerTimestampFieldValueImpl","PublicFieldValue","RESERVED_FIELD_REGEX","user_data_converter_ParsedSetData","ParsedSetData","user_data_converter_ParsedUpdateData","ParsedUpdateData","user_data_converter_ParseContext","ParseContext","arrayElement","validatePath","childContextForField","childPath","validatePathSegment","childContextForFieldPath","childContextForArray","fieldDescription","user_data_converter_UserDataConverter","UserDataConverter","preConverter","parseSetData","updateData","parseData","parseMergeData","parseUpdateData","fieldMaskPaths","childContext","runPreConverter","parsedValue","mask","parseUpdateVarargs","moreFieldsAndValues","value_1","parseQueryValue","parsed","parseArray","parseObject","parseScalarValue","entryIndex","array_1","entry","parsedEntry","DEFAULT_HOST","DEFAULT_SSL","database_FirestoreSettings","FirestoreSettings","settings","FirestoreConfig","Firestore","databaseIdOrApp","_queue","_firestoreClient","config","firebaseApp","databaseIdFromApp","external_1","_config","_databaseId","settingsLiteral","newSettings","ensureClientConfigured","enablePersistence","configureClient","thisDb","otherDb","_key","_dataConverter","collection","pathString","database_CollectionReference","forPath","database_Transaction","database_WriteBatch","SILENT","level","_firestore","_transaction","database_DocumentSnapshot","fieldOrUpdateData","WriteBatch","_mutations","_committed","verifyNotCommitted","DocumentReference","onSnapshot","includeMetadataChanges","currArg","internalOptions","complete","onSnapshotInternal","errHandler","asyncObserver","internalListener","SnapshotMetadata","DocumentSnapshot","_document","_fromCache","convertObject","convertValue","convertArray","QueryDocumentSnapshot","database_Query","_query","opStr","validateNewFilter","directionStr","validateNewOrderBy","docOrField","boundFromDocOrFields","startAfter","endBefore","boundFromDocument","allFields","boundFromFields","components","rawValue","wrapped","database_QuerySnapshot","firestoreClient","existingField","validateOrderByAndInequalityMatch","inequality","QuerySnapshot","_originalQuery","_snapshot","_cachedChanges","thisArg","convertToDocumentImpl","CollectionReference","parentPath","docRef","PublicFirestore","PublicTransaction","PublicWriteBatch","PublicDocumentReference","PublicDocumentSnapshot","PublicQueryDocumentSnapshot","PublicQuery","PublicQuerySnapshot","PublicCollectionReference","116","global","l","aa","ba","propertyIsEnumerable","ca","da","ea","ha","ia","d","unshift","Function","ja","t","H","Db","ka","captureStackTrace","la","ma","u","na","pa","fa","sa","ta","va","wa","xa","za","x","w","Ca","Da","Ea","Fa","Ha","Ga","Ia","Ja","Ka","Qa","documentMode","Va","ya","Ra","h","parseInt","z","bb","relatedTarget","button","screenY","screenX","clientY","clientX","metaKey","shiftKey","altKey","ctrlKey","pointerId","pointerType","changedTouches","srcElement","Oa","nodeName","fromElement","toElement","pageX","pageY","defaultPrevented","fb","proxy","src","capture","ga","eb","Z","gb","hb","jb","qa","ib","nb","once","ob","pb","qb","rb","kb","sb","ab","attachEvent","tb","addListener","removeListener","mb","ub","Za","vb","wb","detachEvent","lb","xb","yb","keyCode","returnValue","parentNode","zb","handleEvent","A","N","J","Ab","Bb","Cb","eval","Eb","Fb","Boolean","Gb","valueOf","Ib","Hb","Jb","Kb","Ob","Pb","Mb","Qb","Sb","MessageChannel","postMessage","createElement","style","display","documentElement","appendChild","contentWindow","location","protocol","origin","port1","onmessage","port2","onreadystatechange","removeChild","Ub","Tb","Vb","setImmediate","Window","Rb","Nb","Wb","Xb","g","r","Yb","O","Zb","$b","ac","Y","bc","dc","cc","ec","fc","hc","B","nc","qc","pc","oc","lc","lastIndexOf","C","jc","rc","kc","D","mc","sc","tc","E","I","W","Lb","uc","F","vc","wc","G","xc","ic","parse","yc","zc","dispatchEvent","Ac","K","Bc","Cc","Dc","Gc","Ic","Jc","Kc","Lc","Mc","Oc","Pc","ActiveXObject","XMLHttpRequest","L","T","R","Qc","Na","S","j","U","o","X","Rc","Uc","Vc","M","Wc","Xc","Yc","Zc","$c","V","ad","bd","cd","dd","ed","fd","gd","hd","Tc","Sc","jd","$","kd","ld","ra","nd","od","P","md","qd","decodeURIComponent","Q","rd","sd","td","ud","vd","match","pd","wd","xd","Dd","yd","Ed","Fd","abs","Gd","Hd","decodeURI","encodeURI","Id","Kd","Jd","Ld","toLowerCase","Md","Od","Nd","Pd","Qd","Rd","Sd","Td","Vd","Wd","Xd","Yd","Zd","$d","oa","La","ae","be","ce","de","ee","fe","ge","he","ie","je","encodeURIComponent","ke","Image","onload","le","ontimeout","me","re","y","timeout","pe","se","te","ue","goog","Ma","self","ne","qe","readyState","getResponseHeader","ve","we","xe","Ua","concurrentRequestLimit","fastHandshake","ye","ze","Ae","sendBeacon","Be","Ce","De","Ee","Pa","Fe","Ge","Ie","He","round","Wa","Je","Ke","Le","Ud","Aa","Me","hostname","port","Ne","Oe","Pe","testUrl","messageUrlParams","messageHeaders","clientProtocolHeaderRequired","X-Client-Protocol","messageContentType","X-WebChannel-Content-Type","X-WebChannel-Client-Profile","Qe","Re","__sm__","Se","Ue","Ve","We","Xe","Ye","$e","Ze","af","bf","cf","df","trim","Ba","Sa","Ta","parseFloat","Xa","compatMode","Ya","freeze","$a","2","3","4","preventDefault","\"","\\","/","\b","\f","\n","\r","\t","\u000b","Ec","Fc","Hc","Nc","zd","Ad","Bd","Cd","oe","toUpperCase","FormData","setRequestHeader","responseType","withCredentials","statusText","responseText","__data__","Te","createWebChannelTransport","ErrorCode","WebChannel","XhrIoPool"],"mappings":"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","file":"firebase-firestore.js","sourcesContent":["/*!\n * @license Firebase v4.10.1\n * Build: rev-e70ef37\n * Terms: https://firebase.google.com/terms/\n */\ntry {\n        webpackJsonpFirebase([1],{\n\n/***/ 114:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n__webpack_require__(115);\n\n\n/***/ }),\n\n/***/ 115:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ../app/dist/esm/index.js + 1 modules\nvar esm = __webpack_require__(7);\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/version.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nvar SDK_VERSION = esm[\"default\"].SDK_VERSION;\n\n//# sourceMappingURL=version.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/log.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* tslint:disable:no-console */\n\n\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar logLevel = LogLevel.ERROR;\n// Helper methods are needed because variables can't be exported as read/write\nfunction getLogLevel() {\n    return logLevel;\n}\nfunction setLogLevel(newLevel) {\n    logLevel = newLevel;\n}\nfunction debug(tag, msg) {\n    var obj = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        obj[_i - 2] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.DEBUG) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n    }\n}\nfunction log_error(msg) {\n    var obj = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        obj[_i - 1] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.ERROR) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n    }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    else {\n        var platform = platform_PlatformSupport.getPlatform();\n        try {\n            return platform.formatJSON(obj);\n        }\n        catch (e) {\n            // Converting to JSON failed, just log the object directly\n            return obj;\n        }\n    }\n}\n\n//# sourceMappingURL=log.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/assert.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nfunction fail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n    log_error(message);\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nfunction assert(assertion, message) {\n    if (!assertion) {\n        fail(message);\n    }\n}\n\n//# sourceMappingURL=assert.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform/platform.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nvar platform_PlatformSupport = /** @class */ (function () {\n    function PlatformSupport() {\n    }\n    PlatformSupport.setPlatform = function (platform) {\n        if (PlatformSupport.platform) {\n            fail('Platform already defined');\n        }\n        PlatformSupport.platform = platform;\n    };\n    PlatformSupport.getPlatform = function () {\n        if (!PlatformSupport.platform) {\n            fail('Platform not set');\n        }\n        return PlatformSupport.platform;\n    };\n    return PlatformSupport;\n}());\n\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nfunction emptyByteString() {\n    return platform_PlatformSupport.getPlatform().emptyByteString;\n}\n\n//# sourceMappingURL=platform.js.map\n\n// EXTERNAL MODULE: /tmp/tmp-9321BpTjZrU60EO5/node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(2);\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/error.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.\n//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum\nvar Code = {\n    // Causes are copied from:\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n    /** Not an error; returned on success. */\n    OK: 'ok',\n    /** The operation was cancelled (typically by the caller). */\n    CANCELLED: 'cancelled',\n    /** Unknown error or an error from a different error domain. */\n    UNKNOWN: 'unknown',\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    INVALID_ARGUMENT: 'invalid-argument',\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    /** Some requested entity (e.g., file or directory) was not found. */\n    NOT_FOUND: 'not-found',\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    ALREADY_EXISTS: 'already-exists',\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    PERMISSION_DENIED: 'permission-denied',\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    UNAUTHENTICATED: 'unauthenticated',\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operation's execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    FAILED_PRECONDITION: 'failed-precondition',\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    ABORTED: 'aborted',\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    OUT_OF_RANGE: 'out-of-range',\n    /** Operation is not implemented or not supported/enabled in this service. */\n    UNIMPLEMENTED: 'unimplemented',\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    INTERNAL: 'internal',\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    UNAVAILABLE: 'unavailable',\n    /** Unrecoverable data loss or corruption. */\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nvar error_FirestoreError = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](FirestoreError, _super);\n    function FirestoreError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.name = 'FirebaseError';\n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\n        return _this;\n    }\n    return FirestoreError;\n}(Error));\n\n\n//# sourceMappingURL=error.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/api.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\n\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nfunction makeConstructorPrivate(cls, optionalMessage) {\n    function PublicConstructor() {\n        var error = 'This constructor is private.';\n        if (optionalMessage) {\n            error += ' ';\n            error += optionalMessage;\n        }\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, error);\n    }\n    // Make sure instanceof checks work and all methods are exposed on the public\n    // constructor\n    PublicConstructor.prototype = cls.prototype;\n    // Copy any static methods/members\n    for (var staticProperty in cls) {\n        if (cls.hasOwnProperty(staticProperty)) {\n            PublicConstructor[staticProperty] = cls[staticProperty];\n        }\n    }\n    return PublicConstructor;\n}\n\n//# sourceMappingURL=api.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/obj.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction get(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nfunction obj_size(obj) {\n    var count = 0;\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            count++;\n        }\n    }\n    return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nfunction defaulted(value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n}\nfunction forEachNumber(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var num = Number(key);\n            if (!isNaN(num)) {\n                fn(num, obj[key]);\n            }\n        }\n    }\n}\nfunction forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\nfunction lookupOrInsert(obj, key, valFn) {\n    if (!contains(obj, key)) {\n        obj[key] = valFn();\n    }\n    return obj[key];\n}\nfunction isEmpty(obj) {\n    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction shallowCopy(obj) {\n    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n    var result = {};\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=obj.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/input_validation.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nfunction validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n    if (args.length !== numberOfArgs) {\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" +\n            formatPlural(numberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nfunction validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n    if (args.length < minNumberOfArgs) {\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" +\n            formatPlural(minNumberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nfunction validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" +\n            (maxNumberOfArgs + \" arguments, but was called with \") +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nfunction validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n    if (!(value instanceof Array) || value.length < minNumberOfElements) {\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" +\n            'array with at least ' +\n            (formatPlural(minNumberOfElements, 'element') + \".\"));\n    }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nfunction validateArgType(functionName, type, position, argument) {\n    validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nfunction validateOptionalArgType(functionName, type, position, argument) {\n    if (argument !== undefined) {\n        validateArgType(functionName, type, position, argument);\n    }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nfunction validateNamedType(functionName, type, optionName, argument) {\n    validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nfunction validateNamedOptionalType(functionName, type, optionName, argument) {\n    if (argument !== undefined) {\n        validateNamedType(functionName, type, optionName, argument);\n    }\n}\n/**\n * Validates that the provided named option equals one of the expected values.\n */\nfunction validateNamedPropertyEquals(functionName, inputName, optionName, input, expected) {\n    var expectedDescription = [];\n    for (var _i = 0, expected_1 = expected; _i < expected_1.length; _i++) {\n        var val = expected_1[_i];\n        if (val === input) {\n            return;\n        }\n        expectedDescription.push(valueDescription(val));\n    }\n    var actualDescription = valueDescription(input);\n    throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid value \" + actualDescription + \" provided to function \" + functionName + \"() for option \\\"\" + optionName + \"\\\". Acceptable values: \" + expectedDescription.join(', '));\n}\n/**\n * Validates that the provided named option equals one of the expected values or\n * is undefined.\n */\nfunction validateNamedOptionalPropertyEquals(functionName, inputName, optionName, input, expected) {\n    if (input !== undefined) {\n        validateNamedPropertyEquals(functionName, inputName, optionName, input, expected);\n    }\n}\n/** Helper to validate the type of a provided input. */\nfunction validateType(functionName, type, inputName, input) {\n    if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n        var description = valueDescription(input);\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" +\n            (\"to be of type \" + type + \", but it was: \" + description));\n    }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nfunction isPlainObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        Object.getPrototypeOf(input) === Object.prototype);\n}\n/** Returns a string describing the type / value of the provided input. */\nfunction valueDescription(input) {\n    if (input === undefined) {\n        return 'undefined';\n    }\n    else if (input === null) {\n        return 'null';\n    }\n    else if (typeof input === 'string') {\n        if (input.length > 20) {\n            input = input.substring(0, 20) + \"...\";\n        }\n        return JSON.stringify(input);\n    }\n    else if (typeof input === 'number' || typeof input === 'boolean') {\n        return '' + input;\n    }\n    else if (typeof input === 'object') {\n        if (input instanceof Array) {\n            return 'an array';\n        }\n        else {\n            var customObjectName = tryGetCustomObjectType(input);\n            if (customObjectName) {\n                return \"a custom \" + customObjectName + \" object\";\n            }\n            else {\n                return 'an object';\n            }\n        }\n    }\n    else if (typeof input === 'function') {\n        return 'a function';\n    }\n    else {\n        return fail('Unknown wrong type: ' + typeof input);\n    }\n}\n/** Hacky method to try to get the constructor name for an object. */\nfunction tryGetCustomObjectType(input) {\n    if (input.constructor) {\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n        var results = funcNameRegex.exec(input.constructor.toString());\n        if (results && results.length > 1) {\n            return results[1];\n        }\n    }\n    return null;\n}\n/** Validates the provided argument is defined. */\nfunction validateDefined(functionName, position, argument) {\n    if (argument === undefined) {\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" +\n            \"argument, but it was undefined.\");\n    }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nfunction validateOptionNames(functionName, options, optionNames) {\n    forEach(options, function (key, _) {\n        if (optionNames.indexOf(key) < 0) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" +\n                'Available options: ' +\n                optionNames.join(', '));\n        }\n    });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nfunction invalidClassError(functionName, type, position, argument) {\n    var description = valueDescription(argument);\n    return new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" +\n        (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\nfunction ordinal(num) {\n    switch (num) {\n        case 1:\n            return 'first';\n        case 2:\n            return 'second';\n        case 3:\n            return 'third';\n        default:\n            return num + 'th';\n    }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num, str) {\n    return num + \" \" + str + (num === 1 ? '' : 's');\n}\n\n//# sourceMappingURL=input_validation.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/misc.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// tslint:disable-next-line:class-as-namespace\nvar misc_AutoId = /** @class */ (function () {\n    function AutoId() {\n    }\n    AutoId.newId = function () {\n        // Alphanumeric characters\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var autoId = '';\n        for (var i = 0; i < 20; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n        return autoId;\n    };\n    return AutoId;\n}());\n\nfunction primitiveComparator(left, right) {\n    if (left < right)\n        return -1;\n    if (left > right)\n        return 1;\n    return 0;\n}\n/** Helper to compare nullable (or undefined-able) objects using isEqual(). */\nfunction equals(left, right) {\n    if (left !== null && left !== undefined) {\n        return !!(right && left.isEqual(right));\n    }\n    else {\n        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n        // smart enough.\n        return left === right;\n    }\n}\n/** Helper to compare arrays using isEqual(). */\nfunction arrayEquals(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < left.length; i++) {\n        if (!left[i].isEqual(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nfunction immediatePredecessor(s) {\n    // We can decrement the last character in the string and be done\n    // unless that character is 0 (0x0000), in which case we have to erase the\n    // last character.\n    var lastIndex = s.length - 1;\n    if (s.length === 0) {\n        // Special case the empty string.\n        return '';\n    }\n    else if (s.charAt(lastIndex) === '\\0') {\n        return s.substring(0, lastIndex);\n    }\n    else {\n        return (s.substring(0, lastIndex) +\n            String.fromCharCode(s.charCodeAt(lastIndex) - 1));\n    }\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nfunction immediateSuccessor(s) {\n    // Return the input string, with an additional NUL byte appended.\n    return s + '\\0';\n}\n\n//# sourceMappingURL=misc.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/blob.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new error_FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!platform_PlatformSupport.getPlatform().base64Available) {\n        throw new error_FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar blob_Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n        validateArgType('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = platform_PlatformSupport.getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return platform_PlatformSupport.getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    Blob.prototype.isEqual = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return primitiveComparator(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nvar PublicBlob = makeConstructorPrivate(blob_Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n//# sourceMappingURL=blob.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/geo_point.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar geo_point_GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        validateExactNumberOfArgs('GeoPoint', arguments, 2);\n        validateArgType('GeoPoint', 'number', 1, latitude);\n        validateArgType('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GeoPoint.prototype.isEqual = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (primitiveComparator(this._lat, other._lat) ||\n            primitiveComparator(this._long, other._long));\n    };\n    return GeoPoint;\n}());\n\n\n//# sourceMappingURL=geo_point.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/database_info.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\n\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar database_info_DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.isEqual = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (primitiveComparator(this.projectId, other.projectId) ||\n            primitiveComparator(this.database, other.database));\n    };\n    return DatabaseId;\n}());\n\n\n//# sourceMappingURL=database_info.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar path_Path = /** @class */ (function () {\n    function Path(segments, offset, length) {\n        this.init(segments, offset, length);\n    }\n    /**\n     * An initialization method that can be called from outside the constructor.\n     * We need this so that we can have a non-static construct method that returns\n     * the polymorphic `this` type.\n     */\n    Path.prototype.init = function (segments, offset, length) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n        else if (offset > segments.length) {\n            fail('offset ' + offset + ' out of range ' + segments.length);\n        }\n        if (length === undefined) {\n            length = segments.length - offset;\n        }\n        else if (length > segments.length - offset) {\n            fail('length ' + length + ' out of range ' + (segments.length - offset));\n        }\n        this.segments = segments;\n        this.offset = offset;\n        this.len = length;\n    };\n    /**\n     * Constructs a new instance of Path using the same concrete type as `this`.\n     * We need this instead of using the normal constructor, because polymorphic\n     * `this` doesn't work on static methods.\n     */\n    Path.prototype.construct = function (segments, offset, length) {\n        var path = Object.create(Object.getPrototypeOf(this));\n        path.init(segments, offset, length);\n        return path;\n    };\n    Object.defineProperty(Path.prototype, \"length\", {\n        get: function () {\n            return this.len;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.isEqual = function (other) {\n        return Path.comparator(this, other) === 0;\n    };\n    Path.prototype.child = function (nameOrPath) {\n        var segments = this.segments.slice(this.offset, this.limit());\n        if (nameOrPath instanceof Path) {\n            nameOrPath.forEach(function (segment) {\n                segments.push(segment);\n            });\n        }\n        else if (typeof nameOrPath === 'string') {\n            segments.push(nameOrPath);\n        }\n        else {\n            fail('Unknown parameter type for Path.child(): ' + nameOrPath);\n        }\n        return this.construct(segments);\n    };\n    /** The index of one past the last segment of the path. */\n    Path.prototype.limit = function () {\n        return this.offset + this.length;\n    };\n    Path.prototype.popFirst = function (size) {\n        size = size === undefined ? 1 : size;\n        assert(this.length >= size, \"Can't call popFirst() with less segments\");\n        return this.construct(this.segments, this.offset + size, this.length - size);\n    };\n    Path.prototype.popLast = function () {\n        assert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n        return this.construct(this.segments, this.offset, this.length - 1);\n    };\n    Path.prototype.firstSegment = function () {\n        assert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n        return this.segments[this.offset];\n    };\n    Path.prototype.lastSegment = function () {\n        assert(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n        return this.segments[this.limit() - 1];\n    };\n    Path.prototype.get = function (index) {\n        assert(index < this.length, 'Index out of range');\n        return this.segments[this.offset + index];\n    };\n    Path.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    Path.prototype.isPrefixOf = function (other) {\n        if (other.length < this.length) {\n            return false;\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this.get(i) !== other.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Path.prototype.forEach = function (fn) {\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\n            fn(this.segments[i]);\n        }\n    };\n    Path.prototype.toArray = function () {\n        return this.segments.slice(this.offset, this.limit());\n    };\n    Path.comparator = function (p1, p2) {\n        var len = Math.min(p1.length, p2.length);\n        for (var i = 0; i < len; i++) {\n            var left = p1.get(i);\n            var right = p2.get(i);\n            if (left < right)\n                return -1;\n            if (left > right)\n                return 1;\n        }\n        if (p1.length < p2.length)\n            return -1;\n        if (p1.length > p2.length)\n            return 1;\n        return 0;\n    };\n    return Path;\n}());\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nvar path_ResourcePath = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](ResourcePath, _super);\n    function ResourcePath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourcePath.prototype.canonicalString = function () {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join('/');\n    };\n    ResourcePath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Creates a resource path from the given slash-delimited string.\n     */\n    ResourcePath.fromString = function (path) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        if (path.indexOf('//') >= 0) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid path (\" + path + \"). Paths must not contain // in them.\");\n        }\n        // We may still have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });\n        return new ResourcePath(segments);\n    };\n    ResourcePath.EMPTY_PATH = new ResourcePath([]);\n    return ResourcePath;\n}(path_Path));\n\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\nvar path_FieldPath = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](FieldPath, _super);\n    function FieldPath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n    FieldPath.isValidIdentifier = function (segment) {\n        return identifierRegExp.test(segment);\n    };\n    FieldPath.prototype.canonicalString = function () {\n        return this.toArray()\n            .map(function (str) {\n            str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n            if (!FieldPath.isValidIdentifier(str)) {\n                str = '`' + str + '`';\n            }\n            return str;\n        })\n            .join('.');\n    };\n    FieldPath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Returns true if this field references the key of a document.\n     */\n    FieldPath.prototype.isKeyField = function () {\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n    };\n    /**\n     * The field designating the key of a document.\n     */\n    FieldPath.keyField = function () {\n        return new FieldPath([DOCUMENT_KEY_NAME]);\n    };\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n    FieldPath.fromServerFormat = function (path) {\n        var segments = [];\n        var current = '';\n        var i = 0;\n        var addCurrentSegment = function () {\n            if (current.length === 0) {\n                throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\n                    \"with '.', end with '.', or contain '..'\");\n            }\n            segments.push(current);\n            current = '';\n        };\n        var inBackticks = false;\n        while (i < path.length) {\n            var c = path[i];\n            if (c === '\\\\') {\n                if (i + 1 === path.length) {\n                    throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n                }\n                var next = path[i + 1];\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\n                    throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n                }\n                current += next;\n                i += 2;\n            }\n            else if (c === '`') {\n                inBackticks = !inBackticks;\n                i++;\n            }\n            else if (c === '.' && !inBackticks) {\n                addCurrentSegment();\n                i++;\n            }\n            else {\n                current += c;\n                i++;\n            }\n        }\n        addCurrentSegment();\n        if (inBackticks) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n        }\n        return new FieldPath(segments);\n    };\n    FieldPath.EMPTY_PATH = new FieldPath([]);\n    return FieldPath;\n}(path_Path));\n\n\n//# sourceMappingURL=path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document_key.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar document_key_DocumentKey = /** @class */ (function () {\n    function DocumentKey(path) {\n        this.path = path;\n        assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +\n            path.toArray().join('/'));\n    }\n    DocumentKey.prototype.isEqual = function (other) {\n        return (other !== null && path_ResourcePath.comparator(this.path, other.path) === 0);\n    };\n    DocumentKey.prototype.toString = function () {\n        return this.path.toString();\n    };\n    DocumentKey.comparator = function (k1, k2) {\n        return path_ResourcePath.comparator(k1.path, k2.path);\n    };\n    DocumentKey.isDocumentKey = function (path) {\n        return path.length % 2 === 0;\n    };\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param path The segments of the path to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromSegments = function (segments) {\n        return new DocumentKey(new path_ResourcePath(segments.slice()));\n    };\n    /**\n     * Creates and returns a new document key using '/' to split the string into\n     * segments.\n     *\n     * @param path The slash-separated path string to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromPathString = function (path) {\n        return new DocumentKey(path_ResourcePath.fromString(path));\n    };\n    DocumentKey.EMPTY = new DocumentKey(new path_ResourcePath([]));\n    return DocumentKey;\n}());\n\n\n//# sourceMappingURL=document_key.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar document_Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.isEqual = function (other) {\n        return (other instanceof Document &&\n            this.key.isEqual(other.key) &&\n            this.version.isEqual(other.version) &&\n            this.data.isEqual(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return document_key_DocumentKey.comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return fail(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar document_NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.isEqual = function (other) {\n        return (other &&\n            other.version.isEqual(this.version) &&\n            other.key.isEqual(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return document_key_DocumentKey.comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\n\n\n//# sourceMappingURL=document.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/sorted_map.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar SortedMap = /** @class */ (function () {\n    function SortedMap(comparator, root) {\n        this.comparator = comparator;\n        this.root = root ? root : sorted_map_LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator, this.root\n            .insert(key, value, this.comparator)\n            .copy(null, null, sorted_map_LLRBNode.BLACK, null, null));\n    };\n    // Returns a copy of the map, with the specified key removed.\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator, this.root\n            .remove(key, this.comparator)\n            .copy(null, null, sorted_map_LLRBNode.BLACK, null, null));\n    };\n    // Returns the value of the node with the given key, or null.\n    SortedMap.prototype.get = function (key) {\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    SortedMap.prototype.indexOf = function (key) {\n        // Number of nodes that were pruned when descending right\n        var prunedNodes = 0;\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return prunedNodes + node.left.size;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else {\n                // Count all nodes left of the node plus the node itself\n                prunedNodes += node.left.size + 1;\n                node = node.right;\n            }\n        }\n        // Node not found\n        return -1;\n    };\n    SortedMap.prototype.isEmpty = function () {\n        return this.root.isEmpty();\n    };\n    Object.defineProperty(SortedMap.prototype, \"size\", {\n        // Returns the total number of nodes in the map.\n        get: function () {\n            return this.root.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the minimum key in the map.\n    SortedMap.prototype.minKey = function () {\n        return this.root.minKey();\n    };\n    // Returns the maximum key in the map.\n    SortedMap.prototype.maxKey = function () {\n        return this.root.maxKey();\n    };\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root.inorderTraversal(action);\n    };\n    SortedMap.prototype.forEach = function (fn) {\n        this.inorderTraversal(function (k, v) {\n            fn(k, v);\n            return false;\n        });\n    };\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root.reverseTraversal(action);\n    };\n    // Returns an iterator over the SortedMap.\n    SortedMap.prototype.getIterator = function () {\n        return new sorted_map_SortedMapIterator(this.root, null, this.comparator, false);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key) {\n        return new sorted_map_SortedMapIterator(this.root, key, this.comparator, false);\n    };\n    SortedMap.prototype.getReverseIterator = function () {\n        return new sorted_map_SortedMapIterator(this.root, null, this.comparator, true);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key) {\n        return new sorted_map_SortedMapIterator(this.root, key, this.comparator, true);\n    };\n    return SortedMap;\n}()); // end SortedMap\n\n// An iterator over an LLRBNode.\nvar sorted_map_SortedMapIterator = /** @class */ (function () {\n    function SortedMapIterator(node, startKey, comparator, isReverse) {\n        this.isReverse = isReverse;\n        this.nodeStack = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move\n                // to the next one\n                this.nodeStack.push(node);\n                if (this.isReverse) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');\n        var node = this.nodeStack.pop();\n        var result = { key: node.key, value: node.value };\n        if (this.isReverse) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack.length === 0)\n            return null;\n        var node = this.nodeStack[this.nodeStack.length - 1];\n        return { key: node.key, value: node.value };\n    };\n    return SortedMapIterator;\n}()); // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nvar sorted_map_LLRBNode = /** @class */ (function () {\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : LLRBNode.EMPTY;\n        this.right = right != null ? right : LLRBNode.EMPTY;\n        this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    // Returns the minimum node in the tree.\n    LLRBNode.prototype.min = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min();\n        }\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.minKey = function () {\n        return this.min().key;\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    // Returns new tree, with the key/value added.\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var n = this;\n        var cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.removeMin = function () {\n        if (this.left.isEmpty()) {\n            return LLRBNode.EMPTY;\n        }\n        var n = this;\n        if (!n.left.isRed() && !n.left.left.isRed())\n            n = n.moveRedLeft();\n        n = n.copy(null, null, null, n.left.removeMin(), null);\n        return n.fixUp();\n    };\n    // Returns new tree, with the specified item removed.\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var smallest;\n        var n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n                n = n.moveRedLeft();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed())\n                n = n.rotateRight();\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n                n = n.moveRedRight();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return LLRBNode.EMPTY;\n                }\n                else {\n                    smallest = n.right.min();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.isRed = function () {\n        return this.color;\n    };\n    // Returns new tree after performing any needed rotations.\n    LLRBNode.prototype.fixUp = function () {\n        var n = this;\n        if (n.right.isRed() && !n.left.isRed())\n            n = n.rotateLeft();\n        if (n.left.isRed() && n.left.left.isRed())\n            n = n.rotateRight();\n        if (n.left.isRed() && n.right.isRed())\n            n = n.colorFlip();\n        return n;\n    };\n    LLRBNode.prototype.moveRedLeft = function () {\n        var n = this.colorFlip();\n        if (n.right.left.isRed()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight());\n            n = n.rotateLeft();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.moveRedRight = function () {\n        var n = this.colorFlip();\n        if (n.left.left.isRed()) {\n            n = n.rotateRight();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.rotateLeft = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    LLRBNode.prototype.rotateRight = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    LLRBNode.prototype.colorFlip = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    // For testing.\n    LLRBNode.prototype.checkMaxDepth = function () {\n        var blackDepth = this.check();\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    LLRBNode.prototype.check = function () {\n        if (this.isRed() && this.left.isRed()) {\n            throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed()) {\n            throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        var blackDepth = this.left.check();\n        if (blackDepth !== this.right.check()) {\n            throw fail('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed() ? 0 : 1);\n        }\n    };\n    // tslint:disable-next-line:no-any Empty node is shared between all LLRB trees.\n    LLRBNode.EMPTY = null;\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}()); // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n        this.size = 0;\n    }\n    // Returns a copy of the current node.\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    // Returns a copy of the tree, with the specified key/value added.\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new sorted_map_LLRBNode(key, value);\n    };\n    // Returns a copy of the tree, with the specified key removed.\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.isRed = function () {\n        return false;\n    };\n    // For testing.\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.check = function () {\n        return 0;\n    };\n    return LLRBEmptyNode;\n}()); // end LLRBEmptyNode\n\nsorted_map_LLRBNode.EMPTY = new LLRBEmptyNode();\n\n//# sourceMappingURL=sorted_map.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/field_value.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder || (TypeOrder = {}));\n/** Defines the return value for pending server timestamps. */\nvar ServerTimestampBehavior;\n(function (ServerTimestampBehavior) {\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Default\"] = 0] = \"Default\";\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Estimate\"] = 1] = \"Estimate\";\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Previous\"] = 2] = \"Previous\";\n})(ServerTimestampBehavior || (ServerTimestampBehavior = {}));\n/** Holds properties that define field value deserialization options. */\nvar field_value_FieldValueOptions = /** @class */ (function () {\n    function FieldValueOptions(serverTimestampBehavior) {\n        this.serverTimestampBehavior = serverTimestampBehavior;\n    }\n    FieldValueOptions.fromSnapshotOptions = function (options) {\n        switch (options.serverTimestamps) {\n            case 'estimate':\n                return new FieldValueOptions(ServerTimestampBehavior.Estimate);\n            case 'previous':\n                return new FieldValueOptions(ServerTimestampBehavior.Previous);\n            case 'none': // Fall-through intended.\n            case undefined:\n                return FieldValueOptions.defaultOptions;\n            default:\n                return fail('fromSnapshotOptions() called with invalid options.');\n        }\n    };\n    FieldValueOptions.defaultOptions = new FieldValueOptions(ServerTimestampBehavior.Default);\n    return FieldValueOptions;\n}());\n\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar field_value_FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\n\nvar field_value_NullValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function (options) {\n        return null;\n    };\n    NullValue.prototype.isEqual = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(field_value_FieldValue));\n\nvar field_value_BooleanValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.isEqual = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return primitiveComparator(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(field_value_FieldValue));\n\n/** Base class for IntegerValue and DoubleValue. */\nvar field_value_NumberValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(field_value_FieldValue));\n\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar field_value_IntegerValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.isEqual = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via isEqual().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(field_value_NumberValue));\n\nvar field_value_DoubleValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.isEqual = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via isEqual().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(field_value_NumberValue));\n\n// TODO(b/37267885): Add truncation support\nvar field_value_StringValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    StringValue.prototype.isEqual = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return primitiveComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(field_value_FieldValue));\n\nvar field_value_TimestampValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function (options) {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.isEqual = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof field_value_ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(field_value_FieldValue));\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar field_value_ServerTimestampValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime, previousValue) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.previousValue = previousValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function (options) {\n        if (options &&\n            options.serverTimestampBehavior === ServerTimestampBehavior.Estimate) {\n            return this.localWriteTime.toDate();\n        }\n        else if (options &&\n            options.serverTimestampBehavior === ServerTimestampBehavior.Previous) {\n            return this.previousValue ? this.previousValue.value(options) : null;\n        }\n        else {\n            return null;\n        }\n    };\n    ServerTimestampValue.prototype.isEqual = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.isEqual(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof field_value_TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(field_value_FieldValue));\n\nvar field_value_BlobValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    BlobValue.prototype.isEqual = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(field_value_FieldValue));\n\nvar field_value_RefValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function (options) {\n        return this.key;\n    };\n    RefValue.prototype.isEqual = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.isEqual(other.key) && this.databaseId.isEqual(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : document_key_DocumentKey.comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(field_value_FieldValue));\n\nvar field_value_GeoPointValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.isEqual = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(field_value_FieldValue));\n\nvar field_value_ObjectValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function (options) {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value(options);\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.isEqual = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.isEqual(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = primitiveComparator(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return primitiveComparator(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        assert(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));\n    return ObjectValue;\n}(field_value_FieldValue));\n\nvar field_value_ArrayValue = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function (options) {\n        return this.internalValue.map(function (v) { return v.value(options); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.isEqual = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].isEqual(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return primitiveComparator(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(field_value_FieldValue));\n\n\n//# sourceMappingURL=field_value.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/types.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nvar MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nvar MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nvar isInteger = NumberAsAny.isInteger ||\n    (function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    });\n/**\n * Returns whether a variable is either undefined or null.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nfunction isSafeInteger(value) {\n    return (isInteger(value) &&\n        value <= MAX_SAFE_INTEGER &&\n        value >= MIN_SAFE_INTEGER);\n}\n/**\n * Safely checks if the number is NaN.\n */\nfunction safeIsNaN(value) {\n    if (NumberAsAny.IsNaN) {\n        return NumberAsAny.IsNaN(value);\n    }\n    else {\n        return typeof value === 'number' && isNaN(value);\n    }\n}\n\n//# sourceMappingURL=types.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/query.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar query_Query = /** @class */ (function () {\n    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\n        if (filters === void 0) { filters = []; }\n        if (limit === void 0) { limit = null; }\n        if (startAt === void 0) { startAt = null; }\n        if (endAt === void 0) { endAt = null; }\n        this.path = path;\n        this.explicitOrderBy = explicitOrderBy;\n        this.filters = filters;\n        this.limit = limit;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.memoizedCanonicalId = null;\n        this.memoizedOrderBy = null;\n        if (this.startAt) {\n            this.assertValidBound(this.startAt);\n        }\n        if (this.endAt) {\n            this.assertValidBound(this.endAt);\n        }\n    }\n    Query.atPath = function (path) {\n        return new Query(path);\n    };\n    Object.defineProperty(Query.prototype, \"orderBy\", {\n        get: function () {\n            if (this.memoizedOrderBy === null) {\n                var inequalityField = this.getInequalityFilterField();\n                var firstOrderByField = this.getFirstOrderByField();\n                if (inequalityField !== null && firstOrderByField === null) {\n                    // In order to implicitly add key ordering, we must also add the\n                    // inequality filter field for it to be a valid query.\n                    // Note that the default inequality field and key ordering is ascending.\n                    if (inequalityField.isKeyField()) {\n                        this.memoizedOrderBy = [KEY_ORDERING_ASC];\n                    }\n                    else {\n                        this.memoizedOrderBy = [\n                            new query_OrderBy(inequalityField),\n                            KEY_ORDERING_ASC\n                        ];\n                    }\n                }\n                else {\n                    assert(inequalityField === null ||\n                        (firstOrderByField !== null &&\n                            inequalityField.isEqual(firstOrderByField)), 'First orderBy should match inequality field.');\n                    this.memoizedOrderBy = [];\n                    var foundKeyOrdering = false;\n                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n                        var orderBy = _a[_i];\n                        this.memoizedOrderBy.push(orderBy);\n                        if (orderBy.field.isKeyField()) {\n                            foundKeyOrdering = true;\n                        }\n                    }\n                    if (!foundKeyOrdering) {\n                        // The order of the implicit key ordering always matches the last\n                        // explicit order by\n                        var lastDirection = this.explicitOrderBy.length > 0\n                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n                            : Direction.ASCENDING;\n                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING\n                            ? KEY_ORDERING_ASC\n                            : KEY_ORDERING_DESC);\n                    }\n                }\n            }\n            return this.memoizedOrderBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Query.prototype.addFilter = function (filter) {\n        assert(this.getInequalityFilterField() == null ||\n            !(filter instanceof query_RelationFilter) ||\n            !filter.isInequality() ||\n            filter.field.isEqual(this.getInequalityFilterField()), 'Query must only have one inequality field.');\n        assert(!document_key_DocumentKey.isDocumentKey(this.path), 'No filtering allowed for document query');\n        var newFilters = this.filters.concat([filter]);\n        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.addOrderBy = function (orderBy) {\n        assert(!document_key_DocumentKey.isDocumentKey(this.path), 'No ordering allowed for document query');\n        assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var newOrderBy = this.explicitOrderBy.concat([orderBy]);\n        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withLimit = function (limit) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withStartAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);\n    };\n    Query.prototype.withEndAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);\n    };\n    // TODO(b/29183165): This is used to get a unique string from a query to, for\n    // example, use as a dictionary key, but the implementation is subject to\n    // collisions. Make it collision-free.\n    Query.prototype.canonicalId = function () {\n        if (this.memoizedCanonicalId === null) {\n            var canonicalId = this.path.canonicalString();\n            canonicalId += '|f:';\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                canonicalId += filter.canonicalId();\n                canonicalId += ',';\n            }\n            canonicalId += '|ob:';\n            // TODO(dimond): make this collision resistant\n            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {\n                var orderBy = _c[_b];\n                canonicalId += orderBy.canonicalId();\n                canonicalId += ',';\n            }\n            if (!isNullOrUndefined(this.limit)) {\n                canonicalId += '|l:';\n                canonicalId += this.limit;\n            }\n            if (this.startAt) {\n                canonicalId += '|lb:';\n                canonicalId += this.startAt.canonicalId();\n            }\n            if (this.endAt) {\n                canonicalId += '|ub:';\n                canonicalId += this.endAt.canonicalId();\n            }\n            this.memoizedCanonicalId = canonicalId;\n        }\n        return this.memoizedCanonicalId;\n    };\n    Query.prototype.toString = function () {\n        var str = 'Query(' + this.path.canonicalString();\n        if (this.filters.length > 0) {\n            str += \", filters: [\" + this.filters.join(', ') + \"]\";\n        }\n        if (!isNullOrUndefined(this.limit)) {\n            str += ', limit: ' + this.limit;\n        }\n        if (this.explicitOrderBy.length > 0) {\n            str += \", orderBy: [\" + this.explicitOrderBy.join(', ') + \"]\";\n        }\n        if (this.startAt) {\n            str += ', startAt: ' + this.startAt.canonicalId();\n        }\n        if (this.endAt) {\n            str += ', endAt: ' + this.endAt.canonicalId();\n        }\n        return str + ')';\n    };\n    Query.prototype.isEqual = function (other) {\n        if (this.limit !== other.limit) {\n            return false;\n        }\n        if (this.orderBy.length !== other.orderBy.length) {\n            return false;\n        }\n        for (var i = 0; i < this.orderBy.length; i++) {\n            if (!this.orderBy[i].isEqual(other.orderBy[i])) {\n                return false;\n            }\n        }\n        if (this.filters.length !== other.filters.length) {\n            return false;\n        }\n        for (var i = 0; i < this.filters.length; i++) {\n            if (!this.filters[i].isEqual(other.filters[i])) {\n                return false;\n            }\n        }\n        if (!this.path.isEqual(other.path)) {\n            return false;\n        }\n        if (this.startAt !== null\n            ? !this.startAt.isEqual(other.startAt)\n            : other.startAt !== null) {\n            return false;\n        }\n        return this.endAt !== null\n            ? this.endAt.isEqual(other.endAt)\n            : other.endAt === null;\n    };\n    Query.prototype.docComparator = function (d1, d2) {\n        var comparedOnKeyField = false;\n        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            var comp = orderBy.compare(d1, d2);\n            if (comp !== 0)\n                return comp;\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n        }\n        // Assert that we actually compared by key\n        assert(comparedOnKeyField, \"orderBy used that doesn't compare on key field\");\n        return 0;\n    };\n    Query.prototype.matches = function (doc) {\n        return (this.matchesAncestor(doc) &&\n            this.matchesOrderBy(doc) &&\n            this.matchesFilters(doc) &&\n            this.matchesBounds(doc));\n    };\n    Query.prototype.hasLimit = function () {\n        return !isNullOrUndefined(this.limit);\n    };\n    Query.prototype.getFirstOrderByField = function () {\n        return this.explicitOrderBy.length > 0\n            ? this.explicitOrderBy[0].field\n            : null;\n    };\n    Query.prototype.getInequalityFilterField = function () {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (filter instanceof query_RelationFilter && filter.isInequality()) {\n                return filter.field;\n            }\n        }\n        return null;\n    };\n    Query.prototype.isDocumentQuery = function () {\n        return document_key_DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;\n    };\n    Query.prototype.matchesAncestor = function (doc) {\n        var docPath = doc.key.path;\n        if (document_key_DocumentKey.isDocumentKey(this.path)) {\n            // exact match for document queries\n            return this.path.isEqual(docPath);\n        }\n        else {\n            // shallow ancestor queries by default\n            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);\n        }\n    };\n    /**\n     * A document must have a value for every ordering clause in order to show up\n     * in the results.\n     */\n    Query.prototype.matchesOrderBy = function (doc) {\n        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            // order by key always matches\n            if (!orderBy.field.isKeyField() &&\n                doc.field(orderBy.field) === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Query.prototype.matchesFilters = function (doc) {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (!filter.matches(doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Makes sure a document is within the bounds, if provided.\n     */\n    Query.prototype.matchesBounds = function (doc) {\n        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        return true;\n    };\n    Query.prototype.assertValidBound = function (bound) {\n        assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');\n    };\n    return Query;\n}());\n\nvar query_RelationOp = /** @class */ (function () {\n    function RelationOp(name) {\n        this.name = name;\n    }\n    RelationOp.fromString = function (op) {\n        switch (op) {\n            case '<':\n                return RelationOp.LESS_THAN;\n            case '<=':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case '==':\n                return RelationOp.EQUAL;\n            case '>=':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case '>':\n                return RelationOp.GREATER_THAN;\n            default:\n                return fail('Unknown relation: ' + op);\n        }\n    };\n    RelationOp.prototype.toString = function () {\n        return this.name;\n    };\n    RelationOp.prototype.isEqual = function (other) {\n        return this.name === other.name;\n    };\n    RelationOp.LESS_THAN = new RelationOp('<');\n    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');\n    RelationOp.EQUAL = new RelationOp('==');\n    RelationOp.GREATER_THAN = new RelationOp('>');\n    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n    return RelationOp;\n}());\n\nvar query_RelationFilter = /** @class */ (function () {\n    function RelationFilter(field, op, value) {\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    RelationFilter.prototype.matches = function (doc) {\n        if (this.field.isKeyField()) {\n            assert(this.value instanceof field_value_RefValue, 'Comparing on key, but filter value not a RefValue');\n            var refValue = this.value;\n            var comparison = document_key_DocumentKey.comparator(doc.key, refValue.key);\n            return this.matchesComparison(comparison);\n        }\n        else {\n            var val = doc.field(this.field);\n            return val !== undefined && this.matchesValue(val);\n        }\n    };\n    RelationFilter.prototype.matchesValue = function (value) {\n        // Only compare types with matching backend order (such as double and int).\n        if (this.value.typeOrder !== value.typeOrder) {\n            return false;\n        }\n        return this.matchesComparison(value.compareTo(this.value));\n    };\n    RelationFilter.prototype.matchesComparison = function (comparison) {\n        switch (this.op) {\n            case query_RelationOp.LESS_THAN:\n                return comparison < 0;\n            case query_RelationOp.LESS_THAN_OR_EQUAL:\n                return comparison <= 0;\n            case query_RelationOp.EQUAL:\n                return comparison === 0;\n            case query_RelationOp.GREATER_THAN:\n                return comparison > 0;\n            case query_RelationOp.GREATER_THAN_OR_EQUAL:\n                return comparison >= 0;\n            default:\n                return fail('Unknown relation op' + this.op);\n        }\n    };\n    RelationFilter.prototype.isInequality = function () {\n        return this.op !== query_RelationOp.EQUAL;\n    };\n    RelationFilter.prototype.canonicalId = function () {\n        // TODO(b/29183165): Technically, this won't be unique if two values have\n        // the same description, such as the int 3 and the string \"3\". So we should\n        // add the types in here somehow, too.\n        return (this.field.canonicalString() + this.op.toString() + this.value.toString());\n    };\n    RelationFilter.prototype.isEqual = function (other) {\n        if (other instanceof RelationFilter) {\n            return (this.op.isEqual(other.op) &&\n                this.field.isEqual(other.field) &&\n                this.value.isEqual(other.value));\n        }\n        else {\n            return false;\n        }\n    };\n    RelationFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" \" + this.op + \" \" + this.value.value();\n    };\n    return RelationFilter;\n}());\n\n/**\n * Filter that matches 'null' values.\n */\nvar NullFilter = /** @class */ (function () {\n    function NullFilter(field) {\n        this.field = field;\n    }\n    NullFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field);\n        return val !== undefined && val.value() === null;\n    };\n    NullFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS null';\n    };\n    NullFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS null\";\n    };\n    NullFilter.prototype.isEqual = function (other) {\n        if (other instanceof NullFilter) {\n            return this.field.isEqual(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NullFilter;\n}());\n\n/**\n * Filter that matches 'NaN' values.\n */\nvar NanFilter = /** @class */ (function () {\n    function NanFilter(field) {\n        this.field = field;\n    }\n    NanFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field).value();\n        return typeof val === 'number' && isNaN(val);\n    };\n    NanFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS NaN';\n    };\n    NanFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS NaN\";\n    };\n    NanFilter.prototype.isEqual = function (other) {\n        if (other instanceof NanFilter) {\n            return this.field.isEqual(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NanFilter;\n}());\n\n/**\n * Creates a filter based on the provided arguments.\n */\nfunction fieldFilter(field, op, value) {\n    if (value.isEqual(field_value_NullValue.INSTANCE)) {\n        if (op !== query_RelationOp.EQUAL) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on null.');\n        }\n        return new NullFilter(field);\n    }\n    else if (value.isEqual(field_value_DoubleValue.NAN)) {\n        if (op !== query_RelationOp.EQUAL) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on NaN.');\n        }\n        return new NanFilter(field);\n    }\n    else {\n        return new query_RelationFilter(field, op, value);\n    }\n}\n/**\n * The direction of sorting in an order by.\n */\nvar Direction = /** @class */ (function () {\n    function Direction(name) {\n        this.name = name;\n    }\n    Direction.prototype.toString = function () {\n        return this.name;\n    };\n    Direction.ASCENDING = new Direction('asc');\n    Direction.DESCENDING = new Direction('desc');\n    return Direction;\n}());\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nvar query_Bound = /** @class */ (function () {\n    function Bound(position, before) {\n        this.position = position;\n        this.before = before;\n    }\n    Bound.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        var canonicalId = this.before ? 'b:' : 'a:';\n        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {\n            var component = _a[_i];\n            canonicalId += component.toString();\n        }\n        return canonicalId;\n    };\n    /**\n     * Returns true if a document sorts before a bound using the provided sort\n     * order.\n     */\n    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {\n        assert(this.position.length <= orderBy.length, \"Bound has more components than query's orderBy\");\n        var comparison = 0;\n        for (var i = 0; i < this.position.length; i++) {\n            var orderByComponent = orderBy[i];\n            var component = this.position[i];\n            if (orderByComponent.field.isKeyField()) {\n                assert(component instanceof field_value_RefValue, 'Bound has a non-key value where the key path is being used.');\n                comparison = document_key_DocumentKey.comparator(component.key, doc.key);\n            }\n            else {\n                var docValue = doc.field(orderByComponent.field);\n                assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');\n                comparison = component.compareTo(docValue);\n            }\n            if (orderByComponent.dir === Direction.DESCENDING) {\n                comparison = comparison * -1;\n            }\n            if (comparison !== 0) {\n                break;\n            }\n        }\n        return this.before ? comparison <= 0 : comparison < 0;\n    };\n    Bound.prototype.isEqual = function (other) {\n        if (other === null) {\n            return false;\n        }\n        if (this.before !== other.before ||\n            this.position.length !== other.position.length) {\n            return false;\n        }\n        for (var i = 0; i < this.position.length; i++) {\n            var thisPosition = this.position[i];\n            var otherPosition = other.position[i];\n            return thisPosition.isEqual(otherPosition);\n        }\n        return true;\n    };\n    return Bound;\n}());\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar query_OrderBy = /** @class */ (function () {\n    function OrderBy(field, dir) {\n        this.field = field;\n        if (dir === undefined) {\n            dir = Direction.ASCENDING;\n        }\n        this.dir = dir;\n        this.isKeyOrderBy = field.isKeyField();\n    }\n    OrderBy.prototype.compare = function (d1, d2) {\n        var comparison = this.isKeyOrderBy\n            ? document_Document.compareByKey(d1, d2)\n            : document_Document.compareByField(this.field, d1, d2);\n        switch (this.dir) {\n            case Direction.ASCENDING:\n                return comparison;\n            case Direction.DESCENDING:\n                return -1 * comparison;\n            default:\n                return fail('Unknown direction: ' + this.dir);\n        }\n    };\n    OrderBy.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        return this.field.canonicalString() + this.dir.toString();\n    };\n    OrderBy.prototype.toString = function () {\n        return this.field.canonicalString() + \" (\" + this.dir + \")\";\n    };\n    OrderBy.prototype.isEqual = function (other) {\n        return this.dir === other.dir && this.field.isEqual(other.field);\n    };\n    return OrderBy;\n}());\n\nvar KEY_ORDERING_ASC = new query_OrderBy(path_FieldPath.keyField(), Direction.ASCENDING);\nvar KEY_ORDERING_DESC = new query_OrderBy(path_FieldPath.keyField(), Direction.DESCENDING);\n\n//# sourceMappingURL=query.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/timestamp.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nvar timestamp_Timestamp = /** @class */ (function () {\n    function Timestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n        assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n        assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n        assert(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\n        // This will break in the year 10,000.\n        assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n    }\n    Timestamp.now = function () {\n        return Timestamp.fromEpochMilliseconds(Date.now());\n    };\n    Timestamp.fromDate = function (date) {\n        return Timestamp.fromEpochMilliseconds(date.getTime());\n    };\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.fromISOString = function (utc) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        var nanos = 0;\n        var fraction = isoRegExp.exec(utc);\n        assert(!!fraction, 'invalid timestamp: ' + utc);\n        if (fraction[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            var nanoStr = fraction[1];\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\n            nanos = Number(nanoStr);\n        }\n        // Parse the date to get the seconds.\n        var date = new Date(utc);\n        var seconds = Math.floor(date.getTime() / 1000);\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.prototype.toDate = function () {\n        return new Date(this.toEpochMilliseconds());\n    };\n    Timestamp.prototype.toEpochMilliseconds = function () {\n        return this.seconds * 1000 + this.nanos / 1e6;\n    };\n    Timestamp.prototype.compareTo = function (other) {\n        if (this.seconds === other.seconds) {\n            return primitiveComparator(this.nanos, other.nanos);\n        }\n        return primitiveComparator(this.seconds, other.seconds);\n    };\n    Timestamp.prototype.isEqual = function (other) {\n        return other.seconds === this.seconds && other.nanos === this.nanos;\n    };\n    Timestamp.prototype.toString = function () {\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n    };\n    return Timestamp;\n}());\n\n\n//# sourceMappingURL=timestamp.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/snapshot_version.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar snapshot_version_SnapshotVersion = /** @class */ (function () {\n    function SnapshotVersion(timestamp) {\n        this.timestamp = timestamp;\n    }\n    // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n    // delete this constructor and use a timestamp-backed version everywhere.\n    SnapshotVersion.fromMicroseconds = function (value) {\n        var seconds = Math.floor(value / 1e6);\n        var nanos = (value % 1e6) * 1e3;\n        return new SnapshotVersion(new timestamp_Timestamp(seconds, nanos));\n    };\n    SnapshotVersion.fromTimestamp = function (value) {\n        return new SnapshotVersion(value);\n    };\n    SnapshotVersion.forDeletedDoc = function () {\n        return SnapshotVersion.MIN;\n    };\n    SnapshotVersion.prototype.compareTo = function (other) {\n        return this.timestamp.compareTo(other.timestamp);\n    };\n    SnapshotVersion.prototype.isEqual = function (other) {\n        return this.timestamp.isEqual(other.timestamp);\n    };\n    /** Returns a number representation of the version for use in spec tests. */\n    SnapshotVersion.prototype.toMicroseconds = function () {\n        // Convert to microseconds.\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n    };\n    SnapshotVersion.prototype.toString = function () {\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n    };\n    SnapshotVersion.prototype.toTimestamp = function () {\n        return this.timestamp;\n    };\n    SnapshotVersion.MIN = new SnapshotVersion(new timestamp_Timestamp(0, 0));\n    return SnapshotVersion;\n}());\n\n\n//# sourceMappingURL=snapshot_version.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/query_data.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** An enumeration of the different purposes we have for queries. */\nvar QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar query_data_QueryData = /** @class */ (function () {\n    function QueryData(\n    /** The query being listened to. */\n    query, \n    /**\n     * The target ID to which the query corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    targetId, \n    /** The purpose of the query. */\n    purpose, \n    /** The latest snapshot version seen for this target. */\n    snapshotVersion, \n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the query. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = snapshot_version_SnapshotVersion.MIN; }\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.isEqual = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.isEqual(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.isEqual(other.query));\n    };\n    return QueryData;\n}());\n\n\n//# sourceMappingURL=query_data.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/mutation.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar mutation_FieldMask = /** @class */ (function () {\n    function FieldMask(fields) {\n        this.fields = fields;\n        // TODO(dimond): validation of FieldMask\n    }\n    FieldMask.prototype.isEqual = function (other) {\n        return arrayEquals(this.fields, other.fields);\n    };\n    return FieldMask;\n}());\n\n/** Transforms a value into a server-generated timestamp. */\nvar ServerTimestampTransform = /** @class */ (function () {\n    function ServerTimestampTransform() {\n    }\n    ServerTimestampTransform.prototype.isEqual = function (other) {\n        return other instanceof ServerTimestampTransform;\n    };\n    ServerTimestampTransform.instance = new ServerTimestampTransform();\n    return ServerTimestampTransform;\n}());\n\n/** A field path and the TransformOperation to perform upon it. */\nvar FieldTransform = /** @class */ (function () {\n    function FieldTransform(field, transform) {\n        this.field = field;\n        this.transform = transform;\n    }\n    FieldTransform.prototype.isEqual = function (other) {\n        return (this.field.isEqual(other.field) && this.transform.isEqual(other.transform));\n    };\n    return FieldTransform;\n}());\n\n/** The result of successfully applying a mutation to the backend. */\nvar MutationResult = /** @class */ (function () {\n    function MutationResult(\n    /**\n     * The version at which the mutation was committed or null for a delete.\n     */\n    version, \n    /**\n     * The resulting fields returned from the backend after a\n     * TransformMutation has been committed. Contains one FieldValue for each\n     * FieldTransform that was in the mutation.\n     *\n     * Will be null if the mutation was not a TransformMutation.\n     */\n    transformResults) {\n        this.version = version;\n        this.transformResults = transformResults;\n    }\n    return MutationResult;\n}());\n\nvar MutationType;\n(function (MutationType) {\n    MutationType[MutationType[\"Set\"] = 0] = \"Set\";\n    MutationType[MutationType[\"Patch\"] = 1] = \"Patch\";\n    MutationType[MutationType[\"Transform\"] = 2] = \"Transform\";\n    MutationType[MutationType[\"Delete\"] = 3] = \"Delete\";\n})(MutationType || (MutationType = {}));\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar mutation_Precondition = /** @class */ (function () {\n    function Precondition(updateTime, exists) {\n        this.updateTime = updateTime;\n        this.exists = exists;\n        assert(updateTime === undefined || exists === undefined, 'Precondition can specify \"exists\" or \"updateTime\" but not both');\n    }\n    /** Creates a new Precondition with an exists flag. */\n    Precondition.exists = function (exists) {\n        return new Precondition(undefined, exists);\n    };\n    /** Creates a new Precondition based on a version a document exists at. */\n    Precondition.updateTime = function (version) {\n        return new Precondition(version);\n    };\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\n        /** Returns whether this Precondition is empty. */\n        get: function () {\n            return this.updateTime === undefined && this.exists === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns true if the preconditions is valid for the given document\n     * (or null if no document is available).\n     */\n    Precondition.prototype.isValidFor = function (maybeDoc) {\n        if (this.updateTime !== undefined) {\n            return (maybeDoc instanceof document_Document &&\n                maybeDoc.version.isEqual(this.updateTime));\n        }\n        else if (this.exists !== undefined) {\n            if (this.exists) {\n                return maybeDoc instanceof document_Document;\n            }\n            else {\n                return maybeDoc === null || maybeDoc instanceof document_NoDocument;\n            }\n        }\n        else {\n            assert(this.isNone, 'Precondition should be empty');\n            return true;\n        }\n    };\n    Precondition.prototype.isEqual = function (other) {\n        return (equals(this.updateTime, other.updateTime) &&\n            this.exists === other.exists);\n    };\n    Precondition.NONE = new Precondition();\n    return Precondition;\n}());\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also it version.\n * In the case of Set, Patch, and Transform mutations we preserve the existing\n * version. In the case of Delete mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nvar mutation_Mutation = /** @class */ (function () {\n    function Mutation() {\n    }\n    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {\n        if (maybeDoc != null) {\n            assert(maybeDoc.key.isEqual(this.key), 'Can only apply a mutation to a document with the same key');\n        }\n    };\n    /**\n     * Returns the version from the given document for use as the result of a\n     * mutation. Mutations are defined to return the version of the base document\n     * only if it is an existing document. Deleted and unknown documents have a\n     * post-mutation version of SnapshotVersion.MIN.\n     */\n    Mutation.getPostMutationVersion = function (maybeDoc) {\n        if (maybeDoc instanceof document_Document) {\n            return maybeDoc.version;\n        }\n        else {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n    };\n    return Mutation;\n}());\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar mutation_SetMutation = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](SetMutation, _super);\n    function SetMutation(key, value, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.value = value;\n        _this.precondition = precondition;\n        _this.type = MutationType.Set;\n        return _this;\n    }\n    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        return new document_Document(this.key, version, this.value, {\n            hasLocalMutations: false\n        });\n    };\n    SetMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        return new document_Document(this.key, version, this.value, {\n            hasLocalMutations: true\n        });\n    };\n    SetMutation.prototype.isEqual = function (other) {\n        return (other instanceof SetMutation &&\n            this.key.isEqual(other.key) &&\n            this.value.isEqual(other.value) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    return SetMutation;\n}(mutation_Mutation));\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar mutation_PatchMutation = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](PatchMutation, _super);\n    function PatchMutation(key, data, fieldMask, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.data = data;\n        _this.fieldMask = fieldMask;\n        _this.precondition = precondition;\n        _this.type = MutationType.Patch;\n        return _this;\n    }\n    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new document_Document(this.key, version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    PatchMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new document_Document(this.key, version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    PatchMutation.prototype.isEqual = function (other) {\n        return (other instanceof PatchMutation &&\n            this.key.isEqual(other.key) &&\n            this.fieldMask.isEqual(other.fieldMask) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    /**\n     * Patches the data of document if available or creates a new document. Note\n     * that this does not check whether or not the precondition of this patch\n     * holds.\n     */\n    PatchMutation.prototype.patchDocument = function (maybeDoc) {\n        var data;\n        if (maybeDoc instanceof document_Document) {\n            data = maybeDoc.data;\n        }\n        else {\n            data = field_value_ObjectValue.EMPTY;\n        }\n        return this.patchObject(data);\n    };\n    PatchMutation.prototype.patchObject = function (data) {\n        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {\n            var fieldPath = _a[_i];\n            var newValue = this.data.field(fieldPath);\n            if (newValue !== undefined) {\n                data = data.set(fieldPath, newValue);\n            }\n            else {\n                data = data.delete(fieldPath);\n            }\n        }\n        return data;\n    };\n    return PatchMutation;\n}(mutation_Mutation));\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nvar mutation_TransformMutation = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](TransformMutation, _super);\n    function TransformMutation(key, fieldTransforms) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.fieldTransforms = fieldTransforms;\n        _this.type = MutationType.Transform;\n        // NOTE: We set a precondition of exists: true as a safety-check, since we\n        // always combine TransformMutations with a SetMutation or PatchMutation which\n        // (if successful) should end up with an existing document.\n        _this.precondition = mutation_Precondition.exists(true);\n        return _this;\n    }\n    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');\n        var transformResults = mutationResult.transformResults;\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new document_Document(this.key, doc.version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    TransformMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var transformResults = this.localTransformResults(localWriteTime, baseDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new document_Document(this.key, doc.version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    TransformMutation.prototype.isEqual = function (other) {\n        return (other instanceof TransformMutation &&\n            this.key.isEqual(other.key) &&\n            arrayEquals(this.fieldTransforms, other.fieldTransforms) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    /**\n     * Asserts that the given MaybeDocument is actually a Document and verifies\n     * that it matches the key for this mutation. Since we only support\n     * transformations with precondition exists this method is guaranteed to be\n     * safe.\n     */\n    TransformMutation.prototype.requireDocument = function (maybeDoc) {\n        assert(maybeDoc instanceof document_Document, 'Unknown MaybeDocument type ' + maybeDoc);\n        var doc = maybeDoc;\n        assert(doc.key.isEqual(this.key), 'Can only transform a document with the same key');\n        return doc;\n    };\n    /**\n     * Creates a list of \"transform results\" (a transform result is a field value\n     * representing the result of applying a transform) for use when applying a\n     * TransformMutation locally.\n     *\n     * @param localWriteTime The local time of the transform mutation (used to\n     *     generate ServerTimestampValues).\n     * @param baseDoc The document prior to applying this mutation batch.\n     * @return The transform results list.\n     */\n    TransformMutation.prototype.localTransformResults = function (localWriteTime, baseDoc) {\n        var transformResults = [];\n        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {\n            var fieldTransform = _a[_i];\n            var transform = fieldTransform.transform;\n            if (transform instanceof ServerTimestampTransform) {\n                var previousValue = null;\n                if (baseDoc instanceof document_Document) {\n                    previousValue = baseDoc.field(fieldTransform.field) || null;\n                }\n                transformResults.push(new field_value_ServerTimestampValue(localWriteTime, previousValue));\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return transformResults;\n    };\n    TransformMutation.prototype.transformObject = function (data, transformResults) {\n        assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');\n        for (var i = 0; i < this.fieldTransforms.length; i++) {\n            var fieldTransform = this.fieldTransforms[i];\n            var transform = fieldTransform.transform;\n            var fieldPath = fieldTransform.field;\n            if (transform instanceof ServerTimestampTransform) {\n                data = data.set(fieldPath, transformResults[i]);\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return data;\n    };\n    return TransformMutation;\n}(mutation_Mutation));\n\n/** A mutation that deletes the document at the given key. */\nvar mutation_DeleteMutation = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](DeleteMutation, _super);\n    function DeleteMutation(key, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.precondition = precondition;\n        _this.type = MutationType.Delete;\n        return _this;\n    }\n    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        return new document_NoDocument(this.key, snapshot_version_SnapshotVersion.MIN);\n    };\n    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(this.key), 'Can only apply mutation to document with same key');\n        }\n        return new document_NoDocument(this.key, snapshot_version_SnapshotVersion.forDeletedDoc());\n    };\n    DeleteMutation.prototype.isEqual = function (other) {\n        return (other instanceof DeleteMutation &&\n            this.key.isEqual(other.key) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    return DeleteMutation;\n}(mutation_Mutation));\n\n\n//# sourceMappingURL=mutation.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/existence_filter.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExistenceFilter = /** @class */ (function () {\n    // TODO(b/33078163): just use simplest form of existence filter for now\n    function ExistenceFilter(count) {\n        this.count = count;\n    }\n    ExistenceFilter.prototype.isEqual = function (other) {\n        return other && other.count === this.count;\n    };\n    return ExistenceFilter;\n}());\n\n\n//# sourceMappingURL=existence_filter.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/rpc_error.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nvar RpcCode;\n(function (RpcCode) {\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\nfunction isPermanentError(code) {\n    switch (code) {\n        case Code.OK:\n            return fail('Treated status OK as error');\n        case Code.CANCELLED:\n        case Code.UNKNOWN:\n        case Code.DEADLINE_EXCEEDED:\n        case Code.RESOURCE_EXHAUSTED:\n        case Code.INTERNAL:\n        case Code.UNAVAILABLE:\n        // Unauthenticated means something went wrong with our token and we need\n        // to retry with new credentials which will happen automatically.\n        // TODO(b/37325376): Give up after second unauthenticated error.\n        case Code.UNAUTHENTICATED:\n            return false;\n        case Code.INVALID_ARGUMENT:\n        case Code.NOT_FOUND:\n        case Code.ALREADY_EXISTS:\n        case Code.PERMISSION_DENIED:\n        case Code.FAILED_PRECONDITION:\n        // Aborted might be retried in some scenarios, but that is dependant on\n        // the context and should handled individually by the calling code.\n        // See https://cloud.google.com/apis/design/errors.\n        case Code.ABORTED:\n        case Code.OUT_OF_RANGE:\n        case Code.UNIMPLEMENTED:\n        case Code.DATA_LOSS:\n            return true;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nfunction mapCodeFromRpcStatus(status) {\n    // tslint:disable-next-line:no-any lookup by string\n    var code = RpcCode[status];\n    if (code === undefined) {\n        return undefined;\n    }\n    return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nfunction mapCodeFromRpcCode(code) {\n    if (code === undefined) {\n        // This shouldn't normally happen, but in certain error cases (like trying\n        // to send invalid proto messages) we may get an error with no GRPC code.\n        log_error('GRPC error has no .code');\n        return Code.UNKNOWN;\n    }\n    switch (code) {\n        case RpcCode.OK:\n            return Code.OK;\n        case RpcCode.CANCELLED:\n            return Code.CANCELLED;\n        case RpcCode.UNKNOWN:\n            return Code.UNKNOWN;\n        case RpcCode.DEADLINE_EXCEEDED:\n            return Code.DEADLINE_EXCEEDED;\n        case RpcCode.RESOURCE_EXHAUSTED:\n            return Code.RESOURCE_EXHAUSTED;\n        case RpcCode.INTERNAL:\n            return Code.INTERNAL;\n        case RpcCode.UNAVAILABLE:\n            return Code.UNAVAILABLE;\n        case RpcCode.UNAUTHENTICATED:\n            return Code.UNAUTHENTICATED;\n        case RpcCode.INVALID_ARGUMENT:\n            return Code.INVALID_ARGUMENT;\n        case RpcCode.NOT_FOUND:\n            return Code.NOT_FOUND;\n        case RpcCode.ALREADY_EXISTS:\n            return Code.ALREADY_EXISTS;\n        case RpcCode.PERMISSION_DENIED:\n            return Code.PERMISSION_DENIED;\n        case RpcCode.FAILED_PRECONDITION:\n            return Code.FAILED_PRECONDITION;\n        case RpcCode.ABORTED:\n            return Code.ABORTED;\n        case RpcCode.OUT_OF_RANGE:\n            return Code.OUT_OF_RANGE;\n        case RpcCode.UNIMPLEMENTED:\n            return Code.UNIMPLEMENTED;\n        case RpcCode.DATA_LOSS:\n            return Code.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nfunction mapRpcCodeFromCode(code) {\n    if (code === undefined) {\n        return RpcCode.OK;\n    }\n    switch (code) {\n        case Code.OK:\n            return RpcCode.OK;\n        case Code.CANCELLED:\n            return RpcCode.CANCELLED;\n        case Code.UNKNOWN:\n            return RpcCode.UNKNOWN;\n        case Code.DEADLINE_EXCEEDED:\n            return RpcCode.DEADLINE_EXCEEDED;\n        case Code.RESOURCE_EXHAUSTED:\n            return RpcCode.RESOURCE_EXHAUSTED;\n        case Code.INTERNAL:\n            return RpcCode.INTERNAL;\n        case Code.UNAVAILABLE:\n            return RpcCode.UNAVAILABLE;\n        case Code.UNAUTHENTICATED:\n            return RpcCode.UNAUTHENTICATED;\n        case Code.INVALID_ARGUMENT:\n            return RpcCode.INVALID_ARGUMENT;\n        case Code.NOT_FOUND:\n            return RpcCode.NOT_FOUND;\n        case Code.ALREADY_EXISTS:\n            return RpcCode.ALREADY_EXISTS;\n        case Code.PERMISSION_DENIED:\n            return RpcCode.PERMISSION_DENIED;\n        case Code.FAILED_PRECONDITION:\n            return RpcCode.FAILED_PRECONDITION;\n        case Code.ABORTED:\n            return RpcCode.ABORTED;\n        case Code.OUT_OF_RANGE:\n            return RpcCode.OUT_OF_RANGE;\n        case Code.UNIMPLEMENTED:\n            return RpcCode.UNIMPLEMENTED;\n        case Code.DATA_LOSS:\n            return RpcCode.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction mapCodeFromHttpStatus(status) {\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    //\n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n    switch (status) {\n        case 200:// OK\n            return Code.OK;\n        case 400:// Bad Request\n            return Code.INVALID_ARGUMENT;\n        // Other possibilities based on the forward mapping\n        // return Code.FAILED_PRECONDITION;\n        // return Code.OUT_OF_RANGE;\n        case 401:// Unauthorized\n            return Code.UNAUTHENTICATED;\n        case 403:// Forbidden\n            return Code.PERMISSION_DENIED;\n        case 404:// Not Found\n            return Code.NOT_FOUND;\n        case 409:// Conflict\n            return Code.ABORTED;\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n        case 416:// Range Not Satisfiable\n            return Code.OUT_OF_RANGE;\n        case 429:// Too Many Requests\n            return Code.RESOURCE_EXHAUSTED;\n        case 499:// Client Closed Request\n            return Code.CANCELLED;\n        case 500:// Internal Server Error\n            return Code.UNKNOWN;\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n        case 501:// Unimplemented\n            return Code.UNIMPLEMENTED;\n        case 503:// Service Unavailable\n            return Code.UNAVAILABLE;\n        case 504:// Gateway Timeout\n            return Code.DEADLINE_EXCEEDED;\n        default:\n            if (status >= 200 && status < 300)\n                return Code.OK;\n            if (status >= 400 && status < 500)\n                return Code.FAILED_PRECONDITION;\n            if (status >= 500 && status < 600)\n                return Code.INTERNAL;\n            return Code.UNKNOWN;\n    }\n}\n\n//# sourceMappingURL=rpc_error.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/sorted_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar sorted_set_SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new SortedMap(this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.isEqual = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\n\n\n//# sourceMappingURL=sorted_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/collections.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap(document_key_DocumentKey.comparator);\nfunction maybeDocumentMap() {\n    return EMPTY_MAYBE_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_MAP = new SortedMap(document_key_DocumentKey.comparator);\nfunction documentMap() {\n    return EMPTY_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(document_key_DocumentKey.comparator);\nfunction documentVersionMap() {\n    return EMPTY_DOCUMENT_VERSION_MAP;\n}\nvar EMPTY_DOCUMENT_KEY_SET = new sorted_set_SortedSet(document_key_DocumentKey.comparator);\nfunction documentKeySet() {\n    return EMPTY_DOCUMENT_KEY_SET;\n}\n\n//# sourceMappingURL=collections.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/remote_event.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nvar remote_event_RemoteEvent = /** @class */ (function () {\n    function RemoteEvent(\n    /**\n     * The snapshot version this event brings us up to, or MIN if not set.\n     */\n    snapshotVersion, \n    /**\n     * A map from target to changes to the target. See TargetChange.\n     */\n    targetChanges, \n    /**\n     * A set of which documents have changed or been deleted, along with the\n     * doc's new values (if not deleted).\n     */\n    documentUpdates) {\n        this.snapshotVersion = snapshotVersion;\n        this.targetChanges = targetChanges;\n        this.documentUpdates = documentUpdates;\n    }\n    RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n        this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n    };\n    RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n        /*\n         * An existence filter mismatch will reset the query and we need to reset\n         * the mapping to contain no documents and an empty resume token.\n         *\n         * Note:\n         *   * The reset mapping is empty, specifically forcing the consumer of the\n         *     change to forget all keys for this targetID;\n         *   * The resume snapshot for this target must be reset\n         *   * The target must be unacked because unwatching and rewatching\n         *     introduces a race for changes.\n         */\n        this.targetChanges[targetId] = {\n            mapping: new ResetMapping(),\n            snapshotVersion: snapshot_version_SnapshotVersion.MIN,\n            currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n            resumeToken: emptyByteString()\n        };\n    };\n    return RemoteEvent;\n}());\n\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nvar CurrentStatusUpdate;\n(function (CurrentStatusUpdate) {\n    /** The current status is not affected and should not be modified. */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n    /** The target must be marked as no longer \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n    /** The target must be marked as \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate || (CurrentStatusUpdate = {}));\nvar EMPTY_KEY_SET = documentKeySet();\nvar ResetMapping = /** @class */ (function () {\n    function ResetMapping() {\n        this.docs = EMPTY_KEY_SET;\n    }\n    Object.defineProperty(ResetMapping.prototype, \"documents\", {\n        get: function () {\n            return this.docs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetMapping.prototype.add = function (key) {\n        this.docs = this.docs.add(key);\n    };\n    ResetMapping.prototype.delete = function (key) {\n        this.docs = this.docs.delete(key);\n    };\n    ResetMapping.prototype.isEqual = function (other) {\n        return other !== null && this.docs.isEqual(other.docs);\n    };\n    return ResetMapping;\n}());\n\nvar UpdateMapping = /** @class */ (function () {\n    function UpdateMapping() {\n        this.addedDocuments = EMPTY_KEY_SET;\n        this.removedDocuments = EMPTY_KEY_SET;\n    }\n    UpdateMapping.prototype.applyToKeySet = function (keys) {\n        var result = keys;\n        this.addedDocuments.forEach(function (key) { return (result = result.add(key)); });\n        this.removedDocuments.forEach(function (key) { return (result = result.delete(key)); });\n        return result;\n    };\n    UpdateMapping.prototype.add = function (key) {\n        this.addedDocuments = this.addedDocuments.add(key);\n        this.removedDocuments = this.removedDocuments.delete(key);\n    };\n    UpdateMapping.prototype.delete = function (key) {\n        this.addedDocuments = this.addedDocuments.delete(key);\n        this.removedDocuments = this.removedDocuments.add(key);\n    };\n    UpdateMapping.prototype.isEqual = function (other) {\n        return (other !== null &&\n            this.addedDocuments.isEqual(other.addedDocuments) &&\n            this.removedDocuments.isEqual(other.removedDocuments));\n    };\n    return UpdateMapping;\n}());\n\n\n//# sourceMappingURL=remote_event.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/watch_change.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nvar DocumentWatchChange = /** @class */ (function () {\n    function DocumentWatchChange(\n    /** The new document applies to all of these targets. */\n    updatedTargetIds, \n    /** The new document is removed from all of these targets. */\n    removedTargetIds, \n    /** The key of the document for this change. */\n    key, \n    /**\n     * The new document or NoDocument if it was deleted. Is null if the\n     * document went out of view without the server sending a new document.\n     */\n    newDoc) {\n        this.updatedTargetIds = updatedTargetIds;\n        this.removedTargetIds = removedTargetIds;\n        this.key = key;\n        this.newDoc = newDoc;\n    }\n    return DocumentWatchChange;\n}());\n\nvar ExistenceFilterChange = /** @class */ (function () {\n    function ExistenceFilterChange(targetId, existenceFilter) {\n        this.targetId = targetId;\n        this.existenceFilter = existenceFilter;\n    }\n    return ExistenceFilterChange;\n}());\n\nvar WatchTargetChangeState;\n(function (WatchTargetChangeState) {\n    WatchTargetChangeState[WatchTargetChangeState[\"NoChange\"] = 0] = \"NoChange\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Added\"] = 1] = \"Added\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Removed\"] = 2] = \"Removed\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Current\"] = 3] = \"Current\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Reset\"] = 4] = \"Reset\";\n})(WatchTargetChangeState || (WatchTargetChangeState = {}));\nvar watch_change_WatchTargetChange = /** @class */ (function () {\n    function WatchTargetChange(\n    /** What kind of change occurred to the watch target. */\n    state, \n    /** The target IDs that were added/removed/set. */\n    targetIds, \n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the query. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    resumeToken, \n    /** An RPC error indicating why the watch failed. */\n    cause) {\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        if (cause === void 0) { cause = null; }\n        this.state = state;\n        this.targetIds = targetIds;\n        this.resumeToken = resumeToken;\n        this.cause = cause;\n    }\n    return WatchTargetChange;\n}());\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent and other\n * target information.\n */\nvar watch_change_WatchChangeAggregator = /** @class */ (function () {\n    function WatchChangeAggregator(snapshotVersion, listenTargets, pendingTargetResponses) {\n        this.snapshotVersion = snapshotVersion;\n        this.listenTargets = listenTargets;\n        /** The existence filter - if any - for the given target IDs. */\n        this.existenceFilters = {};\n        /** Keeps track of the current target mappings */\n        this.targetChanges = {};\n        /** Keeps track of document to update */\n        this.documentUpdates = maybeDocumentMap();\n        /** Whether this aggregator was frozen and can no longer be modified */\n        this.frozen = false;\n        this.pendingTargetResponses = shallowCopy(pendingTargetResponses);\n    }\n    /** Aggregates a watch change into the current state */\n    WatchChangeAggregator.prototype.add = function (watchChange) {\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        if (watchChange instanceof DocumentWatchChange) {\n            this.addDocumentChange(watchChange);\n        }\n        else if (watchChange instanceof watch_change_WatchTargetChange) {\n            this.addTargetChange(watchChange);\n        }\n        else if (watchChange instanceof ExistenceFilterChange) {\n            this.addExistenceFilterChange(watchChange);\n        }\n        else {\n            fail('Unknown watch change: ' + watchChange);\n        }\n    };\n    /** Aggregates all provided watch changes to the current state in order */\n    WatchChangeAggregator.prototype.addChanges = function (watchChanges) {\n        var _this = this;\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        watchChanges.forEach(function (change) { return _this.add(change); });\n    };\n    /**\n     * Converts the current state into a remote event with the snapshot version\n     * provided via the constructor.\n     */\n    WatchChangeAggregator.prototype.createRemoteEvent = function () {\n        var _this = this;\n        var targetChanges = this.targetChanges;\n        // Remove all the non-active targets from the remote event.\n        forEachNumber(this.targetChanges, function (targetId) {\n            if (!_this.isActiveTarget(targetId)) {\n                delete targetChanges[targetId];\n            }\n        });\n        // Mark this aggregator as frozen so no further modifications are made\n        this.frozen = true;\n        return new remote_event_RemoteEvent(this.snapshotVersion, targetChanges, this.documentUpdates);\n    };\n    WatchChangeAggregator.prototype.ensureTargetChange = function (targetId) {\n        var change = this.targetChanges[targetId];\n        if (!change) {\n            // Create an UpdateMapping by default, since resets are always explicit.\n            change = {\n                currentStatusUpdate: CurrentStatusUpdate.None,\n                snapshotVersion: this.snapshotVersion,\n                mapping: new UpdateMapping(),\n                resumeToken: emptyByteString()\n            };\n            this.targetChanges[targetId] = change;\n        }\n        return change;\n    };\n    /**\n     * We need to wait for watch to ack targets before we process those events,\n     * so to know if a target is active, there must be no pending acks we're\n     * waiting for and it must be in the current list of targets that the client\n     * cares about.\n     *\n     * This method is visible for testing.\n     */\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n        return (!contains(this.pendingTargetResponses, targetId) &&\n            contains(this.listenTargets, targetId));\n    };\n    WatchChangeAggregator.prototype.addDocumentChange = function (docChange) {\n        var relevant = false;\n        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {\n            var targetId = _a[_i];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.add(docChange.key);\n                relevant = true;\n            }\n        }\n        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {\n            var targetId = _c[_b];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.delete(docChange.key);\n                relevant = true;\n            }\n        }\n        // Only update the document if there is a new document to replace to an\n        // active target that is being listened to, this might be just a target\n        // update instead.\n        if (docChange.newDoc && relevant) {\n            this.documentUpdates = this.documentUpdates.insert(docChange.key, docChange.newDoc);\n        }\n    };\n    WatchChangeAggregator.prototype.addTargetChange = function (targetChange) {\n        var _this = this;\n        targetChange.targetIds.forEach(function (targetId) {\n            var change = _this.ensureTargetChange(targetId);\n            switch (targetChange.state) {\n                case WatchTargetChangeState.NoChange:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Creating the change above satisfies the semantics of no-change.\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Added:\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    if (!contains(_this.pendingTargetResponses, targetId)) {\n                        // We have a freshly added target, so we need to reset any state\n                        // that we had previously This can happen e.g. when remove and add\n                        // back a target for existence filter mismatches.\n                        change.mapping = new UpdateMapping();\n                        change.currentStatusUpdate = CurrentStatusUpdate.None;\n                        delete _this.existenceFilters[targetId];\n                    }\n                    applyResumeToken(change, targetChange.resumeToken);\n                    break;\n                case WatchTargetChangeState.Removed:\n                    // We need to keep track of removed targets to we can\n                    // post-filter and remove any target changes.\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');\n                    break;\n                case WatchTargetChangeState.Current:\n                    if (_this.isActiveTarget(targetId)) {\n                        change.currentStatusUpdate = CurrentStatusUpdate.MarkCurrent;\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Reset:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Overwrite any existing target mapping with a reset\n                        // mapping. Every subsequent update will modify the reset\n                        // mapping, not an update mapping.\n                        change.mapping = new ResetMapping();\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                default:\n                    fail('Unknown target watch change state: ' + targetChange.state);\n            }\n        });\n    };\n    /**\n     * Record that we get a watch target add/remove by decrementing the number of\n     * pending target responses that we have.\n     */\n    WatchChangeAggregator.prototype.recordTargetResponse = function (targetId) {\n        var newCount = (this.pendingTargetResponses[targetId] || 0) - 1;\n        if (newCount === 0) {\n            delete this.pendingTargetResponses[targetId];\n        }\n        else {\n            this.pendingTargetResponses[targetId] = newCount;\n        }\n    };\n    WatchChangeAggregator.prototype.addExistenceFilterChange = function (change) {\n        if (this.isActiveTarget(change.targetId)) {\n            this.existenceFilters[change.targetId] = change.existenceFilter;\n        }\n    };\n    return WatchChangeAggregator;\n}());\n\n/**\n * Applies the resume token to the TargetChange, but only when it has a new\n * value. null and empty resumeTokens are discarded.\n */\nfunction applyResumeToken(change, resumeToken) {\n    if (resumeToken.length > 0) {\n        change.resumeToken = resumeToken;\n    }\n}\n\n//# sourceMappingURL=watch_change.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/serializer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DIRECTIONS = (function () {\n    var dirs = {};\n    dirs[Direction.ASCENDING.name] = 'ASCENDING';\n    dirs[Direction.DESCENDING.name] = 'DESCENDING';\n    return dirs;\n})();\nvar OPERATORS = (function () {\n    var ops = {};\n    ops[query_RelationOp.LESS_THAN.name] = 'LESS_THAN';\n    ops[query_RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n    ops[query_RelationOp.GREATER_THAN.name] = 'GREATER_THAN';\n    ops[query_RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n    ops[query_RelationOp.EQUAL.name] = 'EQUAL';\n    return ops;\n})();\nfunction assertPresent(value, description) {\n    assert(!isNullOrUndefined(value), description + ' is missing');\n}\nfunction parseInt64(value) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    if (typeof value === 'number') {\n        return value;\n    }\n    else if (typeof value === 'string') {\n        return Number(value);\n    }\n    else {\n        return fail(\"can't parse \" + value);\n    }\n}\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar serializer_JsonProtoSerializer = /** @class */ (function () {\n    function JsonProtoSerializer(databaseId, options) {\n        this.databaseId = databaseId;\n        this.options = options;\n    }\n    JsonProtoSerializer.prototype.emptyByteString = function () {\n        if (this.options.useProto3Json) {\n            return '';\n        }\n        else {\n            return new Uint8Array(0);\n        }\n    };\n    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {\n        // byteStrings can be either string or UInt8Array, but the typings say\n        // it's always a string. Cast as string to avoid type check failing\n        return byteString;\n    };\n    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {\n        var code = status.code === undefined\n            ? Code.UNKNOWN\n            : mapCodeFromRpcCode(status.code);\n        return new error_FirestoreError(code, status.message || '');\n    };\n    /**\n     * Returns a value for a number (or undefined) that's appropriate to put into\n     * a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be. But GRPC actually\n     * expects a { value: <number> } struct.\n     */\n    JsonProtoSerializer.prototype.toInt32Value = function (val) {\n        if (!isNullOrUndefined(val)) {\n            // tslint:disable-next-line:no-any We need to match generated Proto types.\n            return { value: val };\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Returns a number (or null) from a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as accepting \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be, but it actually\n     * accepts { value: number } to match our serialization in toInt32Value().\n     */\n    JsonProtoSerializer.prototype.fromInt32Value = function (val) {\n        var result;\n        if (typeof val === 'object') {\n            // tslint:disable-next-line:no-any We need to match generated Proto types.\n            result = val.value;\n        }\n        else {\n            // We accept raw numbers (without the {value: ... } wrapper) for\n            // compatibility with legacy persisted data.\n            result = val;\n        }\n        return isNullOrUndefined(result) ? null : result;\n    };\n    /**\n     * Returns a value for a Date that's appropriate to put into a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say dates must be. But it's easier and safer\n     * to actually return a Timestamp proto.\n     */\n    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {\n        return {\n            seconds: timestamp.seconds,\n            nanos: timestamp.nanos\n            // tslint:disable-next-line:no-any\n        };\n    };\n    JsonProtoSerializer.prototype.fromTimestamp = function (date) {\n        // The json interface (for the browser) will return an iso timestamp string,\n        // while the proto js library (for node) will return a\n        // google.protobuf.Timestamp instance.\n        if (typeof date === 'string') {\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(this.options.useProto3Json,\n            //   'The timestamp string format requires Proto3.');\n            return timestamp_Timestamp.fromISOString(date);\n        }\n        else {\n            assert(!!date, 'Cannot deserialize null or undefined timestamp.');\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(!this.options.useProto3Json,\n            //   'The timestamp instance format requires Proto JS.');\n            var seconds = parseInt64(date.seconds || '0');\n            var nanos = date.nanos || 0;\n            return new timestamp_Timestamp(seconds, nanos);\n        }\n    };\n    /**\n     * Returns a value for bytes that's appropriate to put in a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say bytes must be. But it should return\n     * an Uint8Array in Node.\n     */\n    JsonProtoSerializer.prototype.toBytes = function (bytes) {\n        if (this.options.useProto3Json) {\n            return bytes.toBase64();\n        }\n        else {\n            // The typings say it's a string, but it needs to be a Uint8Array in Node.\n            return this.unsafeCastProtoByteString(bytes.toUint8Array());\n        }\n    };\n    /**\n     * Parse the blob from the protos into the internal Blob class. Note that the\n     * typings assume all blobs are strings, but they are actually Uint8Arrays\n     * on Node.\n     */\n    JsonProtoSerializer.prototype.fromBlob = function (blob) {\n        if (typeof blob === 'string') {\n            assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');\n            return blob_Blob.fromBase64String(blob);\n        }\n        else {\n            assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');\n            return blob_Blob.fromUint8Array(blob);\n        }\n    };\n    JsonProtoSerializer.prototype.toVersion = function (version) {\n        return this.toTimestamp(version.toTimestamp());\n    };\n    JsonProtoSerializer.prototype.fromVersion = function (version) {\n        assert(!!version, \"Trying to deserialize version that isn't set\");\n        return snapshot_version_SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n    };\n    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {\n        return this.fullyQualifiedPrefixPath(databaseId)\n            .child('documents')\n            .child(path)\n            .canonicalString();\n    };\n    JsonProtoSerializer.prototype.fromResourceName = function (name) {\n        var resource = path_ResourcePath.fromString(name);\n        assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());\n        return resource;\n    };\n    JsonProtoSerializer.prototype.toName = function (key) {\n        return this.toResourceName(this.databaseId, key.path);\n    };\n    JsonProtoSerializer.prototype.fromName = function (name) {\n        var resource = this.fromResourceName(name);\n        assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +\n            resource.get(1) +\n            ' vs ' +\n            this.databaseId.projectId);\n        assert((!resource.get(3) && !this.databaseId.database) ||\n            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +\n            resource.get(3) +\n            ' vs ' +\n            this.databaseId.database);\n        return new document_key_DocumentKey(this.extractLocalPathFromResourceName(resource));\n    };\n    JsonProtoSerializer.prototype.toQueryPath = function (path) {\n        if (path.length === 0) {\n            // If the path is empty, the backend requires we leave off the /documents\n            // at the end.\n            return this.encodedDatabaseId;\n        }\n        return this.toResourceName(this.databaseId, path);\n    };\n    JsonProtoSerializer.prototype.fromQueryPath = function (name) {\n        var resourceName = this.fromResourceName(name);\n        if (resourceName.length === 4) {\n            return path_ResourcePath.EMPTY_PATH;\n        }\n        return this.extractLocalPathFromResourceName(resourceName);\n    };\n    Object.defineProperty(JsonProtoSerializer.prototype, \"encodedDatabaseId\", {\n        get: function () {\n            var path = new path_ResourcePath([\n                'projects',\n                this.databaseId.projectId,\n                'databases',\n                this.databaseId.database\n            ]);\n            return path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {\n        return new path_ResourcePath([\n            'projects',\n            databaseId.projectId,\n            'databases',\n            databaseId.database\n        ]);\n    };\n    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {\n        assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());\n        return resourceName.popFirst(5);\n    };\n    JsonProtoSerializer.prototype.isValidResourceName = function (path) {\n        // Resource names have at least 4 components (project ID, database ID)\n        return (path.length >= 4 &&\n            path.get(0) === 'projects' &&\n            path.get(2) === 'databases');\n    };\n    JsonProtoSerializer.prototype.toValue = function (val) {\n        if (val instanceof field_value_NullValue) {\n            return { nullValue: 'NULL_VALUE' };\n        }\n        else if (val instanceof field_value_BooleanValue) {\n            return { booleanValue: val.value() };\n        }\n        else if (val instanceof field_value_IntegerValue) {\n            return { integerValue: '' + val.value() };\n        }\n        else if (val instanceof field_value_DoubleValue) {\n            var doubleValue = val.value();\n            if (this.options.useProto3Json) {\n                // Proto 3 let's us encode NaN and Infinity as string values as\n                // expected by the backend. This is currently not checked by our unit\n                // tests because they rely on protobuf.js.\n                if (isNaN(doubleValue)) {\n                    return { doubleValue: 'NaN' };\n                }\n                else if (doubleValue === Infinity) {\n                    return { doubleValue: 'Infinity' };\n                }\n                else if (doubleValue === -Infinity) {\n                    return { doubleValue: '-Infinity' };\n                }\n            }\n            return { doubleValue: val.value() };\n        }\n        else if (val instanceof field_value_StringValue) {\n            return { stringValue: val.value() };\n        }\n        else if (val instanceof field_value_ObjectValue) {\n            return { mapValue: this.toMapValue(val) };\n        }\n        else if (val instanceof field_value_ArrayValue) {\n            return { arrayValue: this.toArrayValue(val) };\n        }\n        else if (val instanceof field_value_TimestampValue) {\n            return {\n                timestampValue: this.toTimestamp(val.internalValue)\n            };\n        }\n        else if (val instanceof field_value_GeoPointValue) {\n            return {\n                geoPointValue: {\n                    latitude: val.value().latitude,\n                    longitude: val.value().longitude\n                }\n            };\n        }\n        else if (val instanceof field_value_BlobValue) {\n            return {\n                bytesValue: this.toBytes(val.value())\n            };\n        }\n        else if (val instanceof field_value_RefValue) {\n            return {\n                referenceValue: this.toResourceName(val.databaseId, val.key.path)\n            };\n        }\n        else {\n            return fail('Unknown FieldValue ' + JSON.stringify(val));\n        }\n    };\n    JsonProtoSerializer.prototype.fromValue = function (obj) {\n        var _this = this;\n        // tslint:disable-next-line:no-any\n        var type = obj['value_type'];\n        if (hasTag(obj, type, 'nullValue')) {\n            return field_value_NullValue.INSTANCE;\n        }\n        else if (hasTag(obj, type, 'booleanValue')) {\n            return field_value_BooleanValue.of(obj.booleanValue);\n        }\n        else if (hasTag(obj, type, 'integerValue')) {\n            return new field_value_IntegerValue(parseInt64(obj.integerValue));\n        }\n        else if (hasTag(obj, type, 'doubleValue')) {\n            if (this.options.useProto3Json) {\n                // Proto 3 uses the string values 'NaN' and 'Infinity'.\n                if (obj.doubleValue === 'NaN') {\n                    return field_value_DoubleValue.NAN;\n                }\n                else if (obj.doubleValue === 'Infinity') {\n                    return field_value_DoubleValue.POSITIVE_INFINITY;\n                }\n                else if (obj.doubleValue === '-Infinity') {\n                    return field_value_DoubleValue.NEGATIVE_INFINITY;\n                }\n            }\n            return new field_value_DoubleValue(obj.doubleValue);\n        }\n        else if (hasTag(obj, type, 'stringValue')) {\n            return new field_value_StringValue(obj.stringValue);\n        }\n        else if (hasTag(obj, type, 'mapValue')) {\n            return this.fromFields(obj.mapValue.fields || {});\n        }\n        else if (hasTag(obj, type, 'arrayValue')) {\n            // \"values\" is not present if the array is empty\n            assertPresent(obj.arrayValue, 'arrayValue');\n            var values = obj.arrayValue.values || [];\n            return new field_value_ArrayValue(values.map(function (v) { return _this.fromValue(v); }));\n        }\n        else if (hasTag(obj, type, 'timestampValue')) {\n            assertPresent(obj.timestampValue, 'timestampValue');\n            return new field_value_TimestampValue(this.fromTimestamp(obj.timestampValue));\n        }\n        else if (hasTag(obj, type, 'geoPointValue')) {\n            assertPresent(obj.geoPointValue, 'geoPointValue');\n            var latitude = obj.geoPointValue.latitude || 0;\n            var longitude = obj.geoPointValue.longitude || 0;\n            return new field_value_GeoPointValue(new geo_point_GeoPoint(latitude, longitude));\n        }\n        else if (hasTag(obj, type, 'bytesValue')) {\n            assertPresent(obj.bytesValue, 'bytesValue');\n            var blob = this.fromBlob(obj.bytesValue);\n            return new field_value_BlobValue(blob);\n        }\n        else if (hasTag(obj, type, 'referenceValue')) {\n            assertPresent(obj.referenceValue, 'referenceValue');\n            var resourceName = this.fromResourceName(obj.referenceValue);\n            var dbId = new database_info_DatabaseId(resourceName.get(1), resourceName.get(3));\n            var key = new document_key_DocumentKey(this.extractLocalPathFromResourceName(resourceName));\n            return new field_value_RefValue(dbId, key);\n        }\n        else {\n            return fail('Unknown Value proto ' + JSON.stringify(obj));\n        }\n    };\n    /** Creates an api.Document from key and fields (but no create/update time) */\n    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {\n        return {\n            name: this.toName(key),\n            fields: this.toFields(fields)\n        };\n    };\n    JsonProtoSerializer.prototype.toDocument = function (document) {\n        assert(!document.hasLocalMutations, \"Can't serialize documents with mutations.\");\n        return {\n            name: this.toName(document.key),\n            fields: this.toFields(document.data),\n            updateTime: this.toTimestamp(document.version.toTimestamp())\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocument = function (document) {\n        return new document_Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.toFields = function (fields) {\n        var _this = this;\n        var result = {};\n        fields.forEach(function (key, value) {\n            result[key] = _this.toValue(value);\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromFields = function (object) {\n        var _this = this;\n        // Proto map<string, Value> gets mapped to Object, so cast it.\n        var map = object;\n        var result = field_value_ObjectValue.EMPTY;\n        forEach(map, function (key, value) {\n            result = result.set(new path_FieldPath([key]), _this.fromValue(value));\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.toMapValue = function (map) {\n        return {\n            fields: this.toFields(map)\n        };\n    };\n    JsonProtoSerializer.prototype.toArrayValue = function (array) {\n        var _this = this;\n        var result = [];\n        array.forEach(function (value) {\n            result.push(_this.toValue(value));\n        });\n        return { values: result };\n    };\n    JsonProtoSerializer.prototype.fromFound = function (doc) {\n        assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');\n        assertPresent(doc.found.name, 'doc.found.name');\n        assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n        var key = this.fromName(doc.found.name);\n        var version = this.fromVersion(doc.found.updateTime);\n        var fields = this.fromFields(doc.found.fields || {});\n        return new document_Document(key, version, fields, { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.fromMissing = function (result) {\n        assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');\n        assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');\n        var key = this.fromName(result.missing);\n        var version = this.fromVersion(result.readTime);\n        return new document_NoDocument(key, version);\n    };\n    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {\n        // tslint:disable-next-line:no-any\n        var type = result['result'];\n        if (hasTag(result, type, 'found')) {\n            return this.fromFound(result);\n        }\n        else if (hasTag(result, type, 'missing')) {\n            return this.fromMissing(result);\n        }\n        return fail('invalid batch get response: ' + JSON.stringify(result));\n    };\n    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {\n        switch (state) {\n            case WatchTargetChangeState.Added:\n                return 'ADD';\n            case WatchTargetChangeState.Current:\n                return 'CURRENT';\n            case WatchTargetChangeState.NoChange:\n                return 'NO_CHANGE';\n            case WatchTargetChangeState.Removed:\n                return 'REMOVE';\n            case WatchTargetChangeState.Reset:\n                return 'RESET';\n            default:\n                return fail('Unknown WatchTargetChangeState: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {\n        if (watchChange instanceof ExistenceFilterChange) {\n            return {\n                filter: {\n                    count: watchChange.existenceFilter.count,\n                    targetId: watchChange.targetId\n                }\n            };\n        }\n        if (watchChange instanceof DocumentWatchChange) {\n            if (watchChange.newDoc instanceof document_Document) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentChange: {\n                        document: {\n                            name: this.toName(doc.key),\n                            fields: this.toFields(doc.data),\n                            updateTime: this.toVersion(doc.version)\n                        },\n                        targetIds: watchChange.updatedTargetIds,\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc instanceof document_NoDocument) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentDelete: {\n                        document: this.toName(doc.key),\n                        readTime: this.toVersion(doc.version),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc === null) {\n                return {\n                    documentRemove: {\n                        document: this.toName(watchChange.key),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n        }\n        if (watchChange instanceof watch_change_WatchTargetChange) {\n            var cause = undefined;\n            if (watchChange.cause) {\n                cause = {\n                    code: mapRpcCodeFromCode(watchChange.cause.code),\n                    message: watchChange.cause.message\n                };\n            }\n            return {\n                targetChange: {\n                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n                    targetIds: watchChange.targetIds,\n                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n                    cause: cause\n                }\n            };\n        }\n        return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));\n    };\n    JsonProtoSerializer.prototype.fromWatchChange = function (change) {\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        var watchChange;\n        if (hasTag(change, type, 'targetChange')) {\n            assertPresent(change.targetChange, 'targetChange');\n            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n            // if unset\n            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n            var targetIds = change.targetChange.targetIds || [];\n            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();\n            var causeProto = change.targetChange.cause;\n            var cause = causeProto && this.fromRpcStatus(causeProto);\n            watchChange = new watch_change_WatchTargetChange(state, targetIds, resumeToken, cause || null);\n        }\n        else if (hasTag(change, type, 'documentChange')) {\n            assertPresent(change.documentChange, 'documentChange');\n            assertPresent(change.documentChange.document, 'documentChange.name');\n            assertPresent(change.documentChange.document.name, 'documentChange.document.name');\n            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');\n            var entityChange = change.documentChange;\n            var key = this.fromName(entityChange.document.name);\n            var version = this.fromVersion(entityChange.document.updateTime);\n            var fields = this.fromFields(entityChange.document.fields || {});\n            var doc = new document_Document(key, version, fields, {\n                hasLocalMutations: false\n            });\n            var updatedTargetIds = entityChange.targetIds || [];\n            var removedTargetIds = entityChange.removedTargetIds || [];\n            watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentDelete')) {\n            assertPresent(change.documentDelete, 'documentDelete');\n            assertPresent(change.documentDelete.document, 'documentDelete.document');\n            var docDelete = change.documentDelete;\n            var key = this.fromName(docDelete.document);\n            var version = docDelete.readTime\n                ? this.fromVersion(docDelete.readTime)\n                : snapshot_version_SnapshotVersion.forDeletedDoc();\n            var doc = new document_NoDocument(key, version);\n            var removedTargetIds = docDelete.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentRemove')) {\n            assertPresent(change.documentRemove, 'documentRemove');\n            assertPresent(change.documentRemove.document, 'documentRemove');\n            var docRemove = change.documentRemove;\n            var key = this.fromName(docRemove.document);\n            var removedTargetIds = docRemove.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n        }\n        else if (hasTag(change, type, 'filter')) {\n            // TODO(dimond): implement existence filter parsing with strategy.\n            assertPresent(change.filter, 'filter');\n            assertPresent(change.filter.targetId, 'filter.targetId');\n            var filter = change.filter;\n            var count = filter.count || 0;\n            var existenceFilter = new ExistenceFilter(count);\n            var targetId = filter.targetId;\n            watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n        }\n        else {\n            return fail('Unknown change type ' + JSON.stringify(change));\n        }\n        return watchChange;\n    };\n    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {\n        if (state === 'NO_CHANGE') {\n            return WatchTargetChangeState.NoChange;\n        }\n        else if (state === 'ADD') {\n            return WatchTargetChangeState.Added;\n        }\n        else if (state === 'REMOVE') {\n            return WatchTargetChangeState.Removed;\n        }\n        else if (state === 'CURRENT') {\n            return WatchTargetChangeState.Current;\n        }\n        else if (state === 'RESET') {\n            return WatchTargetChangeState.Reset;\n        }\n        else {\n            return fail('Got unexpected TargetChange.state: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {\n        // We have only reached a consistent snapshot for the entire stream if there\n        // is a read_time set and it applies to all targets (i.e. the list of\n        // targets is empty). The backend is guaranteed to send such responses.\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        if (!hasTag(change, type, 'targetChange')) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        var targetChange = change.targetChange;\n        if (targetChange.targetIds && targetChange.targetIds.length) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        if (!targetChange.readTime) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        return this.fromVersion(targetChange.readTime);\n    };\n    JsonProtoSerializer.prototype.toMutation = function (mutation) {\n        var _this = this;\n        var result;\n        if (mutation instanceof mutation_SetMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.value)\n            };\n        }\n        else if (mutation instanceof mutation_DeleteMutation) {\n            result = { delete: this.toName(mutation.key) };\n        }\n        else if (mutation instanceof mutation_PatchMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.data),\n                updateMask: this.toDocumentMask(mutation.fieldMask)\n            };\n        }\n        else if (mutation instanceof mutation_TransformMutation) {\n            result = {\n                transform: {\n                    document: this.toName(mutation.key),\n                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {\n                        return _this.toFieldTransform(transform);\n                    })\n                }\n            };\n        }\n        else {\n            return fail('Unknown mutation type ' + mutation.type);\n        }\n        if (!mutation.precondition.isNone) {\n            result.currentDocument = this.toPrecondition(mutation.precondition);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromMutation = function (proto) {\n        var _this = this;\n        var precondition = proto.currentDocument\n            ? this.fromPrecondition(proto.currentDocument)\n            : mutation_Precondition.NONE;\n        if (proto.update) {\n            assertPresent(proto.update.name, 'name');\n            var key = this.fromName(proto.update.name);\n            var value = this.fromFields(proto.update.fields || {});\n            if (proto.updateMask) {\n                var fieldMask = this.fromDocumentMask(proto.updateMask);\n                return new mutation_PatchMutation(key, value, fieldMask, precondition);\n            }\n            else {\n                return new mutation_SetMutation(key, value, precondition);\n            }\n        }\n        else if (proto.delete) {\n            var key = this.fromName(proto.delete);\n            return new mutation_DeleteMutation(key, precondition);\n        }\n        else if (proto.transform) {\n            var key = this.fromName(proto.transform.document);\n            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {\n                return _this.fromFieldTransform(transform);\n            });\n            assert(precondition.exists === true, 'Transforms only support precondition \"exists == true\"');\n            return new mutation_TransformMutation(key, fieldTransforms);\n        }\n        else {\n            return fail('unknown mutation proto: ' + JSON.stringify(proto));\n        }\n    };\n    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {\n        assert(!precondition.isNone, \"Can't serialize an empty precondition\");\n        if (precondition.updateTime !== undefined) {\n            return {\n                updateTime: this.toVersion(precondition.updateTime)\n            };\n        }\n        else if (precondition.exists !== undefined) {\n            return { exists: precondition.exists };\n        }\n        else {\n            return fail('Unknown precondition');\n        }\n    };\n    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {\n        if (precondition.updateTime !== undefined) {\n            return mutation_Precondition.updateTime(this.fromVersion(precondition.updateTime));\n        }\n        else if (precondition.exists !== undefined) {\n            return mutation_Precondition.exists(precondition.exists);\n        }\n        else {\n            return mutation_Precondition.NONE;\n        }\n    };\n    JsonProtoSerializer.prototype.fromWriteResult = function (proto) {\n        var _this = this;\n        // NOTE: Deletes don't have an updateTime.\n        var version = proto.updateTime\n            ? this.fromVersion(proto.updateTime)\n            : null;\n        var transformResults = null;\n        if (proto.transformResults && proto.transformResults.length > 0) {\n            transformResults = proto.transformResults.map(function (result) {\n                return _this.fromValue(result);\n            });\n        }\n        return new MutationResult(version, transformResults);\n    };\n    JsonProtoSerializer.prototype.fromWriteResults = function (protos) {\n        var _this = this;\n        return (protos || []).map(function (proto) { return _this.fromWriteResult(proto); });\n    };\n    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {\n        assert(fieldTransform.transform instanceof ServerTimestampTransform, 'Unknown transform: ' + fieldTransform.transform);\n        return {\n            fieldPath: fieldTransform.field.canonicalString(),\n            setToServerValue: 'REQUEST_TIME'\n        };\n    };\n    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {\n        assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown transform proto: ' + JSON.stringify(proto));\n        var fieldPath = path_FieldPath.fromServerFormat(proto.fieldPath);\n        return new FieldTransform(fieldPath, ServerTimestampTransform.instance);\n    };\n    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {\n        return { documents: [this.toQueryPath(query.path)] };\n    };\n    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {\n        var count = documentsTarget.documents.length;\n        assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);\n        var name = documentsTarget.documents[0];\n        return query_Query.atPath(this.fromQueryPath(name));\n    };\n    JsonProtoSerializer.prototype.toQueryTarget = function (query) {\n        // Dissect the path into parent, collectionId, and optional key filter.\n        var result = { structuredQuery: {} };\n        if (query.path.isEmpty()) {\n            result.parent = this.toQueryPath(path_ResourcePath.EMPTY_PATH);\n        }\n        else {\n            var path = query.path;\n            assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');\n            result.parent = this.toQueryPath(path.popLast());\n            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\n        }\n        var where = this.toFilter(query.filters);\n        if (where) {\n            result.structuredQuery.where = where;\n        }\n        var orderBy = this.toOrder(query.orderBy);\n        if (orderBy) {\n            result.structuredQuery.orderBy = orderBy;\n        }\n        var limit = this.toInt32Value(query.limit);\n        if (limit !== undefined) {\n            result.structuredQuery.limit = limit;\n        }\n        if (query.startAt) {\n            result.structuredQuery.startAt = this.toCursor(query.startAt);\n        }\n        if (query.endAt) {\n            result.structuredQuery.endAt = this.toCursor(query.endAt);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {\n        var path = this.fromQueryPath(target.parent);\n        var query = target.structuredQuery;\n        var fromCount = query.from ? query.from.length : 0;\n        if (fromCount > 0) {\n            assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');\n            var from = query.from[0];\n            path = path.child(from.collectionId);\n        }\n        var filterBy = [];\n        if (query.where) {\n            filterBy = this.fromFilter(query.where);\n        }\n        var orderBy = [];\n        if (query.orderBy) {\n            orderBy = this.fromOrder(query.orderBy);\n        }\n        var limit = null;\n        if (query.limit) {\n            limit = this.fromInt32Value(query.limit);\n        }\n        var startAt = null;\n        if (query.startAt) {\n            startAt = this.fromCursor(query.startAt);\n        }\n        var endAt = null;\n        if (query.endAt) {\n            endAt = this.fromCursor(query.endAt);\n        }\n        return new query_Query(path, orderBy, filterBy, limit, startAt, endAt);\n    };\n    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {\n        var value = this.toLabel(queryData.purpose);\n        if (value == null) {\n            return null;\n        }\n        else {\n            return {\n                'goog-listen-tags': value\n            };\n        }\n    };\n    JsonProtoSerializer.prototype.toLabel = function (purpose) {\n        switch (purpose) {\n            case QueryPurpose.Listen:\n                return null;\n            case QueryPurpose.ExistenceFilterMismatch:\n                return 'existence-filter-mismatch';\n            case QueryPurpose.LimboResolution:\n                return 'limbo-document';\n            default:\n                return fail('Unrecognized query purpose: ' + purpose);\n        }\n    };\n    JsonProtoSerializer.prototype.toTarget = function (queryData) {\n        var result;\n        var query = queryData.query;\n        if (query.isDocumentQuery()) {\n            result = { documents: this.toDocumentsTarget(query) };\n        }\n        else {\n            result = { query: this.toQueryTarget(query) };\n        }\n        result.targetId = queryData.targetId;\n        if (queryData.resumeToken.length > 0) {\n            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.toFilter = function (filters) {\n        var _this = this;\n        if (filters.length === 0)\n            return;\n        var protos = filters.map(function (filter) {\n            return filter instanceof query_RelationFilter\n                ? _this.toRelationFilter(filter)\n                : _this.toUnaryFilter(filter);\n        });\n        if (protos.length === 1) {\n            return protos[0];\n        }\n        return { compositeFilter: { op: 'AND', filters: protos } };\n    };\n    JsonProtoSerializer.prototype.fromFilter = function (filter) {\n        var _this = this;\n        if (!filter) {\n            return [];\n        }\n        else if (filter.unaryFilter !== undefined) {\n            return [this.fromUnaryFilter(filter)];\n        }\n        else if (filter.fieldFilter !== undefined) {\n            return [this.fromRelationFilter(filter)];\n        }\n        else if (filter.compositeFilter !== undefined) {\n            return filter.compositeFilter.filters\n                .map(function (f) { return _this.fromFilter(f); })\n                .reduce(function (accum, current) { return accum.concat(current); });\n        }\n        else {\n            return fail('Unknown filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.toOrder = function (orderBys) {\n        var _this = this;\n        if (orderBys.length === 0)\n            return;\n        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {\n        var _this = this;\n        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.toCursor = function (cursor) {\n        var _this = this;\n        return {\n            before: cursor.before,\n            values: cursor.position.map(function (component) { return _this.toValue(component); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromCursor = function (cursor) {\n        var _this = this;\n        var before = !!cursor.before;\n        var position = cursor.values.map(function (component) { return _this.fromValue(component); });\n        return new query_Bound(position, before);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toDirection = function (dir) {\n        return DIRECTIONS[dir.name];\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.fromDirection = function (dir) {\n        switch (dir) {\n            case 'ASCENDING':\n                return Direction.ASCENDING;\n            case 'DESCENDING':\n                return Direction.DESCENDING;\n            default:\n                return undefined;\n        }\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toOperatorName = function (op) {\n        return OPERATORS[op.name];\n    };\n    JsonProtoSerializer.prototype.fromOperatorName = function (op) {\n        switch (op) {\n            case 'EQUAL':\n                return query_RelationOp.EQUAL;\n            case 'GREATER_THAN':\n                return query_RelationOp.GREATER_THAN;\n            case 'GREATER_THAN_OR_EQUAL':\n                return query_RelationOp.GREATER_THAN_OR_EQUAL;\n            case 'LESS_THAN':\n                return query_RelationOp.LESS_THAN;\n            case 'LESS_THAN_OR_EQUAL':\n                return query_RelationOp.LESS_THAN_OR_EQUAL;\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified relation');\n            default:\n                return fail('Unknown relation');\n        }\n    };\n    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {\n        return { fieldPath: path.canonicalString() };\n    };\n    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {\n        return path_FieldPath.fromServerFormat(fieldReference.fieldPath);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {\n        return {\n            field: this.toFieldPathReference(orderBy.field),\n            direction: this.toDirection(orderBy.dir)\n        };\n    };\n    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {\n        return new query_OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {\n        if (filter instanceof query_RelationFilter) {\n            return {\n                fieldFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: this.toOperatorName(filter.op),\n                    value: this.toValue(filter.value)\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {\n        return new query_RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {\n        if (filter instanceof NanFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NAN'\n                }\n            };\n        }\n        else if (filter instanceof NullFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NULL'\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {\n        switch (filter.unaryFilter.op) {\n            case 'IS_NAN':\n                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NanFilter(nanField);\n            case 'IS_NULL':\n                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NullFilter(nullField);\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified filter');\n            default:\n                return fail('Unknown filter');\n        }\n    };\n    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {\n        return {\n            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {\n        var paths = proto.fieldPaths || [];\n        var fields = paths.map(function (path) { return path_FieldPath.fromServerFormat(path); });\n        return new mutation_FieldMask(fields);\n    };\n    return JsonProtoSerializer;\n}());\n\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj, type, tag) {\n    return type === tag || (!type && tag in obj);\n}\n\n//# sourceMappingURL=serializer.js.map\n\n// EXTERNAL MODULE: ../webchannel-wrapper/dist/index.js\nvar dist = __webpack_require__(116);\nvar dist_default = /*#__PURE__*/__webpack_require__.n(dist);\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/stream_bridge.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar stream_bridge_StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        assert(this.wrappedOnOpen !== undefined, 'Cannot call onOpen because no callback was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        assert(this.wrappedOnClose !== undefined, 'Cannot call onClose because no callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        assert(this.wrappedOnMessage !== undefined, 'Cannot call onMessage because no callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\n\n\n//# sourceMappingURL=stream_bridge.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/webchannel_connection.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar LOG_TAG = 'Connection';\nvar RPC_STREAM_SERVICE = 'google.firestore.v1beta1.Firestore';\nvar RPC_URL_VERSION = 'v1beta1';\n/** Maps RPC names to the corresponding REST endpoint name. */\nvar RPC_NAME_REST_MAPPING = {\n    BatchGetDocuments: 'batchGet',\n    Commit: 'commit'\n};\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nvar X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\nvar XHR_TIMEOUT_SECS = 15;\nvar webchannel_connection_WebChannelConnection = /** @class */ (function () {\n    function WebChannelConnection(info) {\n        this.databaseId = info.databaseId;\n        this.pool = new dist[\"XhrIoPool\"]();\n        var proto = info.ssl ? 'https' : 'http';\n        this.baseUrl = proto + '://' + info.host;\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {\n        if (token) {\n            for (var header in token.authHeaders) {\n                if (token.authHeaders.hasOwnProperty(header)) {\n                    headers[header] = token.authHeaders[header];\n                }\n            }\n        }\n        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n        // This header is used to improve routing and project isolation by the\n        // backend.\n        headers['google-cloud-resource-prefix'] =\n            \"projects/\" + this.databaseId.projectId + \"/\" +\n                (\"databases/\" + this.databaseId.database);\n    };\n    WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {\n        var _this = this;\n        var url = this.makeUrl(rpcName);\n        return new Promise(function (resolve, reject) {\n            // tslint:disable-next-line:no-any XhrIoPool doesn't have TS typings.\n            _this.pool.getObject(function (xhr) {\n                xhr.listenOnce(dist[\"EventType\"].COMPLETE, function () {\n                    try {\n                        switch (xhr.getLastErrorCode()) {\n                            case dist[\"ErrorCode\"].NO_ERROR:\n                                var json = xhr.getResponseJson();\n                                debug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n                                resolve(json);\n                                break;\n                            case dist[\"ErrorCode\"].TIMEOUT:\n                                debug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n                                reject(new error_FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));\n                                break;\n                            case dist[\"ErrorCode\"].HTTP_ERROR:\n                                var status_1 = xhr.getStatus();\n                                debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed with status:', status_1, 'response text:', xhr.getResponseText());\n                                if (status_1 > 0) {\n                                    reject(new error_FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));\n                                }\n                                else {\n                                    // If we received an HTTP_ERROR but there's no status code,\n                                    // it's most probably a connection issue\n                                    debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                                    reject(new error_FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));\n                                }\n                                break;\n                            default:\n                                fail('RPC \"' +\n                                    rpcName +\n                                    '\" failed with unanticipated ' +\n                                    'webchannel error ' +\n                                    xhr.getLastErrorCode() +\n                                    ': ' +\n                                    xhr.getLastError() +\n                                    ', giving up.');\n                        }\n                    }\n                    finally {\n                        debug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n                        _this.pool.releaseObject(xhr);\n                    }\n                });\n                var requestString = JSON.stringify(request);\n                debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n                // Content-Type: text/plain will avoid preflight requests which might\n                // mess with CORS and redirects by proxies. If we add custom headers\n                // we will need to change this code to potentially use the\n                // $httpOverwrite parameter supported by ESF to avoid\n                // triggering preflight requests.\n                var headers = { 'Content-Type': 'text/plain' };\n                _this.modifyHeadersForRequest(headers, token);\n                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n            });\n        });\n    };\n    WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.invokeRPC(rpcName, request, token);\n    };\n    WebChannelConnection.prototype.openStream = function (rpcName, token) {\n        var urlParts = [\n            this.baseUrl,\n            '/',\n            RPC_STREAM_SERVICE,\n            '/',\n            rpcName,\n            '/channel'\n        ];\n        var webchannelTransport = Object(dist[\"createWebChannelTransport\"])();\n        var request = {\n            // Background channel test avoids the initial two test calls and decreases\n            // initial cold start time.\n            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n            // we should monitor closely for any reports.\n            backgroundChannelTest: true,\n            // Required for backend stickiness, routing behavior is based on this\n            // parameter.\n            httpSessionIdParam: 'gsessionid',\n            initMessageHeaders: {},\n            // Send our custom headers as a '$httpHeaders=' url param to avoid CORS\n            // preflight round-trip. This is formally defined here:\n            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L40\n            httpHeadersOverwriteParam: '$httpHeaders',\n            sendRawJson: true,\n            supportsCrossDomainXhr: true\n        };\n        this.modifyHeadersForRequest(request.initMessageHeaders, token);\n        var url = urlParts.join('');\n        debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n        // tslint:disable-next-line:no-any Because listen isn't defined on it.\n        var channel = webchannelTransport.createWebChannel(url, request);\n        // WebChannel supports sending the first message with the handshake - saving\n        // a network round trip. However, it will have to call send in the same\n        // JS event loop as open. In order to enforce this, we delay actually\n        // opening the WebChannel until send is called. Whether we have called\n        // open is tracked with this variable.\n        var opened = false;\n        // A flag to determine whether the stream was closed (by us or through an\n        // error/close event) to avoid delivering multiple close events or sending\n        // on a closed stream\n        var closed = false;\n        var streamBridge = new stream_bridge_StreamBridge({\n            sendFn: function (msg) {\n                if (!closed) {\n                    if (!opened) {\n                        debug(LOG_TAG, 'Opening WebChannel transport.');\n                        channel.open();\n                        opened = true;\n                    }\n                    debug(LOG_TAG, 'WebChannel sending:', msg);\n                    channel.send(msg);\n                }\n                else {\n                    debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n                }\n            },\n            closeFn: function () { return channel.close(); }\n        });\n        // Closure events are guarded and exceptions are swallowed, so catch any\n        // exception and rethrow using a setTimeout so they become visible again.\n        // Note that eventually this function could go away if we are confident\n        // enough the code is exception free.\n        var unguardedEventListen = function (type, fn) {\n            // TODO(dimond): closure typing seems broken because WebChannel does\n            // not implement goog.events.Listenable\n            channel.listen(type, function (param) {\n                try {\n                    fn(param);\n                }\n                catch (e) {\n                    setTimeout(function () {\n                        throw e;\n                    }, 0);\n                }\n            });\n        };\n        unguardedEventListen(dist[\"WebChannel\"].EventType.OPEN, function () {\n            if (!closed) {\n                debug(LOG_TAG, 'WebChannel transport opened.');\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.CLOSE, function () {\n            if (!closed) {\n                closed = true;\n                debug(LOG_TAG, 'WebChannel transport closed');\n                streamBridge.callOnClose();\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.ERROR, function (err) {\n            if (!closed) {\n                closed = true;\n                debug(LOG_TAG, 'WebChannel transport errored:', err);\n                streamBridge.callOnClose(new error_FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.MESSAGE, function (msg) {\n            if (!closed) {\n                var msgData = msg.data[0];\n                assert(!!msgData, 'Got a webchannel message without data.');\n                // TODO(b/35143891): There is a bug in One Platform that caused errors\n                // (and only errors) to be wrapped in an extra array. To be forward\n                // compatible with the bug we need to check either condition. The latter\n                // can be removed once the fix has been rolled out.\n                var error = \n                // tslint:disable-next-line:no-any msgData.error is not typed.\n                msgData.error || (msgData[0] && msgData[0].error);\n                if (error) {\n                    debug(LOG_TAG, 'WebChannel received error:', error);\n                    // error.status will be a string like 'OK' or 'NOT_FOUND'.\n                    var status_2 = error.status;\n                    var code = mapCodeFromRpcStatus(status_2);\n                    var message = error.message;\n                    if (code === undefined) {\n                        code = Code.INTERNAL;\n                        message =\n                            'Unknown error status: ' +\n                                status_2 +\n                                ' with message ' +\n                                error.message;\n                    }\n                    // Mark closed so no further events are propagated\n                    closed = true;\n                    streamBridge.callOnClose(new error_FirestoreError(code, message));\n                    channel.close();\n                }\n                else {\n                    debug(LOG_TAG, 'WebChannel received:', msgData);\n                    streamBridge.callOnMessage(msgData);\n                }\n            }\n        });\n        setTimeout(function () {\n            // Technically we could/should wait for the WebChannel opened event,\n            // but because we want to send the first message with the WebChannel\n            // handshake we pretend the channel opened here (asynchronously), and\n            // then delay the actual open until the first message is sent.\n            streamBridge.callOnOpen();\n        }, 0);\n        return streamBridge;\n    };\n    // visible for testing\n    WebChannelConnection.prototype.makeUrl = function (rpcName) {\n        var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n        assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);\n        var url = [this.baseUrl, '/', RPC_URL_VERSION];\n        url.push('/projects/');\n        url.push(this.databaseId.projectId);\n        url.push('/databases/');\n        url.push(this.databaseId.database);\n        url.push('/documents');\n        url.push(':');\n        url.push(urlRpcName);\n        return url.join('');\n    };\n    return WebChannelConnection;\n}());\n\n\n//# sourceMappingURL=webchannel_connection.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/browser_platform.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar browser_platform_BrowserPlatform = /** @class */ (function () {\n    function BrowserPlatform() {\n        this.emptyByteString = '';\n        this.base64Available = typeof atob !== 'undefined';\n    }\n    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {\n        return Promise.resolve(new webchannel_connection_WebChannelConnection(databaseInfo));\n    };\n    BrowserPlatform.prototype.newSerializer = function (databaseId) {\n        return new serializer_JsonProtoSerializer(databaseId, { useProto3Json: true });\n    };\n    BrowserPlatform.prototype.formatJSON = function (value) {\n        return JSON.stringify(value);\n    };\n    BrowserPlatform.prototype.atob = function (encoded) {\n        return atob(encoded);\n    };\n    BrowserPlatform.prototype.btoa = function (raw) {\n        return btoa(raw);\n    };\n    return BrowserPlatform;\n}());\n\n\n//# sourceMappingURL=browser_platform.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/browser_init.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nplatform_PlatformSupport.setPlatform(new browser_platform_BrowserPlatform());\n\n//# sourceMappingURL=browser_init.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/field_path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar field_path_FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            validateArgType('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new path_FieldPath(fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    FieldPath.prototype.isEqual = function (other) {\n        if (!(other instanceof FieldPath)) {\n            throw invalidClassError('isEqual', 'FieldPath', 1, other);\n        }\n        return this._internalPath.isEqual(other._internalPath);\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(path_FieldPath.keyField().canonicalString());\n    return FieldPath;\n}());\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nfunction fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (field_path_FieldPath.bind.apply(field_path_FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n//# sourceMappingURL=field_path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/types.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Describes the online state of the Firestore client. Note that this does not\n * indicate whether or not the remote store is trying to connect or not. This is\n * primarily used by the View / EventManager code to change their behavior while\n * offline (e.g. get() calls shouldn't wait for data from the server and\n * snapshot events should set metadata.isFromCache=true).\n */\nvar OnlineState;\n(function (OnlineState) {\n    /**\n     * The Firestore client is in an unknown online state. This means the client\n     * is either not actively trying to establish a connection or it is currently\n     * trying to establish a connection, but it has not succeeded or failed yet.\n     * Higher-level components should not operate in offline mode.\n     */\n    OnlineState[OnlineState[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The client is connected and the connections are healthy. This state is\n     * reached after a successful connection and there has been at least one\n     * successful message received from the backends.\n     */\n    OnlineState[OnlineState[\"Healthy\"] = 1] = \"Healthy\";\n    /**\n     * The client is either trying to establish a connection but failing, or it\n     * has been explicitly marked offline via a call to disableNetwork().\n     * Higher-level components should operate in offline mode.\n     */\n    OnlineState[OnlineState[\"Failed\"] = 2] = \"Failed\";\n})(OnlineState || (OnlineState = {}));\n\n//# sourceMappingURL=types.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/view_snapshot.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType || (ChangeType = {}));\nvar SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar view_snapshot_DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new SortedMap(document_key_DocumentKey.comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            fail('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\n\nvar ViewSnapshot = /** @class */ (function () {\n    function ViewSnapshot(query, docs, oldDocs, docChanges, fromCache, hasPendingWrites, syncStateChanged) {\n        this.query = query;\n        this.docs = docs;\n        this.oldDocs = oldDocs;\n        this.docChanges = docChanges;\n        this.fromCache = fromCache;\n        this.hasPendingWrites = hasPendingWrites;\n        this.syncStateChanged = syncStateChanged;\n    }\n    ViewSnapshot.prototype.isEqual = function (other) {\n        if (this.fromCache !== other.fromCache ||\n            this.hasPendingWrites !== other.hasPendingWrites ||\n            this.syncStateChanged !== other.syncStateChanged ||\n            !this.query.isEqual(other.query) ||\n            !this.docs.isEqual(other.docs) ||\n            !this.oldDocs.isEqual(other.oldDocs)) {\n            return false;\n        }\n        var changes = this.docChanges;\n        var otherChanges = other.docChanges;\n        if (changes.length !== otherChanges.length) {\n            return false;\n        }\n        for (var i = 0; i < changes.length; i++) {\n            if (changes[i].type !== otherChanges[i].type ||\n                !changes[i].doc.isEqual(otherChanges[i].doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return ViewSnapshot;\n}());\n\n\n//# sourceMappingURL=view_snapshot.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nvar document_set_DocumentSet = /** @class */ (function () {\n    /** The default ordering is by key if the comparator is omitted */\n    function DocumentSet(comp) {\n        // We are adding document key comparator to the end as it's the only\n        // guaranteed unique property of a document.\n        if (comp) {\n            this.comparator = function (d1, d2) {\n                return comp(d1, d2) || document_key_DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        else {\n            this.comparator = function (d1, d2) {\n                return document_key_DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        this.keyedMap = documentMap();\n        this.sortedSet = new SortedMap(this.comparator);\n    }\n    /**\n     * Returns an empty copy of the existing DocumentSet, using the same\n     * comparator.\n     */\n    DocumentSet.emptySet = function (oldSet) {\n        return new DocumentSet(oldSet.comparator);\n    };\n    DocumentSet.prototype.has = function (key) {\n        return this.keyedMap.get(key) != null;\n    };\n    DocumentSet.prototype.get = function (key) {\n        return this.keyedMap.get(key);\n    };\n    DocumentSet.prototype.first = function () {\n        return this.sortedSet.minKey();\n    };\n    DocumentSet.prototype.last = function () {\n        return this.sortedSet.maxKey();\n    };\n    DocumentSet.prototype.isEmpty = function () {\n        return this.sortedSet.isEmpty();\n    };\n    /**\n     * Returns the index of the provided key in the document set, or -1 if the\n     * document key is not present in the set;\n     */\n    DocumentSet.prototype.indexOf = function (key) {\n        var doc = this.keyedMap.get(key);\n        return doc ? this.sortedSet.indexOf(doc) : -1;\n    };\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\n        get: function () {\n            return this.sortedSet.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Iterates documents in order defined by \"comparator\" */\n    DocumentSet.prototype.forEach = function (cb) {\n        this.sortedSet.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Inserts or updates a document with the same key */\n    DocumentSet.prototype.add = function (doc) {\n        // First remove the element if we have it.\n        var set = this.delete(doc.key);\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n    };\n    /** Deletes a document with a given key */\n    DocumentSet.prototype.delete = function (key) {\n        var doc = this.get(key);\n        if (!doc) {\n            return this;\n        }\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n    };\n    DocumentSet.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.sortedSet.getIterator();\n        var otherIt = other.sortedSet.getIterator();\n        while (thisIt.hasNext()) {\n            var thisDoc = thisIt.getNext().key;\n            var otherDoc = otherIt.getNext().key;\n            if (!thisDoc.isEqual(otherDoc))\n                return false;\n        }\n        return true;\n    };\n    DocumentSet.prototype.toString = function () {\n        var docStrings = [];\n        this.forEach(function (doc) {\n            docStrings.push(doc.toString());\n        });\n        if (docStrings.length === 0) {\n            return 'DocumentSet ()';\n        }\n        else {\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n        }\n    };\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n        var newSet = new DocumentSet();\n        newSet.comparator = this.comparator;\n        newSet.keyedMap = keyedMap;\n        newSet.sortedSet = sortedSet;\n        return newSet;\n    };\n    return DocumentSet;\n}());\n\n\n//# sourceMappingURL=document_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/obj_map.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nvar obj_map_ObjectMap = /** @class */ (function () {\n    function ObjectMap(mapKeyFn) {\n        this.mapKeyFn = mapKeyFn;\n        /**\n         * The inner map for a key -> value pair. Due to the possibility of\n         * collisions we keep a list of entries that we do a linear search through\n         * to find an actual match. Note that collisions should be rare, so we still\n         * expect near constant time lookups in practice.\n         */\n        this.inner = {};\n    }\n    /** Get a value for this key, or undefined if it does not exist. */\n    ObjectMap.prototype.get = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return undefined;\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];\n            if (otherKey.isEqual(key)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    ObjectMap.prototype.has = function (key) {\n        return this.get(key) !== undefined;\n    };\n    /** Put this key and value in the map. */\n    ObjectMap.prototype.set = function (key, value) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            this.inner[id] = [[key, value]];\n            return;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].isEqual(key)) {\n                matches[i] = [key, value];\n                return;\n            }\n        }\n        matches.push([key, value]);\n    };\n    /**\n     * Remove this key from the map. Returns a boolean if anything was deleted.\n     */\n    ObjectMap.prototype.delete = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return false;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].isEqual(key)) {\n                if (matches.length === 1) {\n                    delete this.inner[id];\n                }\n                else {\n                    matches.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    ObjectMap.prototype.forEach = function (fn) {\n        forEach(this.inner, function (_, entries) {\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                fn(k, v);\n            }\n        });\n    };\n    ObjectMap.prototype.isEmpty = function () {\n        return isEmpty(this.inner);\n    };\n    return ObjectMap;\n}());\n\n\n//# sourceMappingURL=obj_map.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/event_manager.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nvar QueryListenersInfo = /** @class */ (function () {\n    function QueryListenersInfo() {\n        this.listeners = [];\n    }\n    return QueryListenersInfo;\n}());\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nvar event_manager_EventManager = /** @class */ (function () {\n    function EventManager(syncEngine) {\n        this.syncEngine = syncEngine;\n        this.queries = new obj_map_ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.onlineState = OnlineState.Unknown;\n        this.syncEngine.subscribe(this.onChange.bind(this), this.onError.bind(this));\n    }\n    EventManager.prototype.listen = function (listener) {\n        var query = listener.query;\n        var firstListen = false;\n        var queryInfo = this.queries.get(query);\n        if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n            this.queries.set(query, queryInfo);\n        }\n        queryInfo.listeners.push(listener);\n        listener.applyOnlineStateChange(this.onlineState);\n        if (queryInfo.viewSnap)\n            listener.onViewSnapshot(queryInfo.viewSnap);\n        if (firstListen) {\n            return this.syncEngine.listen(query).then(function (targetId) {\n                queryInfo.targetId = targetId;\n                return targetId;\n            });\n        }\n        else {\n            return Promise.resolve(queryInfo.targetId);\n        }\n    };\n    EventManager.prototype.unlisten = function (listener) {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            var query, lastListen, queryInfo, i;\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                query = listener.query;\n                lastListen = false;\n                queryInfo = this.queries.get(query);\n                if (queryInfo) {\n                    i = queryInfo.listeners.indexOf(listener);\n                    if (i >= 0) {\n                        queryInfo.listeners.splice(i, 1);\n                        lastListen = queryInfo.listeners.length === 0;\n                    }\n                }\n                if (lastListen) {\n                    this.queries.delete(query);\n                    return [2 /*return*/, this.syncEngine.unlisten(query)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    EventManager.prototype.onChange = function (viewSnaps) {\n        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n            var viewSnap = viewSnaps_1[_i];\n            var query = viewSnap.query;\n            var queryInfo = this.queries.get(query);\n            if (queryInfo) {\n                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {\n                    var listener = _b[_a];\n                    listener.onViewSnapshot(viewSnap);\n                }\n                queryInfo.viewSnap = viewSnap;\n            }\n        }\n    };\n    EventManager.prototype.onError = function (query, error) {\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onError(error);\n            }\n        }\n        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n        // after an error.\n        this.queries.delete(query);\n    };\n    EventManager.prototype.applyOnlineStateChange = function (onlineState) {\n        this.onlineState = onlineState;\n        this.queries.forEach(function (_, queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.applyOnlineStateChange(onlineState);\n            }\n        });\n    };\n    return EventManager;\n}());\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nvar event_manager_QueryListener = /** @class */ (function () {\n    function QueryListener(query, queryObserver, options) {\n        this.query = query;\n        this.queryObserver = queryObserver;\n        /**\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n         * observer. This flag is set to true once we've actually raised an event.\n         */\n        this.raisedInitialEvent = false;\n        this.onlineState = OnlineState.Unknown;\n        this.options = options || {};\n    }\n    QueryListener.prototype.onViewSnapshot = function (snap) {\n        assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');\n        if (!this.options.includeDocumentMetadataChanges) {\n            // Remove the metadata only changes.\n            var docChanges = [];\n            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {\n                var docChange = _a[_i];\n                if (docChange.type !== ChangeType.Metadata) {\n                    docChanges.push(docChange);\n                }\n            }\n            snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.fromCache, snap.hasPendingWrites, snap.syncStateChanged);\n        }\n        if (!this.raisedInitialEvent) {\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n                this.raiseInitialEvent(snap);\n            }\n        }\n        else if (this.shouldRaiseEvent(snap)) {\n            this.queryObserver.next(snap);\n        }\n        this.snap = snap;\n    };\n    QueryListener.prototype.onError = function (error) {\n        this.queryObserver.error(error);\n    };\n    QueryListener.prototype.applyOnlineStateChange = function (onlineState) {\n        this.onlineState = onlineState;\n        if (this.snap &&\n            !this.raisedInitialEvent &&\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n            this.raiseInitialEvent(this.snap);\n        }\n    };\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n        assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');\n        // Always raise the first event when we're synced\n        if (!snap.fromCache) {\n            return true;\n        }\n        // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n        // or Online if we wait long enough).\n        var maybeOnline = onlineState !== OnlineState.Failed;\n        // Don't raise the event if we're online, aren't synced yet (checked\n        // above) and are waiting for a sync.\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\n            assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');\n            return false;\n        }\n        // Raise data from cache if we have any documents or we are offline\n        return !snap.docs.isEmpty() || onlineState === OnlineState.Failed;\n    };\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\n        // We don't need to handle includeDocumentMetadataChanges here because\n        // the Metadata only changes have already been stripped out if needed.\n        // At this point the only changes we will see are the ones we should\n        // propagate.\n        if (snap.docChanges.length > 0) {\n            return true;\n        }\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\n            return this.options.includeQueryMetadataChanges === true;\n        }\n        // Generally we should have hit one of the cases above, but it's possible\n        // to get here if there were only metadata docChanges and they got\n        // stripped out.\n        return false;\n    };\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\n        assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');\n        snap = new ViewSnapshot(snap.query, snap.docs, document_set_DocumentSet.emptySet(snap.docs), QueryListener.getInitialViewChanges(snap), snap.fromCache, snap.hasPendingWrites, true);\n        this.raisedInitialEvent = true;\n        this.queryObserver.next(snap);\n    };\n    /** Returns changes as if all documents in the snap were added. */\n    QueryListener.getInitialViewChanges = function (snap) {\n        var result = [];\n        snap.docs.forEach(function (doc) {\n            result.push({ type: ChangeType.Added, doc: doc });\n        });\n        return result;\n    };\n    return QueryListener;\n}());\n\n\n//# sourceMappingURL=event_manager.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/persistence_promise.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nvar persistence_promise_PersistencePromise = /** @class */ (function () {\n    function PersistencePromise(callback) {\n        var _this = this;\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\n        // not the user's raw next() or catch() callbacks.\n        // tslint:disable-next-line:no-any Accept any result type for the next call in the Promise chain.\n        this.nextCallback = null;\n        // tslint:disable-next-line:no-any Accept any result type for the error handler.\n        this.catchCallback = null;\n        // When the operation resolves, we'll set result or error and mark isDone.\n        this.result = undefined;\n        this.error = undefined;\n        this.isDone = false;\n        // Set to true when .then() or .catch() are called and prevents additional\n        // chaining.\n        this.callbackAttached = false;\n        callback(function (value) {\n            _this.isDone = true;\n            _this.result = value;\n            if (_this.nextCallback) {\n                // value should be defined unless T is Void, but we can't express\n                // that in the type system.\n                _this.nextCallback(value);\n            }\n        }, function (error) {\n            _this.isDone = true;\n            _this.error = error;\n            if (_this.catchCallback) {\n                _this.catchCallback(error);\n            }\n        });\n    }\n    PersistencePromise.prototype.catch = function (fn) {\n        return this.next(undefined, fn);\n    };\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\n        var _this = this;\n        if (this.callbackAttached) {\n            fail('Called next() or catch() twice for PersistencePromise');\n        }\n        this.callbackAttached = true;\n        if (this.isDone) {\n            if (!this.error) {\n                return this.wrapSuccess(nextFn, this.result);\n            }\n            else {\n                return this.wrapFailure(catchFn, this.error);\n            }\n        }\n        else {\n            return new PersistencePromise(function (resolve, reject) {\n                _this.nextCallback = function (value) {\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\n                };\n                _this.catchCallback = function (error) {\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\n                };\n            });\n        }\n    };\n    PersistencePromise.prototype.toPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.next(resolve, reject);\n        });\n    };\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\n        try {\n            var result = fn();\n            if (result instanceof PersistencePromise) {\n                return result;\n            }\n            else {\n                return PersistencePromise.resolve(result);\n            }\n        }\n        catch (e) {\n            return PersistencePromise.reject(e);\n        }\n    };\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n        if (nextFn) {\n            return this.wrapUserFunction(function () { return nextFn(value); });\n        }\n        else {\n            // If there's no nextFn, then R must be the same as T but we\n            // can't express that in the type system.\n            // tslint:disable-next-line:no-any\n            return PersistencePromise.resolve(value);\n        }\n    };\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n        if (catchFn) {\n            return this.wrapUserFunction(function () { return catchFn(error); });\n        }\n        else {\n            return PersistencePromise.reject(error);\n        }\n    };\n    PersistencePromise.resolve = function (result) {\n        return new PersistencePromise(function (resolve, reject) {\n            resolve(result);\n        });\n    };\n    PersistencePromise.reject = function (error) {\n        return new PersistencePromise(function (resolve, reject) {\n            reject(error);\n        });\n    };\n    PersistencePromise.waitFor = function (\n    // tslint:disable-next-line:no-any Accept all Promise types in waitFor().\n    all) {\n        return all.reduce(function (promise, nextPromise, idx) {\n            return promise.next(function () {\n                return nextPromise;\n            });\n        }, PersistencePromise.resolve());\n    };\n    PersistencePromise.map = function (all) {\n        var results = [];\n        var first = true;\n        // initial is ignored, so we can cheat on the type.\n        // tslint:disable-next-line:no-any\n        var initial = PersistencePromise.resolve(null);\n        return all\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (!first) {\n                    results.push(result);\n                }\n                first = false;\n                return nextPromise;\n            });\n        }, initial)\n            .next(function (result) {\n            results.push(result);\n            return results;\n        });\n    };\n    return PersistencePromise;\n}());\n\n\n//# sourceMappingURL=persistence_promise.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/eager_garbage_collector.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nvar eager_garbage_collector_EagerGarbageCollector = /** @class */ (function () {\n    function EagerGarbageCollector() {\n        this.isEager = true;\n        /**\n         * The garbage collectible sources to double-check during garbage collection.\n         */\n        this.sources = [];\n        /**\n         * A set of potentially garbage keys.\n         * PORTING NOTE: This would be a mutable set if Javascript had one.\n         */\n        this.potentialGarbage = documentKeySet();\n    }\n    EagerGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        this.sources.push(garbageSource);\n        garbageSource.setGarbageCollector(this);\n    };\n    EagerGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        this.sources.splice(this.sources.indexOf(garbageSource), 1);\n        garbageSource.setGarbageCollector(null);\n    };\n    EagerGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        this.potentialGarbage = this.potentialGarbage.add(key);\n    };\n    EagerGarbageCollector.prototype.collectGarbage = function (txn) {\n        var _this = this;\n        var promises = [];\n        var garbageKeys = documentKeySet();\n        this.potentialGarbage.forEach(function (key) {\n            var hasRefsPromise = _this.documentHasAnyReferences(txn, key);\n            promises.push(hasRefsPromise.next(function (hasRefs) {\n                // If there are no references, get the key.\n                if (!hasRefs) {\n                    garbageKeys = garbageKeys.add(key);\n                }\n                return persistence_promise_PersistencePromise.resolve();\n            }));\n        });\n        // Clear locally retained potential keys and returned confirmed garbage.\n        this.potentialGarbage = documentKeySet();\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return garbageKeys; });\n    };\n    EagerGarbageCollector.prototype.documentHasAnyReferences = function (txn, key) {\n        var initial = persistence_promise_PersistencePromise.resolve(false);\n        return this.sources\n            .map(function (source) { return function () { return source.containsKey(txn, key); }; })\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (result) {\n                    return persistence_promise_PersistencePromise.resolve(true);\n                }\n                else {\n                    return nextPromise();\n                }\n            });\n        }, initial);\n    };\n    return EagerGarbageCollector;\n}());\n\n\n//# sourceMappingURL=eager_garbage_collector.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_view_changes.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nvar local_view_changes_LocalViewChanges = /** @class */ (function () {\n    function LocalViewChanges(query, addedKeys, removedKeys) {\n        this.query = query;\n        this.addedKeys = addedKeys;\n        this.removedKeys = removedKeys;\n    }\n    LocalViewChanges.fromSnapshot = function (viewSnapshot) {\n        var addedKeys = documentKeySet();\n        var removedKeys = documentKeySet();\n        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {\n            var docChange = _a[_i];\n            switch (docChange.type) {\n                case ChangeType.Added:\n                    addedKeys = addedKeys.add(docChange.doc.key);\n                    break;\n                case ChangeType.Removed:\n                    removedKeys = removedKeys.add(docChange.doc.key);\n                    break;\n                default:\n            }\n        }\n        return new LocalViewChanges(viewSnapshot.query, addedKeys, removedKeys);\n    };\n    return LocalViewChanges;\n}());\n\n\n//# sourceMappingURL=local_view_changes.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/reference_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nvar reference_set_ReferenceSet = /** @class */ (function () {\n    function ReferenceSet() {\n        // A set of outstanding references to a document sorted by key.\n        this.refsByKey = new sorted_set_SortedSet(reference_set_DocReference.compareByKey);\n        // A set of outstanding references to a document sorted by target id.\n        this.refsByTarget = new sorted_set_SortedSet(reference_set_DocReference.compareByTargetId);\n        /** Keeps track of keys that have references */\n        this.garbageCollector = null;\n    }\n    /** Returns true if the reference set contains no references. */\n    ReferenceSet.prototype.isEmpty = function () {\n        return this.refsByKey.isEmpty();\n    };\n    /** Adds a reference to the given document key for the given ID. */\n    ReferenceSet.prototype.addReference = function (key, id) {\n        var ref = new reference_set_DocReference(key, id);\n        this.refsByKey = this.refsByKey.add(ref);\n        this.refsByTarget = this.refsByTarget.add(ref);\n    };\n    /** Add references to the given document keys for the given ID. */\n    ReferenceSet.prototype.addReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.addReference(key, id); });\n    };\n    /**\n     * Removes a reference to the given document key for the given\n     * ID.\n     */\n    ReferenceSet.prototype.removeReference = function (key, id) {\n        this.removeRef(new reference_set_DocReference(key, id));\n    };\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\n    };\n    /**\n     * Clears all references with a given ID. Calls removeRef() for each key\n     * removed.\n     */\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\n        var _this = this;\n        var emptyKey = document_key_DocumentKey.EMPTY;\n        var startRef = new reference_set_DocReference(emptyKey, id);\n        var endRef = new reference_set_DocReference(emptyKey, id + 1);\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            _this.removeRef(ref);\n        });\n    };\n    ReferenceSet.prototype.removeAllReferences = function () {\n        var _this = this;\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\n    };\n    ReferenceSet.prototype.removeRef = function (ref) {\n        this.refsByKey = this.refsByKey.delete(ref);\n        this.refsByTarget = this.refsByTarget.delete(ref);\n        if (this.garbageCollector !== null) {\n            this.garbageCollector.addPotentialGarbageKey(ref.key);\n        }\n    };\n    ReferenceSet.prototype.referencesForId = function (id) {\n        var emptyKey = document_key_DocumentKey.EMPTY;\n        var startRef = new reference_set_DocReference(emptyKey, id);\n        var endRef = new reference_set_DocReference(emptyKey, id + 1);\n        var keys = documentKeySet();\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            keys = keys.add(ref.key);\n        });\n        return keys;\n    };\n    ReferenceSet.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    ReferenceSet.prototype.containsKey = function (txn, key) {\n        var ref = new reference_set_DocReference(key, 0);\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n        return persistence_promise_PersistencePromise.resolve(firstRef !== null && key.isEqual(firstRef.key));\n    };\n    return ReferenceSet;\n}());\n\nvar reference_set_DocReference = /** @class */ (function () {\n    function DocReference(key, targetOrBatchId) {\n        this.key = key;\n        this.targetOrBatchId = targetOrBatchId;\n    }\n    /** Compare by key then by ID */\n    DocReference.compareByKey = function (left, right) {\n        return (document_key_DocumentKey.comparator(left.key, right.key) ||\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\n    };\n    /** Compare by ID then by key */\n    DocReference.compareByTargetId = function (left, right) {\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n            document_key_DocumentKey.comparator(left.key, right.key));\n    };\n    return DocReference;\n}());\n\n\n//# sourceMappingURL=reference_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/target_id_generator.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\n\n\n//# sourceMappingURL=target_id_generator.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/view.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar AddedLimboDocument = /** @class */ (function () {\n    function AddedLimboDocument(key) {\n        this.key = key;\n    }\n    return AddedLimboDocument;\n}());\n\nvar RemovedLimboDocument = /** @class */ (function () {\n    function RemovedLimboDocument(key) {\n        this.key = key;\n    }\n    return RemovedLimboDocument;\n}());\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nvar view_View = /** @class */ (function () {\n    function View(query, \n    /** Documents included in the remote target */\n    syncedDocuments) {\n        this.query = query;\n        this.syncedDocuments = syncedDocuments;\n        this.syncState = null;\n        /**\n         * A flag whether the view is current with the backend. A view is considered\n         * current after it has seen the current flag from the backend and did not\n         * lose consistency within the watch stream (e.g. because of an existence\n         * filter mismatch).\n         */\n        this.current = false;\n        /** Documents in the view but not in the remote target */\n        this.limboDocuments = documentKeySet();\n        /** Document Keys that have local changes */\n        this.mutatedKeys = documentKeySet();\n        this.documentSet = new document_set_DocumentSet(query.docComparator.bind(query));\n    }\n    /**\n     * Iterates over a set of doc changes, applies the query limit, and computes\n     * what the new results should be, what the changes were, and whether we may\n     * need to go back to the local cache for more results. Does not make any\n     * changes to the view.\n     * @param docChanges The doc changes to apply to this view.\n     * @param previousChanges If this is being called with a refill, then start\n     *        with this set of docs and changes instead of the current view.\n     * @return a new set of docs, changes, and refill flag.\n     */\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n        var _this = this;\n        var changeSet = previousChanges\n            ? previousChanges.changeSet\n            : new view_snapshot_DocumentChangeSet();\n        var oldDocumentSet = previousChanges\n            ? previousChanges.documentSet\n            : this.documentSet;\n        var newMutatedKeys = previousChanges\n            ? previousChanges.mutatedKeys\n            : this.mutatedKeys;\n        var newDocumentSet = oldDocumentSet;\n        var needsRefill = false;\n        // Track the last doc in a (full) limit. This is necessary, because some\n        // update (a delete, or an update moving a doc past the old limit) might\n        // mean there is some other document in the local cache that either should\n        // come (1) between the old last limit doc and the new last document, in the\n        // case of updates, or (2) after the new last document, in the case of\n        // deletes. So we keep this doc at the old limit to compare the updates to.\n        //\n        // Note that this should never get used in a refill (when previousChanges is\n        // set), because there will only be adds -- no deletes or updates.\n        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit\n            ? oldDocumentSet.last()\n            : null;\n        docChanges.inorderTraversal(function (key, newMaybeDoc) {\n            var oldDoc = oldDocumentSet.get(key);\n            var newDoc = newMaybeDoc instanceof document_Document ? newMaybeDoc : null;\n            if (newDoc) {\n                assert(key.isEqual(newDoc.key), 'Mismatching keys found in document changes: ' +\n                    key +\n                    ' != ' +\n                    newDoc.key);\n                newDoc = _this.query.matches(newDoc) ? newDoc : null;\n            }\n            if (newDoc) {\n                newDocumentSet = newDocumentSet.add(newDoc);\n                if (newDoc.hasLocalMutations) {\n                    newMutatedKeys = newMutatedKeys.add(key);\n                }\n                else {\n                    newMutatedKeys = newMutatedKeys.delete(key);\n                }\n            }\n            else {\n                newDocumentSet = newDocumentSet.delete(key);\n                newMutatedKeys = newMutatedKeys.delete(key);\n            }\n            // Calculate change\n            if (oldDoc && newDoc) {\n                var docsEqual = oldDoc.data.isEqual(newDoc.data);\n                if (!docsEqual ||\n                    oldDoc.hasLocalMutations !== newDoc.hasLocalMutations) {\n                    // only report a change if document actually changed\n                    if (docsEqual) {\n                        changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n                    }\n                    else {\n                        changeSet.track({ type: ChangeType.Modified, doc: newDoc });\n                    }\n                    if (lastDocInLimit &&\n                        _this.query.docComparator(newDoc, lastDocInLimit) > 0) {\n                        // This doc moved from inside the limit to after the limit.\n                        // That means there may be some doc in the local cache that's\n                        // actually less than this one.\n                        needsRefill = true;\n                    }\n                }\n            }\n            else if (!oldDoc && newDoc) {\n                changeSet.track({ type: ChangeType.Added, doc: newDoc });\n            }\n            else if (oldDoc && !newDoc) {\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n                if (lastDocInLimit) {\n                    // A doc was removed from a full limit query. We'll need to\n                    // requery from the local cache to see if we know about some other\n                    // doc that should be in the results.\n                    needsRefill = true;\n                }\n            }\n        });\n        if (this.query.hasLimit()) {\n            // TODO(klimt): Make DocumentSet size be constant time.\n            while (newDocumentSet.size > this.query.limit) {\n                var oldDoc = newDocumentSet.last();\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n            }\n        }\n        assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');\n        return {\n            documentSet: newDocumentSet,\n            changeSet: changeSet,\n            needsRefill: needsRefill,\n            mutatedKeys: newMutatedKeys\n        };\n    };\n    /**\n     * Updates the view with the given ViewDocumentChanges and updates limbo docs\n     * and sync state from the given (optional) target change.\n     * @param docChanges The set of changes to make to the view's docs.\n     * @param targetChange A target change to apply for computing limbo docs and\n     *        sync state.\n     * @return A new ViewChange with the given docs, changes, and sync state.\n     */\n    View.prototype.applyChanges = function (docChanges, targetChange) {\n        var _this = this;\n        assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');\n        var oldDocs = this.documentSet;\n        this.documentSet = docChanges.documentSet;\n        this.mutatedKeys = docChanges.mutatedKeys;\n        // Sort changes based on type and query comparator\n        var changes = docChanges.changeSet.getChanges();\n        changes.sort(function (c1, c2) {\n            return (compareChangeType(c1.type, c2.type) ||\n                _this.query.docComparator(c1.doc, c2.doc));\n        });\n        this.applyTargetChange(targetChange);\n        var limboChanges = this.updateLimboDocuments();\n        var synced = this.limboDocuments.size === 0 && this.current;\n        var newSyncState = synced ? SyncState.Synced : SyncState.Local;\n        var syncStateChanged = newSyncState !== this.syncState;\n        this.syncState = newSyncState;\n        if (changes.length === 0 && !syncStateChanged) {\n            // no changes\n            return { limboChanges: limboChanges };\n        }\n        else {\n            var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, newSyncState === SyncState.Local, !docChanges.mutatedKeys.isEmpty(), syncStateChanged);\n            return {\n                snapshot: snap,\n                limboChanges: limboChanges\n            };\n        }\n    };\n    /**\n     * Applies an OnlineState change to the view, potentially generating a\n     * ViewChange if the view's syncState changes as a result.\n     */\n    View.prototype.applyOnlineStateChange = function (onlineState) {\n        if (this.current && onlineState === OnlineState.Failed) {\n            // If we're offline, set `current` to false and then call applyChanges()\n            // to refresh our syncState and generate a ViewChange as appropriate. We\n            // are guaranteed to get a new TargetChange that sets `current` back to\n            // true once the client is back online.\n            this.current = false;\n            return this.applyChanges({\n                documentSet: this.documentSet,\n                changeSet: new view_snapshot_DocumentChangeSet(),\n                mutatedKeys: this.mutatedKeys,\n                needsRefill: false\n            });\n        }\n        else {\n            // No effect, just return a no-op ViewChange.\n            return { limboChanges: [] };\n        }\n    };\n    /**\n     * Returns whether the doc for the given key should be in limbo.\n     */\n    View.prototype.shouldBeInLimbo = function (key) {\n        // If the remote end says it's part of this query, it's not in limbo.\n        if (this.syncedDocuments.has(key)) {\n            return false;\n        }\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\n        if (!this.documentSet.has(key)) {\n            return false;\n        }\n        // If there are local changes to the doc, they might explain why the server\n        // doesn't know that it's part of the query. So don't put it in limbo.\n        // TODO(klimt): Ideally, we would only consider changes that might actually\n        // affect this specific query.\n        if (this.documentSet.get(key).hasLocalMutations) {\n            return false;\n        }\n        // Everything else is in limbo.\n        return true;\n    };\n    /**\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\n     * Returns the list of changes to which docs are in limbo.\n     */\n    View.prototype.applyTargetChange = function (targetChange) {\n        if (targetChange) {\n            var targetMapping = targetChange.mapping;\n            if (targetMapping instanceof ResetMapping) {\n                this.syncedDocuments = targetMapping.documents;\n            }\n            else if (targetMapping instanceof UpdateMapping) {\n                this.syncedDocuments = targetMapping.applyToKeySet(this.syncedDocuments);\n            }\n            switch (targetChange.currentStatusUpdate) {\n                case CurrentStatusUpdate.MarkCurrent:\n                    this.current = true;\n                    break;\n                case CurrentStatusUpdate.MarkNotCurrent:\n                    this.current = false;\n                    break;\n                case CurrentStatusUpdate.None:\n                    break;\n                default:\n                    fail('Unknown current status update: ' + targetChange.currentStatusUpdate);\n            }\n        }\n    };\n    View.prototype.updateLimboDocuments = function () {\n        var _this = this;\n        // We can only determine limbo documents when we're in-sync with the server.\n        if (!this.current) {\n            return [];\n        }\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\n        // updating many documents.\n        var oldLimboDocuments = this.limboDocuments;\n        this.limboDocuments = documentKeySet();\n        this.documentSet.forEach(function (doc) {\n            if (_this.shouldBeInLimbo(doc.key)) {\n                _this.limboDocuments = _this.limboDocuments.add(doc.key);\n            }\n        });\n        // Diff the new limbo docs with the old limbo docs.\n        var changes = [];\n        oldLimboDocuments.forEach(function (key) {\n            if (!_this.limboDocuments.has(key)) {\n                changes.push(new RemovedLimboDocument(key));\n            }\n        });\n        this.limboDocuments.forEach(function (key) {\n            if (!oldLimboDocuments.has(key)) {\n                changes.push(new AddedLimboDocument(key));\n            }\n        });\n        return changes;\n    };\n    return View;\n}());\n\nfunction compareChangeType(c1, c2) {\n    var order = function (change) {\n        switch (change) {\n            case ChangeType.Added:\n                return 1;\n            case ChangeType.Modified:\n                return 2;\n            case ChangeType.Metadata:\n                // A metadata change is converted to a modified change at the public\n                // api layer.  Since we sort by document key and then change type,\n                // metadata and modified changes must be sorted equivalently.\n                return 2;\n            case ChangeType.Removed:\n                return 0;\n            default:\n                return fail('Unknown ChangeType: ' + change);\n        }\n    };\n    return order(c1) - order(c2);\n}\n\n//# sourceMappingURL=view.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/sync_engine.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar sync_engine_LOG_TAG = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nvar QueryView = /** @class */ (function () {\n    function QueryView(\n    /**\n     * The query itself.\n     */\n    query, \n    /**\n     * The target number created by the client that is used in the watch\n     * stream to identify this query.\n     */\n    targetId, \n    /**\n     * An identifier from the datastore backend that indicates the last state\n     * of the results that was received. This can be used to indicate where\n     * to continue receiving new doc changes for the query.\n     */\n    resumeToken, \n    /**\n     * The view is responsible for computing the final merged truth of what\n     * docs are in the query. It gets notified of local and remote changes,\n     * and applies the query filters and limits to determine the most correct\n     * possible results.\n     */\n    view) {\n        this.query = query;\n        this.targetId = targetId;\n        this.resumeToken = resumeToken;\n        this.view = view;\n    }\n    return QueryView;\n}());\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nvar sync_engine_SyncEngine = /** @class */ (function () {\n    function SyncEngine(localStore, remoteStore, currentUser) {\n        this.localStore = localStore;\n        this.remoteStore = remoteStore;\n        this.currentUser = currentUser;\n        this.viewHandler = null;\n        this.errorHandler = null;\n        this.queryViewsByQuery = new obj_map_ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.queryViewsByTarget = {};\n        this.limboTargetsByKey = new SortedMap(document_key_DocumentKey.comparator);\n        this.limboKeysByTarget = {};\n        this.limboDocumentRefs = new reference_set_ReferenceSet();\n        this.limboCollector = new eager_garbage_collector_EagerGarbageCollector();\n        /** Stores user completion handlers, indexed by User and BatchId. */\n        this.mutationUserCallbacks = {};\n        this.targetIdGenerator = TargetIdGenerator.forSyncEngine();\n    }\n    /** Subscribes view and error handler. Can be called only once. */\n    SyncEngine.prototype.subscribe = function (viewHandler, errorHandler) {\n        assert(viewHandler !== null && errorHandler !== null, 'View and error handlers cannot be null');\n        assert(this.viewHandler === null && this.errorHandler === null, 'SyncEngine already has a subscriber.');\n        this.viewHandler = viewHandler;\n        this.errorHandler = errorHandler;\n        this.limboCollector.addGarbageSource(this.limboDocumentRefs);\n    };\n    /**\n     * Initiates the new listen, resolves promise when listen enqueued to the\n     * server. All the subsequent view snapshots or errors are sent to the\n     * subscribed handlers. Returns the targetId of the query.\n     */\n    SyncEngine.prototype.listen = function (query) {\n        var _this = this;\n        this.assertSubscribed('listen()');\n        assert(!this.queryViewsByQuery.has(query), 'We already listen to the query: ' + query);\n        return this.localStore.allocateQuery(query).then(function (queryData) {\n            return _this.localStore\n                .executeQuery(query)\n                .then(function (docs) {\n                return _this.localStore\n                    .remoteDocumentKeys(queryData.targetId)\n                    .then(function (remoteKeys) {\n                    var view = new view_View(query, remoteKeys);\n                    var viewDocChanges = view.computeDocChanges(docs);\n                    var viewChange = view.applyChanges(viewDocChanges);\n                    assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');\n                    assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');\n                    var data = new QueryView(query, queryData.targetId, queryData.resumeToken, view);\n                    _this.queryViewsByQuery.set(query, data);\n                    _this.queryViewsByTarget[queryData.targetId] = data;\n                    _this.viewHandler([viewChange.snapshot]);\n                    _this.remoteStore.listen(queryData);\n                });\n            })\n                .then(function () {\n                return queryData.targetId;\n            });\n        });\n    };\n    /** Stops listening to the query. */\n    SyncEngine.prototype.unlisten = function (query) {\n        var _this = this;\n        this.assertSubscribed('unlisten()');\n        var queryView = this.queryViewsByQuery.get(query);\n        assert(!!queryView, 'Trying to unlisten on query not found:' + query);\n        return this.localStore.releaseQuery(query).then(function () {\n            _this.remoteStore.unlisten(queryView.targetId);\n            return _this.removeAndCleanupQuery(queryView).then(function () {\n                return _this.localStore.collectGarbage();\n            });\n        });\n    };\n    /**\n     * Initiates the write of local mutation batch which involves adding the\n     * writes to the mutation queue, notifying the remote store about new\n     * mutations and raising events for any changes this write caused.\n     *\n     * The promise returned by this call is resolved when the above steps\n     * have completed, *not* when the write was acked by the backend. The\n     * userCallback is resolved once the write was acked/rejected by the\n     * backend (or failed locally for any other reason).\n     */\n    SyncEngine.prototype.write = function (batch, userCallback) {\n        var _this = this;\n        this.assertSubscribed('write()');\n        return this.localStore\n            .localWrite(batch)\n            .then(function (result) {\n            _this.addMutationCallback(result.batchId, userCallback);\n            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);\n        })\n            .then(function () {\n            return _this.remoteStore.fillWritePipeline();\n        });\n    };\n    // TODO(klimt): Wrap the given error in a standard Firestore error object.\n    SyncEngine.prototype.wrapUpdateFunctionError = function (error) {\n        return error;\n    };\n    /**\n     * Takes an updateFunction in which a set of reads and writes can be performed\n     * atomically. In the updateFunction, the client can read and write values\n     * using the supplied transaction object. After the updateFunction, all\n     * changes will be committed. If some other client has changed any of the data\n     * referenced, then the updateFunction will be called again. If the\n     * updateFunction still fails after the given number of retries, then the\n     * transaction will be rejection.\n     *\n     * The transaction object passed to the updateFunction contains methods for\n     * accessing documents and collections. Unlike other datastore access, data\n     * accessed with the transaction will not reflect local changes that have not\n     * been committed. For this reason, it is required that all reads are\n     * performed before any writes. Transactions must be performed while online.\n     *\n     * The promise returned is resolved when the transaction is fully committed.\n     */\n    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {\n        var _this = this;\n        if (retries === void 0) { retries = 5; }\n        assert(retries >= 0, 'Got negative number of retries for transaction.');\n        var transaction = this.remoteStore.createTransaction();\n        var wrappedUpdateFunction = function () {\n            try {\n                var userPromise = updateFunction(transaction);\n                if (isNullOrUndefined(userPromise) ||\n                    !userPromise.catch ||\n                    !userPromise.then) {\n                    return Promise.reject(Error('Transaction callback must return a Promise'));\n                }\n                return userPromise.catch(function (e) {\n                    return Promise.reject(_this.wrapUpdateFunctionError(e));\n                });\n            }\n            catch (e) {\n                return Promise.reject(_this.wrapUpdateFunctionError(e));\n            }\n        };\n        return wrappedUpdateFunction().then(function (result) {\n            return transaction\n                .commit()\n                .then(function () {\n                return result;\n            })\n                .catch(function (error) {\n                if (retries === 0) {\n                    return Promise.reject(error);\n                }\n                // TODO(klimt): Put in a retry delay?\n                return _this.runTransaction(updateFunction, retries - 1);\n            });\n        });\n    };\n    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        this.assertSubscribed('applyRemoteEvent()');\n        // Make sure limbo documents are deleted if there were no results\n        forEachNumber(remoteEvent.targetChanges, function (targetId, targetChange) {\n            var limboKey = _this.limboKeysByTarget[targetId];\n            if (limboKey &&\n                targetChange.currentStatusUpdate ===\n                    CurrentStatusUpdate.MarkCurrent &&\n                !remoteEvent.documentUpdates.get(limboKey)) {\n                // When listening to a query the server responds with a snapshot\n                // containing documents matching the query and a current marker\n                // telling us we're now in sync. It's possible for these to arrive\n                // as separate remote events or as a single remote event.\n                // For a document query, there will be no documents sent in the\n                // response if the document doesn't exist.\n                //\n                // If the snapshot arrives separately from the current marker,\n                // we handle it normally and updateTrackedLimbos will resolve the\n                // limbo status of the document, removing it from limboDocumentRefs.\n                // This works because clients only initiate limbo resolution when\n                // a target is current and because all current targets are\n                // always at a consistent snapshot.\n                //\n                // However, if the document doesn't exist and the current marker\n                // arrives, the document is not present in the snapshot and our\n                // normal view handling would consider the document to remain in\n                // limbo indefinitely because there are no updates to the document.\n                // To avoid this, we specially handle this just this case here:\n                // synthesizing a delete.\n                //\n                // TODO(dimond): Ideally we would have an explicit lookup query\n                // instead resulting in an explicit delete message and we could\n                // remove this special logic.\n                remoteEvent.addDocumentUpdate(new document_NoDocument(limboKey, remoteEvent.snapshotVersion));\n            }\n        });\n        return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n        });\n    };\n    /**\n     * Applies an OnlineState change to the sync engine and notifies any views of\n     * the change.\n     */\n    SyncEngine.prototype.applyOnlineStateChange = function (onlineState) {\n        var newViewSnapshots = [];\n        this.queryViewsByQuery.forEach(function (query, queryView) {\n            var viewChange = queryView.view.applyOnlineStateChange(onlineState);\n            assert(viewChange.limboChanges.length === 0, 'OnlineState should not affect limbo documents.');\n            if (viewChange.snapshot) {\n                newViewSnapshots.push(viewChange.snapshot);\n            }\n        });\n        this.viewHandler(newViewSnapshots);\n    };\n    SyncEngine.prototype.rejectListen = function (targetId, err) {\n        var _this = this;\n        this.assertSubscribed('rejectListens()');\n        var limboKey = this.limboKeysByTarget[targetId];\n        if (limboKey) {\n            // Since this query failed, we won't want to manually unlisten to it.\n            // So go ahead and remove it from bookkeeping.\n            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);\n            delete this.limboKeysByTarget[targetId];\n            // TODO(klimt): We really only should do the following on permission\n            // denied errors, but we don't have the cause code here.\n            // It's a limbo doc. Create a synthetic event saying it was deleted.\n            // This is kind of a hack. Ideally, we would have a method in the local\n            // store to purge a document. However, it would be tricky to keep all of\n            // the local store's invariants with another method.\n            var docMap = new SortedMap(document_key_DocumentKey.comparator);\n            docMap = docMap.insert(limboKey, new document_NoDocument(limboKey, snapshot_version_SnapshotVersion.forDeletedDoc()));\n            var event_1 = new remote_event_RemoteEvent(snapshot_version_SnapshotVersion.MIN, {}, docMap);\n            return this.applyRemoteEvent(event_1);\n        }\n        else {\n            var queryView_1 = this.queryViewsByTarget[targetId];\n            assert(!!queryView_1, 'Unknown targetId: ' + targetId);\n            return this.localStore.releaseQuery(queryView_1.query).then(function () {\n                return _this.removeAndCleanupQuery(queryView_1).then(function () {\n                    _this.errorHandler(queryView_1.query, err);\n                });\n            });\n        }\n    };\n    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {\n        var _this = this;\n        this.assertSubscribed('applySuccessfulWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught\n        // up), so we raise user callbacks first so that they consistently happen\n        // before listen events.\n        this.processUserCallback(mutationBatchResult.batch.batchId, \n        /*error=*/ null);\n        return this.localStore\n            .acknowledgeBatch(mutationBatchResult)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {\n        var _this = this;\n        this.assertSubscribed('rejectFailedWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught up),\n        // so we raise user callbacks first so that they consistently happen before\n        // listen events.\n        this.processUserCallback(batchId, error);\n        return this.localStore.rejectBatch(batchId).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        if (!newCallbacks) {\n            newCallbacks = new SortedMap(primitiveComparator);\n        }\n        newCallbacks = newCallbacks.insert(batchId, callback);\n        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    };\n    /**\n     * Resolves or rejects the user callback for the given batch and then discards\n     * it.\n     */\n    SyncEngine.prototype.processUserCallback = function (batchId, error) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        // NOTE: Mutations restored from persistence won't have callbacks, so it's\n        // okay for there to be no callback for this ID.\n        if (newCallbacks) {\n            var callback = newCallbacks.get(batchId);\n            if (callback) {\n                assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');\n                if (error) {\n                    callback.reject(error);\n                }\n                else {\n                    callback.resolve();\n                }\n                newCallbacks = newCallbacks.remove(batchId);\n            }\n            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n        }\n    };\n    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {\n        this.queryViewsByQuery.delete(queryView.query);\n        delete this.queryViewsByTarget[queryView.targetId];\n        this.limboDocumentRefs.removeReferencesForId(queryView.targetId);\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {\n        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n            var limboChange = limboChanges_1[_i];\n            if (limboChange instanceof AddedLimboDocument) {\n                this.limboDocumentRefs.addReference(limboChange.key, targetId);\n                this.trackLimboChange(limboChange);\n            }\n            else if (limboChange instanceof RemovedLimboDocument) {\n                debug(sync_engine_LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n                this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n            }\n            else {\n                fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n            }\n        }\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.trackLimboChange = function (limboChange) {\n        var key = limboChange.key;\n        if (!this.limboTargetsByKey.get(key)) {\n            debug(sync_engine_LOG_TAG, 'New document in limbo: ' + key);\n            var limboTargetId = this.targetIdGenerator.next();\n            var query = query_Query.atPath(key.path);\n            this.limboKeysByTarget[limboTargetId] = key;\n            this.remoteStore.listen(new query_data_QueryData(query, limboTargetId, QueryPurpose.Listen));\n            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);\n        }\n    };\n    SyncEngine.prototype.gcLimboDocuments = function () {\n        var _this = this;\n        // HACK: We can use a null transaction here, because we know that the\n        // reference set is entirely within memory and doesn't need a store engine.\n        return this.limboCollector\n            .collectGarbage(null)\n            .next(function (keys) {\n            keys.forEach(function (key) {\n                var limboTargetId = _this.limboTargetsByKey.get(key);\n                if (limboTargetId === null) {\n                    // This target already got removed, because the query failed.\n                    return;\n                }\n                _this.remoteStore.unlisten(limboTargetId);\n                _this.limboTargetsByKey = _this.limboTargetsByKey.remove(key);\n                delete _this.limboKeysByTarget[limboTargetId];\n            });\n        })\n            .toPromise();\n    };\n    // Visible for testing\n    SyncEngine.prototype.currentLimboDocs = function () {\n        return this.limboTargetsByKey;\n    };\n    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {\n        var _this = this;\n        var newSnaps = [];\n        var docChangesInAllViews = [];\n        var queriesProcessed = [];\n        this.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(Promise.resolve()\n                .then(function () {\n                var viewDocChanges = queryView.view.computeDocChanges(changes);\n                if (!viewDocChanges.needsRefill) {\n                    return viewDocChanges;\n                }\n                // The query has a limit and some docs were removed, so we need\n                // to re-run the query against the local store to make sure we\n                // didn't lose any good docs that had been past the limit.\n                return _this.localStore.executeQuery(queryView.query).then(function (docs) {\n                    return queryView.view.computeDocChanges(docs, viewDocChanges);\n                });\n            })\n                .then(function (viewDocChanges) {\n                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];\n                var viewChange = queryView.view.applyChanges(viewDocChanges, targetChange);\n                return _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges).then(function () {\n                    if (viewChange.snapshot) {\n                        newSnaps.push(viewChange.snapshot);\n                        var docChanges = local_view_changes_LocalViewChanges.fromSnapshot(viewChange.snapshot);\n                        docChangesInAllViews.push(docChanges);\n                    }\n                });\n            }));\n        });\n        return Promise.all(queriesProcessed)\n            .then(function () {\n            _this.viewHandler(newSnaps);\n            return _this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n        })\n            .then(function () {\n            return _this.localStore.collectGarbage();\n        });\n    };\n    SyncEngine.prototype.assertSubscribed = function (fnName) {\n        assert(this.viewHandler !== null && this.errorHandler !== null, 'Trying to call ' + fnName + ' before calling subscribe().');\n    };\n    SyncEngine.prototype.handleUserChange = function (user) {\n        var _this = this;\n        this.currentUser = user;\n        return this.localStore\n            .handleUserChange(user)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        })\n            .then(function () {\n            return _this.remoteStore.handleUserChange(user);\n        });\n    };\n    return SyncEngine;\n}());\n\n\n//# sourceMappingURL=sync_engine.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/mutation_batch.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar BATCHID_UNKNOWN = -1;\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nvar mutation_batch_MutationBatch = /** @class */ (function () {\n    function MutationBatch(batchId, localWriteTime, mutations) {\n        this.batchId = batchId;\n        this.localWriteTime = localWriteTime;\n        this.mutations = mutations;\n    }\n    /**\n     * Applies all the mutations in this MutationBatch to the specified document\n     * to create a new remote document\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     * @param batchResult The result of applying the MutationBatch to the\n     * backend.\n     */\n    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(docKey), \"applyToRemoteDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var mutationResults = batchResult.mutationResults;\n        assert(mutationResults.length === this.mutations.length, \"Mismatch between mutations length\\n      (\" + this.mutations.length + \") and mutation results length\\n      (\" + mutationResults.length + \").\");\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.isEqual(docKey)) {\n                var mutationResult = mutationResults[i];\n                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n            }\n        }\n        return maybeDoc;\n    };\n    /**\n     * Computes the local view of a document given all the mutations in this\n     * batch.\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     */\n    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(docKey), \"applyToLocalDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var baseDoc = maybeDoc;\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.isEqual(docKey)) {\n                maybeDoc = mutation.applyToLocalView(maybeDoc, baseDoc, this.localWriteTime);\n            }\n        }\n        return maybeDoc;\n    };\n    MutationBatch.prototype.keys = function () {\n        var keySet = documentKeySet();\n        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {\n            var mutation = _a[_i];\n            keySet = keySet.add(mutation.key);\n        }\n        return keySet;\n    };\n    MutationBatch.prototype.isEqual = function (other) {\n        return (this.batchId === other.batchId &&\n            arrayEquals(this.mutations, other.mutations));\n    };\n    /**\n     * Returns true if this mutation batch has already been removed from the\n     * mutation queue.\n     *\n     * Note that not all implementations of the MutationQueue necessarily use\n     * tombstones as part of their implementation and generally speaking no code\n     * outside the mutation queues should really care about this.\n     */\n    MutationBatch.prototype.isTombstone = function () {\n        return this.mutations.length === 0;\n    };\n    /** Converts this batch into a tombstone */\n    MutationBatch.prototype.toTombstone = function () {\n        return new MutationBatch(this.batchId, this.localWriteTime, []);\n    };\n    return MutationBatch;\n}());\n\n/** The result of applying a mutation batch to the backend. */\nvar mutation_batch_MutationBatchResult = /** @class */ (function () {\n    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, \n    /**\n     * A pre-computed mapping from each mutated document to the resulting\n     * version.\n     */\n    docVersions) {\n        this.batch = batch;\n        this.commitVersion = commitVersion;\n        this.mutationResults = mutationResults;\n        this.streamToken = streamToken;\n        this.docVersions = docVersions;\n    }\n    /**\n     * Creates a new MutationBatchResult for the given batch and results. There\n     * must be one result for each mutation in the batch. This static factory\n     * caches a document=>version mapping (docVersions).\n     */\n    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {\n        assert(batch.mutations.length === results.length, 'Mutations sent ' +\n            batch.mutations.length +\n            ' must equal results received ' +\n            results.length);\n        var versionMap = documentVersionMap();\n        var mutations = batch.mutations;\n        for (var i = 0; i < mutations.length; i++) {\n            var version = results[i].version;\n            if (version === null) {\n                // deletes don't have a version, so we substitute the commitVersion\n                // of the entire batch.\n                version = commitVersion;\n            }\n            versionMap = versionMap.insert(mutations[i].key, version);\n        }\n        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);\n    };\n    return MutationBatchResult;\n}());\n\n\n//# sourceMappingURL=mutation_batch.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/encoded_resource_path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nfunction encode(path) {\n    var result = '';\n    for (var i = 0; i < path.length; i++) {\n        if (result.length > 0) {\n            result = encodeSeparator(result);\n        }\n        result = encodeSegment(path.get(i), result);\n    }\n    return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n    var result = resultBuf;\n    var length = segment.length;\n    for (var i = 0; i < length; i++) {\n        var c = segment.charAt(i);\n        switch (c) {\n            case '\\0':\n                result += escapeChar + encodedNul;\n                break;\n            case escapeChar:\n                result += escapeChar + encodedEscape;\n                break;\n            default:\n                result += c;\n        }\n    }\n    return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n    return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nfunction decode(path) {\n    // Event the empty path must encode as a path of at least length 2. A path\n    // with exactly 2 must be the empty path.\n    var length = path.length;\n    assert(length >= 2, 'Invalid path ' + path);\n    if (length === 2) {\n        assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');\n        return path_ResourcePath.EMPTY_PATH;\n    }\n    // Escape characters cannot exist past the second-to-last position in the\n    // source value.\n    var lastReasonableEscapeIndex = length - 2;\n    var segments = [];\n    var segmentBuilder = '';\n    for (var start = 0; start < length;) {\n        // The last two characters of a valid encoded path must be a separator, so\n        // there must be an end to this segment.\n        var end = path.indexOf(escapeChar, start);\n        if (end < 0 || end > lastReasonableEscapeIndex) {\n            fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        var next = path.charAt(end + 1);\n        switch (next) {\n            case encodedSeparatorChar:\n                var currentPiece = path.substring(start, end);\n                var segment = void 0;\n                if (segmentBuilder.length === 0) {\n                    // Avoid copying for the common case of a segment that excludes \\0\n                    // and \\001\n                    segment = currentPiece;\n                }\n                else {\n                    segmentBuilder += currentPiece;\n                    segment = segmentBuilder;\n                    segmentBuilder = '';\n                }\n                segments.push(segment);\n                break;\n            case encodedNul:\n                segmentBuilder += path.substring(start, end);\n                segmentBuilder += '\\0';\n                break;\n            case encodedEscape:\n                // The escape character can be used in the output to encode itself.\n                segmentBuilder += path.substring(start, end + 1);\n                break;\n            default:\n                fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        start = end + 2;\n    }\n    return new path_ResourcePath(segments);\n}\n/**\n * Computes the prefix successor of the given path, computed by encode above.\n * A prefix successor is the first key that cannot be prefixed by the given\n * path. It's useful for defining the end of a prefix scan such that all keys\n * in the scan have the same prefix.\n *\n * Note that this is not a general prefix successor implementation, which is\n * tricky to get right with Strings, given that they encode down to UTF-8.\n * Instead this relies on the fact that all paths encoded by this class are\n * always terminated with a separator, and so a successor can always be\n * cheaply computed by incrementing the last character of the path.\n */\nfunction prefixSuccessor(path) {\n    var c = path.charCodeAt(path.length - 1);\n    // TODO(mcg): this really should be a general thing, but not worth it right\n    // now\n    assert(c === 1, 'successor may only operate on paths generated by encode');\n    return path.substring(0, path.length - 1) + String.fromCharCode(c + 1);\n}\n\n//# sourceMappingURL=encoded_resource_path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_schema.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar SCHEMA_VERSION = 1;\n/** Performs database creation and (in the future) upgrades between versions. */\nfunction createOrUpgradeDb(db, oldVersion) {\n    assert(oldVersion === 0, 'Unexpected upgrade from version ' + oldVersion);\n    db.createObjectStore(DbMutationQueue.store, {\n        keyPath: DbMutationQueue.keyPath\n    });\n    // TODO(mikelehen): Get rid of \"as any\" if/when TypeScript fixes their\n    // types. https://github.com/Microsoft/TypeScript/issues/14322\n    db.createObjectStore(DbMutationBatch.store, \n    // tslint:disable-next-line:no-any\n    { keyPath: DbMutationBatch.keyPath });\n    var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, \n    // tslint:disable-next-line:no-any\n    { keyPath: DbTargetDocument.keyPath });\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\n    var targetStore = db.createObjectStore(DbTarget.store, {\n        keyPath: DbTarget.keyPath\n    });\n    // NOTE: This is unique only because the TargetId is the suffix.\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\n    // NOTE: keys for these stores are specified explicitly rather than using a\n    // keyPath.\n    db.createObjectStore(indexeddb_schema_DbDocumentMutation.store);\n    db.createObjectStore(DbRemoteDocument.store);\n    db.createObjectStore(DbOwner.store);\n    db.createObjectStore(DbTargetGlobal.store);\n}\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nvar DbTimestamp = /** @class */ (function () {\n    function DbTimestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n    }\n    return DbTimestamp;\n}());\n\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can be owned by a single tab at a given time. That tab\n * must validate that it is still the owner before every write operation and\n * should regularly write an updated timestamp to prevent other tabs from\n * \"stealing\" ownership of the db.\n */\nvar DbOwner = /** @class */ (function () {\n    function DbOwner(ownerId, leaseTimestampMs) {\n        this.ownerId = ownerId;\n        this.leaseTimestampMs = leaseTimestampMs;\n    }\n    /** Name of the IndexedDb object store. */\n    DbOwner.store = 'owner';\n    return DbOwner;\n}());\n\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nvar DbMutationQueue = /** @class */ (function () {\n    function DbMutationQueue(\n    /**\n     * The normalized user ID to which this queue belongs.\n     */\n    userId, \n    /**\n     * An identifier for the highest numbered batch that has been acknowledged\n     * by the server. All MutationBatches in this queue with batchIds less\n     * than or equal to this value are considered to have been acknowledged by\n     * the server.\n     */\n    lastAcknowledgedBatchId, \n    /**\n     * A stream token that was previously sent by the server.\n     *\n     * See StreamingWriteRequest in datastore.proto for more details about\n     * usage.\n     *\n     * After sending this token, earlier tokens may not be used anymore so\n     * only a single stream token is retained.\n     */\n    lastStreamToken) {\n        this.userId = userId;\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n        this.lastStreamToken = lastStreamToken;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationQueue.store = 'mutationQueues';\n    /** Keys are automatically assigned via the userId property. */\n    DbMutationQueue.keyPath = 'userId';\n    return DbMutationQueue;\n}());\n\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nvar DbMutationBatch = /** @class */ (function () {\n    function DbMutationBatch(\n    /**\n     * The normalized user ID to which this batch belongs.\n     */\n    userId, \n    /**\n     * An identifier for this batch, allocated by the mutation queue in a\n     * monotonically increasing manner.\n     */\n    batchId, \n    /**\n     * The local write time of the batch, stored as milliseconds since the\n     * epoch.\n     */\n    localWriteTimeMs, \n    /**\n     * A list of mutations to apply. All mutations will be applied atomically.\n     *\n     * Mutations are serialized via JsonProtoSerializer.toMutation().\n     */\n    mutations) {\n        this.userId = userId;\n        this.batchId = batchId;\n        this.localWriteTimeMs = localWriteTimeMs;\n        this.mutations = mutations;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationBatch.store = 'mutations';\n    /** Keys are automatically assigned via the userId, batchId properties. */\n    DbMutationBatch.keyPath = ['userId', 'batchId'];\n    return DbMutationBatch;\n}());\n\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nvar indexeddb_schema_DbDocumentMutation = /** @class */ (function () {\n    function DbDocumentMutation() {\n    }\n    /**\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n     * over all of a user's document mutations.\n     */\n    DbDocumentMutation.prefixForUser = function (userId) {\n        return [userId];\n    };\n    /**\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n     * index to iterate over all at document mutations for a given path or lower.\n     */\n    DbDocumentMutation.prefixForPath = function (userId, path) {\n        return [userId, encode(path)];\n    };\n    /**\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\n     * and deleting into the DbDocumentMutations index.\n     */\n    DbDocumentMutation.key = function (userId, path, batchId) {\n        return [userId, encode(path), batchId];\n    };\n    DbDocumentMutation.store = 'documentMutations';\n    /**\n     * Because we store all the useful information for this store in the key,\n     * there is no useful information to store as the value. The raw (unencoded)\n     * path cannot be stored because IndexedDb doesn't store prototype\n     * information.\n     */\n    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n    return DbDocumentMutation;\n}());\n\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nvar DbNoDocument = /** @class */ (function () {\n    function DbNoDocument(path, readTime) {\n        this.path = path;\n        this.readTime = readTime;\n    }\n    return DbNoDocument;\n}());\n\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb. It\n * represents either a cached document (if it exists) or a cached \"no-document\"\n * (if it is known to not exist).\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nvar DbRemoteDocument = /** @class */ (function () {\n    function DbRemoteDocument(\n    /**\n     * Set to an instance of a DbNoDocument if it is known that no document\n     * exists.\n     */\n    noDocument, \n    /**\n     * Set to an instance of a Document if there's a cached version of the\n     * document.\n     */\n    document) {\n        this.noDocument = noDocument;\n        this.document = document;\n    }\n    DbRemoteDocument.store = 'remoteDocuments';\n    return DbRemoteDocument;\n}());\n\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nvar DbTarget = /** @class */ (function () {\n    function DbTarget(\n    /**\n     * An auto-generated sequential numeric identifier for the query.\n     *\n     * Queries are stored using their canonicalId as the key, but these\n     * canonicalIds can be quite long so we additionally assign a unique\n     * queryId which can be used by referenced data structures (e.g.\n     * indexes) to minimize the on-disk cost.\n     */\n    targetId, \n    /**\n     * The canonical string representing this query. This is not unique.\n     */\n    canonicalId, \n    /**\n     * The last readTime received from the Watch Service for this query.\n     *\n     * This is the same value as TargetChange.read_time in the protos.\n     */\n    readTime, \n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data\n     * that matches the query. The resume token essentially identifies a\n     * point in time from which the server should resume sending results.\n     *\n     * This is related to the snapshotVersion in that the resumeToken\n     * effectively also encodes that value, but the resumeToken is opaque\n     * and sometimes encodes additional information.\n     *\n     * A consequence of this is that the resumeToken should be used when\n     * asking the server to reason about where this client is in the watch\n     * stream, but the client should use the snapshotVersion for its own\n     * purposes.\n     *\n     * This is the same value as TargetChange.resume_token in the protos.\n     */\n    resumeToken, \n    /**\n     * A sequence number representing the last time this query was\n     * listened to, used for garbage collection purposes.\n     *\n     * Conventionally this would be a timestamp value, but device-local\n     * clocks are unreliable and they must be able to create new listens\n     * even while disconnected. Instead this should be a monotonically\n     * increasing number that's incremented on each listen call.\n     *\n     * This is different from the queryId since the queryId is an\n     * immutable identifier assigned to the Query on first use while\n     * lastListenSequenceNumber is updated every time the query is\n     * listened to.\n     */\n    lastListenSequenceNumber, \n    /**\n     * The query for this target.\n     *\n     * Because canonical ids are not unique we must store the actual query. We\n     * use the proto to have an object we can persist without having to\n     * duplicate translation logic to and from a `Query` object.\n     */\n    query) {\n        this.targetId = targetId;\n        this.canonicalId = canonicalId;\n        this.readTime = readTime;\n        this.resumeToken = resumeToken;\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\n        this.query = query;\n    }\n    DbTarget.store = 'targets';\n    /** Keys are automatically assigned via the targetId property. */\n    DbTarget.keyPath = 'targetId';\n    /** The name of the queryTargets index. */\n    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n    /**\n     * The index of all canonicalIds to the targets that they match. This is not\n     * a unique mapping because canonicalId does not promise a unique name for all\n     * possible queries, so we append the targetId to make the mapping unique.\n     */\n    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n    return DbTarget;\n}());\n\n/**\n * An object representing an association between a target and a document.\n * Stored in the targetDocument object store to store the documents tracked by a\n * particular target.\n */\nvar DbTargetDocument = /** @class */ (function () {\n    function DbTargetDocument(\n    /**\n     * The targetId identifying a target.\n     */\n    targetId, \n    /**\n     * The path to the document, as encoded in the key.\n     */\n    path) {\n        this.targetId = targetId;\n        this.path = path;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbTargetDocument.store = 'targetDocuments';\n    /** Keys are automatically assigned via the targetId, path properties. */\n    DbTargetDocument.keyPath = ['targetId', 'path'];\n    /** The index name for the reverse index. */\n    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n    /** We also need to create the reverse index for these properties. */\n    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n    return DbTargetDocument;\n}());\n\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nvar DbTargetGlobal = /** @class */ (function () {\n    function DbTargetGlobal(\n    /**\n     * The highest numbered target id across all targets.\n     *\n     * See DbTarget.targetId.\n     */\n    highestTargetId, \n    /**\n     * The highest numbered lastListenSequenceNumber across all targets.\n     *\n     * See DbTarget.lastListenSequenceNumber.\n     */\n    highestListenSequenceNumber, \n    /**\n     * A global snapshot version representing the last consistent snapshot we\n     * received from the backend. This is monotonically increasing and any\n     * snapshots received from the backend prior to this version (e.g. for\n     * targets resumed with a resumeToken) should be suppressed (buffered)\n     * until the backend has caught up to this snapshot version again. This\n     * prevents our cache from ever going backwards in time.\n     */\n    lastRemoteSnapshotVersion) {\n        this.highestTargetId = highestTargetId;\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    /**\n     * The key string used for the single object that exists in the\n     * DbTargetGlobal store.\n     */\n    DbTargetGlobal.key = 'targetGlobalKey';\n    DbTargetGlobal.store = 'targetGlobal';\n    return DbTargetGlobal;\n}());\n\n/**\n * The list of all IndexedDB stored used by the SDK. This is used when creating\n * transactions so that access across all stores is done atomically.\n */\nvar ALL_STORES = [\n    DbMutationQueue.store,\n    DbMutationBatch.store,\n    indexeddb_schema_DbDocumentMutation.store,\n    DbRemoteDocument.store,\n    DbTarget.store,\n    DbOwner.store,\n    DbTargetGlobal.store,\n    DbTargetDocument.store\n];\n\n//# sourceMappingURL=indexeddb_schema.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/simple_db.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar simple_db_LOG_TAG = 'SimpleDb';\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nvar simple_db_SimpleDb = /** @class */ (function () {\n    function SimpleDb(db) {\n        this.db = db;\n    }\n    /** Opens the specified database, creating or upgrading it if necessary. */\n    SimpleDb.openOrCreate = function (name, version, runUpgrade) {\n        assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');\n        debug(simple_db_LOG_TAG, 'Opening database:', name);\n        return new persistence_promise_PersistencePromise(function (resolve, reject) {\n            // TODO(mikelehen): Investigate browser compatibility.\n            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n            // suggests IE9 and older WebKit browsers handle upgrade\n            // differently.\n            var request = window.indexedDB.open(name, version);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(new SimpleDb(db));\n            };\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onupgradeneeded = function (event) {\n                debug(simple_db_LOG_TAG, 'Database \"' + name + '\" requires upgrade from version:', event.oldVersion);\n                // TODO(mikelehen): If/when we need to do an actual data\n                // migration, we'll want to wrap db in a SimpleDb and have the\n                // runUpgrade function return a PersistencePromise, since we'll\n                // likely need to do async reads and writes. For now we're\n                // cheating and just passing the raw IndexedDB in, since\n                // createObjectStore(), etc. are synchronous.\n                var db = event.target.result;\n                runUpgrade(db, event.oldVersion);\n            };\n        }).toPromise();\n    };\n    /** Deletes the specified database. */\n    SimpleDb.delete = function (name) {\n        debug(simple_db_LOG_TAG, 'Removing database:', name);\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n    };\n    /** Returns true if IndexedDB is available in the current environment. */\n    SimpleDb.isAvailable = function () {\n        if (typeof window === 'undefined' || window.indexedDB == null) {\n            return false;\n        }\n        // We extensively use indexed array values and compound keys,\n        // which IE and Edge do not support. However, they still have indexedDB\n        // defined on the window, so we need to check for them here and make sure\n        // to return that persistence is not enabled for those browsers.\n        // For tracking support of this feature, see here:\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n        // Check the UA string to find out the browser.\n        var ua = window.navigator.userAgent;\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        if (ua.indexOf('MSIE ') > 0 ||\n            ua.indexOf('Trident/') > 0 ||\n            ua.indexOf('Edge/') > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {\n        var transaction = new simple_db_SimpleDbTransaction(this.db, mode, objectStores);\n        var transactionFnResult = transactionFn(transaction)\n            .catch(function (error) {\n            // Abort the transaction if there was an\n            // error.\n            transaction.abort();\n            return persistence_promise_PersistencePromise.reject(error);\n        })\n            .toPromise();\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        return transaction.completionPromise.then(function () { return transactionFnResult; });\n    };\n    SimpleDb.prototype.close = function () {\n        this.db.close();\n    };\n    return SimpleDb;\n}());\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nvar IterationController = /** @class */ (function () {\n    function IterationController(dbCursor) {\n        this.dbCursor = dbCursor;\n        this.shouldStop = false;\n        this.nextKey = null;\n    }\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\n        get: function () {\n            return this.shouldStop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n        get: function () {\n            return this.nextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\n        set: function (value) {\n            this.dbCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This function can be called to stop iteration at any point.\n     */\n    IterationController.prototype.done = function () {\n        this.shouldStop = true;\n    };\n    /**\n     * This function can be called to skip to that next key, which could be\n     * an index or a primary key.\n     */\n    IterationController.prototype.skip = function (key) {\n        this.nextKey = key;\n    };\n    /**\n     * Delete the current cursor value from the object store.\n     *\n     * NOTE: You CANNOT do this with a keysOnly query.\n     */\n    IterationController.prototype.delete = function () {\n        return wrapRequest(this.dbCursor.delete());\n    };\n    return IterationController;\n}());\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nvar simple_db_SimpleDbTransaction = /** @class */ (function () {\n    function SimpleDbTransaction(db, mode, objectStoresNames) {\n        var _this = this;\n        this.aborted = false;\n        this.transaction = db.transaction(objectStoresNames, mode);\n        this.completionPromise = new Promise(function (resolve, reject) {\n            // We consider aborting to be \"normal\" and just resolve the promise.\n            // May need to revisit if/when we actually need to abort transactions.\n            _this.transaction.onabort = _this.transaction.oncomplete = function (event) {\n                resolve();\n            };\n            _this.transaction.onerror = function (event) {\n                reject(event.target.error);\n            };\n        });\n    }\n    SimpleDbTransaction.prototype.abort = function () {\n        if (!this.aborted) {\n            debug(simple_db_LOG_TAG, 'Aborting transaction.');\n            this.aborted = true;\n            this.transaction.abort();\n        }\n    };\n    /**\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n     * operations performed on the SimpleDbStore happen within the context of this\n     * transaction and it cannot be used anymore once the transaction is\n     * completed.\n     *\n     * Note that we can't actually enforce that the KeyType and ValueType are\n     * correct, but they allow type safety through the rest of the consuming code.\n     */\n    SimpleDbTransaction.prototype.store = function (storeName) {\n        var store = this.transaction.objectStore(storeName);\n        assert(!!store, 'Object store not part of transaction: ' + storeName);\n        return new simple_db_SimpleDbStore(store);\n    };\n    return SimpleDbTransaction;\n}());\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nvar simple_db_SimpleDbStore = /** @class */ (function () {\n    function SimpleDbStore(store) {\n        this.store = store;\n    }\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\n        var request;\n        if (value !== undefined) {\n            debug(simple_db_LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n            request = this.store.put(value, keyOrValue);\n        }\n        else {\n            debug(simple_db_LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n            request = this.store.put(keyOrValue);\n        }\n        return wrapRequest(request);\n    };\n    /**\n     * Gets the object with the specified key from the specified store, or null\n     * if no object exists with the specified key.\n     *\n     * @key The key of the object to get.\n     * @return The object with the specified key or null if no object exists.\n     */\n    SimpleDbStore.prototype.get = function (key) {\n        var _this = this;\n        var request = this.store.get(key);\n        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n        return wrapRequest(request).next(function (result) {\n            // Normalize nonexistence to null.\n            if (result === undefined) {\n                result = null;\n            }\n            debug(simple_db_LOG_TAG, 'GET', _this.store.name, key, result);\n            return result;\n        });\n    };\n    SimpleDbStore.prototype.delete = function (key) {\n        debug(simple_db_LOG_TAG, 'DELETE', this.store.name, key);\n        var request = this.store.delete(key);\n        return wrapRequest(request);\n    };\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n        var cursor = this.cursor(this.options(indexOrRange, range));\n        var results = [];\n        return this.iterateCursor(cursor, function (key, value) {\n            results.push(value);\n        }).next(function () {\n            return results;\n        });\n    };\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n        debug(simple_db_LOG_TAG, 'DELETE ALL', this.store.name);\n        var options = this.options(indexOrRange, range);\n        options.keysOnly = false;\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, function (key, value, control) {\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\n            // calling delete() on an object store with a single key\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n            // however, this requires us *not* to use a keysOnly cursor\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n            // may want to compare the performance of each method.\n            return control.delete();\n        });\n    };\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n        var options;\n        if (!callback) {\n            options = {};\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, callback);\n    };\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n        var results = [];\n        return new persistence_promise_PersistencePromise(function (resolve, reject) {\n            cursorRequest.onerror = function (event) {\n                reject(event.target.error);\n            };\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                    resolve();\n                    return;\n                }\n                var controller = new IterationController(cursor);\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\n                if (userResult instanceof persistence_promise_PersistencePromise) {\n                    results.push(userResult);\n                }\n                if (controller.isDone) {\n                    resolve();\n                }\n                else if (controller.skipToKey === null) {\n                    cursor.continue();\n                }\n                else {\n                    cursor.continue(controller.skipToKey);\n                }\n            };\n        }).next(function () {\n            return persistence_promise_PersistencePromise.waitFor(results);\n        });\n    };\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\n        var indexName = undefined;\n        if (indexOrRange !== undefined) {\n            if (typeof indexOrRange === 'string') {\n                indexName = indexOrRange;\n            }\n            else {\n                assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');\n                range = indexOrRange;\n            }\n        }\n        return { index: indexName, range: range };\n    };\n    SimpleDbStore.prototype.cursor = function (options) {\n        var direction = 'next';\n        if (options.reverse) {\n            direction = 'prev';\n        }\n        if (options.index) {\n            var index = this.store.index(options.index);\n            if (options.keysOnly) {\n                return index.openKeyCursor(options.range, direction);\n            }\n            else {\n                return index.openCursor(options.range, direction);\n            }\n        }\n        else {\n            return this.store.openCursor(options.range, direction);\n        }\n    };\n    return SimpleDbStore;\n}());\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n    return new persistence_promise_PersistencePromise(function (resolve, reject) {\n        request.onsuccess = function (event) {\n            var result = event.target.result;\n            resolve(result);\n        };\n        request.onerror = function (event) {\n            reject(event.target.error);\n        };\n    });\n}\n\n//# sourceMappingURL=simple_db.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_mutation_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** A mutation queue for a specific user, backed by IndexedDB. */\nvar indexeddb_mutation_queue_IndexedDbMutationQueue = /** @class */ (function () {\n    function IndexedDbMutationQueue(\n    /**\n     * The normalized userId (e.g. null UID => \"\" userId) used to store /\n     * retrieve mutations.\n     */\n    userId, serializer) {\n        this.userId = userId;\n        this.serializer = serializer;\n        this.garbageCollector = null;\n    }\n    /**\n     * Creates a new mutation queue for the given user.\n     * @param user The user for which to create a mutation queue.\n     * @param serializer The serializer to use when persisting to IndexedDb.\n     */\n    IndexedDbMutationQueue.forUser = function (user, serializer) {\n        // TODO(mcg): Figure out what constraints there are on userIDs\n        // In particular, are there any reserved characters? are empty ids allowed?\n        // For the moment store these together in the same mutations table assuming\n        // that empty userIDs aren't allowed.\n        assert(user.uid !== '', 'UserID must not be an empty string.');\n        var userId = user.isAuthenticated() ? user.uid : '';\n        return new IndexedDbMutationQueue(userId, serializer);\n    };\n    IndexedDbMutationQueue.prototype.start = function (transaction) {\n        var _this = this;\n        return IndexedDbMutationQueue.loadNextBatchIdFromDb(transaction)\n            .next(function (nextBatchId) {\n            _this.nextBatchId = nextBatchId;\n            return mutationQueuesStore(transaction).get(_this.userId);\n        })\n            .next(function (metadata) {\n            if (!metadata) {\n                metadata = new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, \n                /*lastStreamToken=*/ '');\n            }\n            _this.metadata = metadata;\n            // On restart, nextBatchId may end up lower than\n            // lastAcknowledgedBatchId since it's computed from the queue\n            // contents, and there may be no mutations in the queue. In this\n            // case, we need to reset lastAcknowledgedBatchId (which is safe\n            // since the queue must be empty).\n            if (_this.metadata.lastAcknowledgedBatchId >= _this.nextBatchId) {\n                return _this.checkEmpty(transaction).next(function (empty) {\n                    assert(empty, 'Reset nextBatchID is only possible when the queue is empty');\n                    _this.metadata.lastAcknowledgedBatchId = BATCHID_UNKNOWN;\n                    return mutationQueuesStore(transaction).put(_this.metadata);\n                });\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns one larger than the largest batch ID that has been stored. If there\n     * are no mutations returns 0. Note that batch IDs are global.\n     */\n    IndexedDbMutationQueue.loadNextBatchIdFromDb = function (txn) {\n        var maxBatchId = BATCHID_UNKNOWN;\n        return mutationsStore(txn)\n            .iterate({ reverse: true }, function (key, batch, control) {\n            var userId = key[0], batchId = key[1];\n            if (batchId > maxBatchId) {\n                maxBatchId = batch.batchId;\n            }\n            if (userId === '') {\n                // We can't compute a predecessor for the empty string, since it\n                // is lexographically first. That also means that no other\n                // userIds can come before this one, so we can just exit early.\n                control.done();\n            }\n            else {\n                var nextUser = immediatePredecessor(userId);\n                control.skip([nextUser]);\n            }\n        })\n            .next(function () { return maxBatchId + 1; });\n    };\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n        var empty = true;\n        var range = IDBKeyRange.bound(this.keyForBatchId(Number.NEGATIVE_INFINITY), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, value, control) {\n            empty = false;\n            control.done();\n        })\n            .next(function () { return empty; });\n    };\n    IndexedDbMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.nextBatchId);\n    };\n    IndexedDbMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.metadata.lastAcknowledgedBatchId);\n    };\n    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        this.metadata.lastAcknowledgedBatchId = batchId;\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.metadata.lastStreamToken);\n    };\n    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        var _this = this;\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        var batch = new mutation_batch_MutationBatch(batchId, localWriteTime, mutations);\n        var dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n        return mutationsStore(transaction)\n            .put(dbBatch)\n            .next(function () {\n            var promises = [];\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n                var mutation = mutations_1[_i];\n                var indexKey = indexeddb_schema_DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\n                documentMutationsStore(transaction).put(indexKey, indexeddb_schema_DbDocumentMutation.PLACEHOLDER);\n            }\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            return batch;\n        });\n    };\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        var _this = this;\n        return mutationsStore(transaction)\n            .get(this.keyForBatchId(batchId))\n            .next(function (dbBatch) {\n            return dbBatch ? _this.serializer.fromDbMutationBatch(dbBatch) : null;\n        });\n    };\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.lowerBound(this.keyForBatchId(batchId + 1));\n        var foundBatch = null;\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, dbBatch, control) {\n            if (dbBatch.userId === _this.userId) {\n                assert(dbBatch.batchId > batchId, 'Should have found mutation after ' + batchId);\n                foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);\n            }\n            control.done();\n        })\n            .next(function () { return foundBatch; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(batchId));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        // Scan the document-mutation index starting with a prefix starting with\n        // the given documentKey.\n        var indexPrefix = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        var results = [];\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            // Only consider rows matching exactly the specific key of\n            // interest. Note that because we order by path first, and we\n            // order terminators before path separators, we'll encounter all\n            // the index rows for documentKey contiguously. In particular, all\n            // the rows for documentKey will occur before any rows for\n            // documents nested in a subcollection beneath documentKey so we\n            // can stop as soon as we hit any such row.\n            var path = decode(encodedPath);\n            if (userID !== _this.userId || !documentKey.path.isEqual(path)) {\n                control.done();\n                return;\n            }\n            var mutationKey = _this.keyForBatchId(batchID);\n            // Look up the mutation batch in the store.\n            // PORTING NOTE: because iteration is callback driven in the web,\n            // we just look up the key instead of keeping an open iterator\n            // like iOS.\n            return mutationsStore(transaction)\n                .get(mutationKey)\n                .next(function (dbBatch) {\n                if (dbBatch === null) {\n                    fail('Dangling document-mutation reference found: ' +\n                        indexKey +\n                        ' which points to ' +\n                        mutationKey);\n                }\n                results.push(_this.serializer.fromDbMutationBatch(dbBatch));\n            });\n        })\n            .next(function () { return results; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        assert(!query.isDocumentQuery(), \"Document queries shouldn't go down this path\");\n        var queryPath = query.path;\n        var immediateChildrenLength = queryPath.length + 1;\n        // TODO(mcg): Actually implement a single-collection query\n        //\n        // This is actually executing an ancestor query, traversing the whole\n        // subtree below the collection which can be horrifically inefficient for\n        // some structures. The right way to solve this is to implement the full\n        // value index, but that's not in the cards in the near future so this is\n        // the best we can do for the moment.\n        //\n        // Since we don't yet index the actual properties in the mutations, our\n        // current approach is to just return all mutation batches that affect\n        // documents in the collection being queried.\n        var indexPrefix = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, queryPath);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\n        // scan of the main table.\n        var uniqueBatchIDs = new sorted_set_SortedSet(primitiveComparator);\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            var path = decode(encodedPath);\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n                control.done();\n                return;\n            }\n            // Rows with document keys more than one segment longer than the\n            // query path can't be matches. For example, a query on 'rooms'\n            // can't match the document /rooms/abc/messages/xyx.\n            // TODO(mcg): we'll need a different scanner when we implement\n            // ancestor queries.\n            if (path.length !== immediateChildrenLength) {\n                return;\n            }\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        })\n            .next(function () {\n            var results = [];\n            var promises = [];\n            // TODO(rockwood): Implement this using iterate.\n            uniqueBatchIDs.forEach(function (batchID) {\n                var mutationKey = _this.keyForBatchId(batchID);\n                promises.push(mutationsStore(transaction)\n                    .get(mutationKey)\n                    .next(function (mutation) {\n                    if (mutation === null) {\n                        fail('Dangling document-mutation reference found, ' +\n                            'which points to ' +\n                            mutationKey);\n                    }\n                    results.push(_this.serializer.fromDbMutationBatch(mutation));\n                }));\n            });\n            return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return results; });\n        });\n    };\n    IndexedDbMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var txn = mutationsStore(transaction);\n        var indexTxn = documentMutationsStore(transaction);\n        var promises = [];\n        var _loop_1 = function (batch) {\n            var range = IDBKeyRange.only(this_1.keyForBatchId(batch.batchId));\n            var numDeleted = 0;\n            var removePromise = txn.iterate({ range: range }, function (key, value, control) {\n                numDeleted++;\n                return control.delete();\n            });\n            promises.push(removePromise.next(function () {\n                assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +\n                    batch.batchId);\n            }));\n            for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {\n                var mutation = _a[_i];\n                var indexKey = indexeddb_schema_DbDocumentMutation.key(this_1.userId, mutation.key.path, batch.batchId);\n                promises.push(indexTxn.delete(indexKey));\n                if (this_1.garbageCollector !== null) {\n                    this_1.garbageCollector.addPotentialGarbageKey(mutation.key);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            _loop_1(batch);\n        }\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        var _this = this;\n        return this.checkEmpty(txn).next(function (empty) {\n            if (!empty) {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n            // Verify that there are no entries in the documentMutations index if\n            // the queue is empty.\n            var startRange = IDBKeyRange.lowerBound(indexeddb_schema_DbDocumentMutation.prefixForUser(_this.userId));\n            var danglingMutationReferences = [];\n            return documentMutationsStore(txn)\n                .iterate({ range: startRange }, function (key, _, control) {\n                var userID = key[0];\n                if (userID !== _this.userId) {\n                    control.done();\n                    return;\n                }\n                else {\n                    var path = decode(key[1]);\n                    danglingMutationReferences.push(path);\n                }\n            })\n                .next(function () {\n                assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. Dangling keys: ' +\n                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));\n            });\n        });\n    };\n    IndexedDbMutationQueue.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n        var _this = this;\n        var indexKey = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, key.path);\n        var encodedPath = indexKey[1];\n        var startRange = IDBKeyRange.lowerBound(indexKey);\n        var containsKey = false;\n        return documentMutationsStore(txn)\n            .iterate({ range: startRange, keysOnly: true }, function (key, value, control) {\n            var userID = key[0], keyPath = key[1], /*batchID*/ _ = key[2];\n            if (userID === _this.userId && keyPath === encodedPath) {\n                containsKey = true;\n            }\n            control.done();\n        })\n            .next(function () { return containsKey; });\n    };\n    /**\n     * Creates a [userId, batchId] key for use with the DbMutationQueue object\n     * store.\n     */\n    IndexedDbMutationQueue.prototype.keyForBatchId = function (batchId) {\n        return [this.userId, batchId];\n    };\n    return IndexedDbMutationQueue;\n}());\n\nfunction validateStreamToken(token) {\n    assert(typeof token === 'string', 'Persisting non-string stream token not supported.');\n    return token;\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n    return getStore(txn, DbMutationBatch.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n    return getStore(txn, indexeddb_schema_DbDocumentMutation.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n    return getStore(txn, DbMutationQueue.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_mutation_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_query_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\nvar indexeddb_query_cache_IndexedDbQueryCache = /** @class */ (function () {\n    function IndexedDbQueryCache(serializer) {\n        this.serializer = serializer;\n        /**\n         * The last received snapshot version. We store this seperately from the\n         * metadata to avoid the extra conversion to/from DbTimestamp.\n         */\n        this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.MIN;\n        /**\n         * A cached copy of the metadata for the query cache.\n         */\n        this.metadata = new DbTargetGlobal(\n        /*highestTargetId=*/ 0, \n        /*lastListenSequenceNumber=*/ 0, snapshot_version_SnapshotVersion.MIN.toTimestamp());\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n    }\n    IndexedDbQueryCache.prototype.start = function (transaction) {\n        var _this = this;\n        return globalTargetStore(transaction)\n            .get(DbTargetGlobal.key)\n            .next(function (metadata) {\n            if (metadata !== null) {\n                _this.metadata = metadata;\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\n                _this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.fromTimestamp(new timestamp_Timestamp(lastSavedVersion.seconds, lastSavedVersion.nanos));\n            }\n            return persistence_promise_PersistencePromise.resolve();\n        });\n    };\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\n        return this.metadata.highestTargetId;\n    };\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, this.metadata);\n    };\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        var _this = this;\n        var targetId = queryData.targetId;\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\n        if (targetId > this.metadata.highestTargetId) {\n            this.metadata.highestTargetId = targetId;\n            return addedQueryPromise.next(function () {\n                return globalTargetStore(transaction).put(DbTargetGlobal.key, _this.metadata);\n            });\n        }\n        else {\n            return addedQueryPromise;\n        }\n    };\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\n            targetsStore(transaction).delete(queryData.targetId);\n        });\n    };\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\n        var _this = this;\n        // Iterating by the canonicalId may yield more than one result because\n        // canonicalId values are not required to be unique per target. This query\n        // depends on the queryTargets index to be efficent.\n        var canonicalId = query.canonicalId();\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n        var result = null;\n        return targetsStore(transaction)\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\n            var found = _this.serializer.fromDbTarget(value);\n            // After finding a potential match, check that the query is\n            // actually equal to the requested query.\n            if (query.isEqual(found.query)) {\n                result = found;\n                control.done();\n            }\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // Indexeddb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = encode(key.path);\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        var _this = this;\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // IndexedDb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = encode(key.path);\n            promises.push(store.delete([targetId, path]));\n            if (_this.garbageCollector !== null) {\n                _this.garbageCollector.addPotentialGarbageKey(key);\n            }\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        var store = documentTargetStore(txn);\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\n            return store.delete(range);\n        });\n    };\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\n        var _this = this;\n        var store = documentTargetStore(txn);\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\n            // In order to generate garbage events properly, we need to read these\n            // keys before deleting.\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\n                var path = decode(key[1]);\n                var docKey = new document_key_DocumentKey(path);\n                // Paranoid assertion in case the the collector is set to null\n                // during the iteration.\n                assert(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\n            });\n        }\n        else {\n            return persistence_promise_PersistencePromise.resolve();\n        }\n    };\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var store = documentTargetStore(txn);\n        var result = documentKeySet();\n        return store\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\n            var path = decode(key[1]);\n            var docKey = new document_key_DocumentKey(path);\n            result = result.add(docKey);\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\n        assert(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\n        var path = encode(key.path);\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var count = 0;\n        return documentTargetStore(txn)\n            .iterate({\n            index: DbTargetDocument.documentTargetsIndex,\n            keysOnly: true,\n            range: range\n        }, function (key, _, control) {\n            count++;\n            control.done();\n        })\n            .next(function () { return count > 0; });\n    };\n    return IndexedDbQueryCache;\n}());\n\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTarget.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTargetGlobal.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTargetDocument.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction indexeddb_query_cache_getStore(txn, store) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_query_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof document_Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\n\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(DbRemoteDocument.store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n//# sourceMappingURL=indexeddb_remote_document_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_serializer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** Serializer for values stored in the LocalStore. */\nvar local_serializer_LocalSerializer = /** @class */ (function () {\n    function LocalSerializer(remoteSerializer) {\n        this.remoteSerializer = remoteSerializer;\n    }\n    /** Decodes a remote document from storage locally to a Document. */\n    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {\n        if (remoteDoc.document) {\n            return this.remoteSerializer.fromDocument(remoteDoc.document);\n        }\n        else if (remoteDoc.noDocument) {\n            var key = document_key_DocumentKey.fromSegments(remoteDoc.noDocument.path);\n            var readTime = remoteDoc.noDocument.readTime;\n            var timestamp = new timestamp_Timestamp(readTime.seconds, readTime.nanos);\n            return new document_NoDocument(key, snapshot_version_SnapshotVersion.fromTimestamp(timestamp));\n        }\n        else {\n            return fail('Unexpected DbRemoteDocument');\n        }\n    };\n    /** Encodes a document for storage locally. */\n    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {\n        if (maybeDoc instanceof document_Document) {\n            var doc = this.remoteSerializer.toDocument(maybeDoc);\n            return new DbRemoteDocument(null, doc);\n        }\n        else {\n            var path = maybeDoc.key.path.toArray();\n            var timestamp = maybeDoc.version.toTimestamp();\n            var readTime = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n            return new DbRemoteDocument(new DbNoDocument(path, readTime), null);\n        }\n    };\n    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {\n        var _this = this;\n        var serializedMutations = batch.mutations.map(function (m) {\n            return _this.remoteSerializer.toMutation(m);\n        });\n        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toEpochMilliseconds(), serializedMutations);\n    };\n    /** Decodes a DbMutationBatch into a MutationBatch */\n    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {\n        var _this = this;\n        var mutations = dbBatch.mutations.map(function (m) {\n            return _this.remoteSerializer.fromMutation(m);\n        });\n        var timestamp = timestamp_Timestamp.fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n        return new mutation_batch_MutationBatch(dbBatch.batchId, timestamp, mutations);\n    };\n    /** Decodes a DbTarget into QueryData */\n    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {\n        var readTime = new timestamp_Timestamp(dbTarget.readTime.seconds, dbTarget.readTime.nanos);\n        var version = snapshot_version_SnapshotVersion.fromTimestamp(readTime);\n        var query;\n        if (isDocumentQuery(dbTarget.query)) {\n            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n        }\n        else {\n            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n        }\n        return new query_data_QueryData(query, dbTarget.targetId, QueryPurpose.Listen, version, dbTarget.resumeToken);\n    };\n    /** Encodes QueryData into a DbTarget for storage locally. */\n    LocalSerializer.prototype.toDbTarget = function (queryData) {\n        assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' +\n            QueryPurpose.Listen +\n            ' may be stored, got ' +\n            queryData.purpose);\n        var timestamp = queryData.snapshotVersion.toTimestamp();\n        var dbTimestamp = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n        var queryProto;\n        if (queryData.query.isDocumentQuery()) {\n            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n        }\n        else {\n            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n        }\n        assert(typeof queryData.resumeToken === 'string', 'Persisting non-string resume token not supported.');\n        var resumeToken = queryData.resumeToken;\n        // lastListenSequenceNumber is always 0 until we do real GC.\n        return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, 0, queryProto);\n    };\n    return LocalSerializer;\n}());\n\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n    return dbQuery.documents !== undefined;\n}\n\n//# sourceMappingURL=local_serializer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_persistence.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\nvar indexeddb_persistence_LOG_TAG = 'IndexedDbPersistence';\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nvar OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nvar OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nvar ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nvar EXISTING_OWNER_ERROR_MSG = 'There is another tab open with offline' +\n    ' persistence enabled. Only one such tab is allowed at a time. The' +\n    ' other tab must be closed or persistence must be disabled.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +\n    ' IndexedDB or is known to have an incomplete implementation. Offline' +\n    ' persistence has been disabled.';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nvar indexeddb_persistence_IndexedDbPersistence = /** @class */ (function () {\n    function IndexedDbPersistence(prefix, serializer) {\n        this.ownerId = this.generateOwnerId();\n        this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n        this.serializer = new local_serializer_LocalSerializer(serializer);\n        this.localStoragePrefix = prefix;\n    }\n    IndexedDbPersistence.prototype.start = function () {\n        var _this = this;\n        if (!IndexedDbPersistence.isAvailable()) {\n            this.persistenceError = new error_FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n            return Promise.reject(this.persistenceError);\n        }\n        assert(!this.started, 'IndexedDbPersistence double-started!');\n        this.started = true;\n        return simple_db_SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, createOrUpgradeDb)\n            .then(function (db) {\n            _this.simpleDb = db;\n        })\n            .then(function () { return _this.tryAcquireOwnerLease(); })\n            .then(function () {\n            _this.scheduleOwnerLeaseRefreshes();\n            _this.attachWindowUnloadHook();\n        });\n    };\n    IndexedDbPersistence.prototype.shutdown = function () {\n        var _this = this;\n        assert(this.started, 'IndexedDbPersistence shutdown without start!');\n        this.started = false;\n        this.detachWindowUnloadHook();\n        this.stopOwnerLeaseRefreshes();\n        return this.releaseOwnerLease().then(function () {\n            _this.simpleDb.close();\n        });\n    };\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n        return indexeddb_mutation_queue_IndexedDbMutationQueue.forUser(user, this.serializer);\n    };\n    IndexedDbPersistence.prototype.getQueryCache = function () {\n        return new indexeddb_query_cache_IndexedDbQueryCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n        return new indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.runTransaction = function (action, operation) {\n        var _this = this;\n        if (this.persistenceError) {\n            return Promise.reject(this.persistenceError);\n        }\n        debug(indexeddb_persistence_LOG_TAG, 'Starting transaction:', action);\n        // Do all transactions as readwrite against all object stores, since we\n        // are the only reader/writer.\n        return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {\n            // Verify that we still have the owner lease as part of every transaction.\n            return _this.ensureOwnerLease(txn).next(function () { return operation(txn); });\n        });\n    };\n    IndexedDbPersistence.isAvailable = function () {\n        return simple_db_SimpleDb.isAvailable();\n    };\n    /**\n     * Generates a string used as a prefix when storing data in IndexedDB and\n     * LocalStorage.\n     */\n    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {\n        // Use two different prefix formats:\n        //\n        //   * firestore / persistenceKey / projectID . databaseID / ...\n        //   * firestore / persistenceKey / projectID / ...\n        //\n        // projectIDs are DNS-compatible names and cannot contain dots\n        // so there's no danger of collisions.\n        var database = databaseInfo.databaseId.projectId;\n        if (!databaseInfo.databaseId.isDefaultDatabase) {\n            database += '.' + databaseInfo.databaseId.database;\n        }\n        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n    };\n    /**\n     * Acquires the owner lease if there's no valid owner. Else returns a rejected\n     * promise.\n     */\n    IndexedDbPersistence.prototype.tryAcquireOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (!_this.validOwner(dbOwner)) {\n                    var newDbOwner = new DbOwner(_this.ownerId, Date.now());\n                    debug(indexeddb_persistence_LOG_TAG, 'No valid owner. Acquiring owner lease. Current owner:', dbOwner, 'New owner:', newDbOwner);\n                    return store.put('owner', newDbOwner);\n                }\n                else {\n                    debug(indexeddb_persistence_LOG_TAG, 'Valid owner already. Failing. Current owner:', dbOwner);\n                    _this.persistenceError = new error_FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                    return persistence_promise_PersistencePromise.reject(_this.persistenceError);\n                }\n            });\n        });\n    };\n    /** Checks the owner lease and deletes it if we are the current owner. */\n    IndexedDbPersistence.prototype.releaseOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (dbOwner !== null && dbOwner.ownerId === _this.ownerId) {\n                    debug(indexeddb_persistence_LOG_TAG, 'Releasing owner lease.');\n                    return store.delete('owner');\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Checks the owner lease and returns a rejected promise if we are not the\n     * current owner. This should be included in every transaction to guard\n     * against losing the owner lease.\n     */\n    IndexedDbPersistence.prototype.ensureOwnerLease = function (txn) {\n        var _this = this;\n        var store = txn.store(DbOwner.store);\n        return store.get('owner').next(function (dbOwner) {\n            if (dbOwner === null || dbOwner.ownerId !== _this.ownerId) {\n                _this.persistenceError = new error_FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                return persistence_promise_PersistencePromise.reject(_this.persistenceError);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns true if the provided owner exists, has a recent timestamp, and\n     * isn't zombied.\n     *\n     * NOTE: To determine if the owner is zombied, this method reads from\n     * LocalStorage which could be mildly expensive.\n     */\n    IndexedDbPersistence.prototype.validOwner = function (dbOwner) {\n        var now = Date.now();\n        var minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n        var maxAcceptable = now;\n        if (dbOwner === null) {\n            return false; // no owner.\n        }\n        else if (dbOwner.leaseTimestampMs < minAcceptable) {\n            return false; // owner lease has expired.\n        }\n        else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n            log_error('Persistence owner-lease is in the future. Discarding.', dbOwner);\n            return false;\n        }\n        else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n            return false; // owner's tab closed.\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Schedules a recurring timer to update the owner lease timestamp to prevent\n     * other tabs from taking the lease.\n     */\n    IndexedDbPersistence.prototype.scheduleOwnerLeaseRefreshes = function () {\n        var _this = this;\n        // NOTE: This doesn't need to be scheduled on the async queue and doing so\n        // would increase the chances of us not refreshing on time if the queue is\n        // backed up for some reason.\n        this.ownerLeaseRefreshHandle = setInterval(function () {\n            var txResult = _this.runTransaction('Refresh owner timestamp', function (txn) {\n                // NOTE: We don't need to validate the current owner contents, since\n                // runTransaction does that automatically.\n                var store = txn.store(DbOwner.store);\n                return store.put('owner', new DbOwner(_this.ownerId, Date.now()));\n            });\n            txResult.catch(function (reason) {\n                // Probably means we lost the lease. Report the error and stop trying to\n                // refresh the lease.\n                log_error(reason);\n                _this.stopOwnerLeaseRefreshes();\n            });\n        }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n    };\n    IndexedDbPersistence.prototype.stopOwnerLeaseRefreshes = function () {\n        if (this.ownerLeaseRefreshHandle) {\n            clearInterval(this.ownerLeaseRefreshHandle);\n            this.ownerLeaseRefreshHandle = null;\n        }\n    };\n    /**\n     * Attaches a window.unload handler that will synchronously write our\n     * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n     * by tabs trying to acquire the lease to determine that the lease should be\n     * acquired immediately even if the timestamp is recent. This is particularly\n     * important for the refresh case (so the tab correctly re-acquires the owner\n     * lease). LocalStorage is used for this rather than IndexedDb because it is\n     * a synchronous API and so can be used reliably from an unload handler.\n     */\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n        var _this = this;\n        this.windowUnloadHandler = function () {\n            // Record that we're zombied.\n            _this.setZombiedOwnerId(_this.ownerId);\n            // Attempt graceful shutdown (including releasing our owner lease), but\n            // there's no guarantee it will complete.\n            _this.shutdown();\n        };\n        window.addEventListener('unload', this.windowUnloadHandler);\n    };\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n        if (this.windowUnloadHandler) {\n            window.removeEventListener('unload', this.windowUnloadHandler);\n            this.windowUnloadHandler = null;\n        }\n    };\n    /**\n     * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n     * zombied due to their tab closing) from LocalStorage, or null if no such\n     * record exists.\n     */\n    IndexedDbPersistence.prototype.getZombiedOwnerId = function () {\n        try {\n            var zombiedOwnerId = window.localStorage.getItem(this.zombiedOwnerLocalStorageKey());\n            debug(indexeddb_persistence_LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n            return zombiedOwnerId;\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log_error('Failed to get zombie owner id.', e);\n            return null;\n        }\n    };\n    /**\n     * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n     * or, if passed null, deletes any recorded zombied owner.\n     */\n    IndexedDbPersistence.prototype.setZombiedOwnerId = function (zombieOwnerId) {\n        try {\n            if (zombieOwnerId === null) {\n                window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n            }\n            else {\n                window.localStorage.setItem(this.zombiedOwnerLocalStorageKey(), zombieOwnerId);\n            }\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log_error('Failed to set zombie owner id.', e);\n        }\n    };\n    IndexedDbPersistence.prototype.zombiedOwnerLocalStorageKey = function () {\n        return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n    };\n    IndexedDbPersistence.prototype.generateOwnerId = function () {\n        // For convenience, just use an AutoId.\n        return misc_AutoId.newId();\n    };\n    /**\n     * The name of the main (and currently only) IndexedDB database. this name is\n     * appended to the prefix provided to the IndexedDbPersistence constructor.\n     */\n    IndexedDbPersistence.MAIN_DATABASE = 'main';\n    return IndexedDbPersistence;\n}());\n\n\n//# sourceMappingURL=indexeddb_persistence.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_documents_view.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nvar local_documents_view_LocalDocumentsView = /** @class */ (function () {\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.mutationQueue = mutationQueue;\n    }\n    /**\n     * Get the local view of the document identified by `key`.\n     *\n     * @return Local view of the document or null if we don't have any cached\n     * state for it.\n     */\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n        var _this = this;\n        return this.remoteDocumentCache\n            .getEntry(transaction, key)\n            .next(function (remoteDoc) {\n            return _this.computeLocalDocument(transaction, key, remoteDoc);\n        });\n    };\n    /**\n     * Gets the local view of the documents identified by `keys`.\n     *\n     * If we don't have cached state for a document in `keys`, a NoDocument will\n     * be stored for that key in the resulting set.\n     */\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n        var _this = this;\n        var promises = [];\n        var results = maybeDocumentMap();\n        keys.forEach(function (key) {\n            promises.push(_this.getDocument(transaction, key).next(function (maybeDoc) {\n                // TODO(http://b/32275378): Don't conflate missing / deleted.\n                if (!maybeDoc) {\n                    maybeDoc = new document_NoDocument(key, snapshot_version_SnapshotVersion.forDeletedDoc());\n                }\n                results = results.insert(key, maybeDoc);\n            }));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return results; });\n    };\n    /** Performs a query against the local view of all documents. */\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        if (document_key_DocumentKey.isDocumentKey(query.path)) {\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n        }\n        else {\n            return this.getDocumentsMatchingCollectionQuery(transaction, query);\n        }\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n        // Just do a simple document lookup.\n        return this.getDocument(transaction, new document_key_DocumentKey(docPath)).next(function (maybeDoc) {\n            var result = documentMap();\n            if (maybeDoc instanceof document_Document) {\n                result = result.insert(maybeDoc.key, maybeDoc);\n            }\n            return result;\n        });\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {\n        var _this = this;\n        // Query the remote documents and overlay mutations.\n        // TODO(mikelehen): There may be significant overlap between the mutations\n        // affecting these remote documents and the\n        // getAllMutationBatchesAffectingQuery() mutations. Consider optimizing.\n        var results;\n        return this.remoteDocumentCache\n            .getDocumentsMatchingQuery(transaction, query)\n            .next(function (queryResults) {\n            return _this.computeLocalDocuments(transaction, queryResults);\n        })\n            .next(function (promisedResults) {\n            results = promisedResults;\n            // Now use the mutation queue to discover any other documents that may\n            // match the query after applying mutations.\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n        })\n            .next(function (matchingMutationBatches) {\n            var matchingKeys = documentKeySet();\n            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n                var batch = matchingMutationBatches_1[_i];\n                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                    var mutation = _b[_a];\n                    // TODO(mikelehen): PERF: Check if this mutation actually\n                    // affects the query to reduce work.\n                    if (!results.get(mutation.key)) {\n                        matchingKeys = matchingKeys.add(mutation.key);\n                    }\n                }\n            }\n            // Now add in the results for the matchingKeys.\n            var promises = [];\n            matchingKeys.forEach(function (key) {\n                promises.push(_this.getDocument(transaction, key).next(function (doc) {\n                    if (doc instanceof document_Document) {\n                        results = results.insert(doc.key, doc);\n                    }\n                }));\n            });\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            // Finally, filter out any documents that don't actually match\n            // the query.\n            results.forEach(function (key, doc) {\n                if (!query.matches(doc)) {\n                    results = results.remove(key);\n                }\n            });\n            return results;\n        });\n    };\n    /**\n     * Takes a remote document and applies local mutations to generate the local\n     * view of the document.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the document (necessary when remoteDocument\n     *     is null).\n     * @param document The base remote document to apply mutations to or null.\n     */\n    LocalDocumentsView.prototype.computeLocalDocument = function (transaction, documentKey, document) {\n        return this.mutationQueue\n            .getAllMutationBatchesAffectingDocumentKey(transaction, documentKey)\n            .next(function (batches) {\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n                var batch = batches_1[_i];\n                document = batch.applyToLocalView(documentKey, document);\n            }\n            return document;\n        });\n    };\n    /**\n     * Takes a set of remote documents and applies local mutations to generate the\n     * local view of the documents.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documents The base remote documents to apply mutations to.\n     * @return The local view of the documents.\n     */\n    LocalDocumentsView.prototype.computeLocalDocuments = function (transaction, documents) {\n        var _this = this;\n        var promises = [];\n        documents.forEach(function (key, doc) {\n            promises.push(_this.computeLocalDocument(transaction, key, doc).next(function (mutatedDoc) {\n                if (mutatedDoc instanceof document_Document) {\n                    documents = documents.insert(mutatedDoc.key, mutatedDoc);\n                }\n                else if (mutatedDoc instanceof document_NoDocument) {\n                    documents = documents.remove(mutatedDoc.key);\n                }\n                else {\n                    fail('Unknown MaybeDocument: ' + mutatedDoc);\n                }\n            }));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return documents; });\n    };\n    return LocalDocumentsView;\n}());\n\n\n//# sourceMappingURL=local_documents_view.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/remote_document_change_buffer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nvar remote_document_change_buffer_RemoteDocumentChangeBuffer = /** @class */ (function () {\n    function RemoteDocumentChangeBuffer(remoteDocumentCache) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.changes = maybeDocumentMap();\n    }\n    /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {\n        var changes = this.assertChanges();\n        this.changes = changes.insert(maybeDocument.key, maybeDocument);\n    };\n    // NOTE: removeEntry() is not presently necessary and so is omitted.\n    /**\n     * Looks up an entry in the cache. The buffered changes will first be checked,\n     * and if no buffered change applies, this will forward to\n     * `RemoteDocumentCache.getEntry()`.\n     *\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the entry to look up.\n     * @return The cached Document or NoDocument entry, or null if we have nothing\n     * cached.\n     */\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n        var changes = this.assertChanges();\n        var bufferedEntry = changes.get(documentKey);\n        if (bufferedEntry) {\n            return persistence_promise_PersistencePromise.resolve(bufferedEntry);\n        }\n        else {\n            return this.remoteDocumentCache.getEntry(transaction, documentKey);\n        }\n    };\n    /**\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\n     * the provided transaction.\n     */\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n        var _this = this;\n        var changes = this.assertChanges();\n        var promises = [];\n        changes.forEach(function (key, maybeDoc) {\n            promises.push(_this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n        });\n        // We should not be used to buffer any more changes.\n        this.changes = null;\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    /** Helper to assert this.changes is not null and return it. */\n    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {\n        assert(this.changes !== null, 'Changes have already been applied.');\n        return this.changes;\n    };\n    return RemoteDocumentChangeBuffer;\n}());\n\n\n//# sourceMappingURL=remote_document_change_buffer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_store.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar local_store_LOG_TAG = 'LocalStore';\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nvar local_store_LocalStore = /** @class */ (function () {\n    function LocalStore(\n    /** Manages our in-memory or durable persistence. */\n    persistence, initialUser, \n    /**\n     * The garbage collector collects documents that should no longer be\n     * cached (e.g. if they are no longer retained by the above reference sets\n     * and the garbage collector is performing eager collection).\n     */\n    garbageCollector) {\n        this.persistence = persistence;\n        this.garbageCollector = garbageCollector;\n        /**\n         * The set of document references maintained by any local views.\n         */\n        this.localViewReferences = new reference_set_ReferenceSet();\n        /** Maps a targetID to data about its query. */\n        this.targetIds = {};\n        /** Used to generate targetIDs for queries tracked locally. */\n        this.targetIdGenerator = TargetIdGenerator.forLocalStore();\n        /**\n         * A heldBatchResult is a mutation batch result (from a write acknowledgement)\n         * that arrived before the watch stream got notified of a snapshot that\n         * includes the write. So we \"hold\" it until the watch stream catches up. It\n         * ensures that the local write remains visible (latency compensation) and\n         * doesn't temporarily appear reverted because the watch stream is slower than\n         * the write stream and so wasn't reflecting it.\n         *\n         * NOTE: Eventually we want to move this functionality into the remote store.\n         */\n        this.heldBatchResults = [];\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\n        this.queryCache = persistence.getQueryCache();\n        this.localDocuments = new local_documents_view_LocalDocumentsView(this.remoteDocuments, this.mutationQueue);\n        this.garbageCollector.addGarbageSource(this.localViewReferences);\n        this.garbageCollector.addGarbageSource(this.queryCache);\n        this.garbageCollector.addGarbageSource(this.mutationQueue);\n    }\n    /** Performs any initial startup actions required by the local store. */\n    LocalStore.prototype.start = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Start LocalStore', function (txn) {\n            return _this.startMutationQueue(txn).next(function () { return _this.startQueryCache(txn); });\n        });\n    };\n    /**\n     * Tells the LocalStore that the currently authenticated user has changed.\n     *\n     * In response the local store switches the mutation queue to the new user and\n     * returns any resulting document changes.\n     */\n    LocalStore.prototype.handleUserChange = function (user) {\n        var _this = this;\n        return this.persistence.runTransaction('Handle user change', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return _this.mutationQueue\n                .getAllMutationBatches(txn)\n                .next(function (promisedOldBatches) {\n                oldBatches = promisedOldBatches;\n                _this.garbageCollector.removeGarbageSource(_this.mutationQueue);\n                _this.mutationQueue = _this.persistence.getMutationQueue(user);\n                _this.garbageCollector.addGarbageSource(_this.mutationQueue);\n                return _this.startMutationQueue(txn);\n            })\n                .next(function () {\n                // Recreate our LocalDocumentsView using the new\n                // MutationQueue.\n                _this.localDocuments = new local_documents_view_LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue);\n                return _this.mutationQueue.getAllMutationBatches(txn);\n            })\n                .next(function (newBatches) {\n                // Union the old/new changed keys.\n                var changedKeys = documentKeySet();\n                for (var _i = 0, _a = [oldBatches, newBatches]; _i < _a.length; _i++) {\n                    var batches = _a[_i];\n                    for (var _b = 0, batches_1 = batches; _b < batches_1.length; _b++) {\n                        var batch = batches_1[_b];\n                        for (var _c = 0, _d = batch.mutations; _c < _d.length; _c++) {\n                            var mutation = _d[_c];\n                            changedKeys = changedKeys.add(mutation.key);\n                        }\n                    }\n                }\n                // Return the set of all (potentially) changed documents as the\n                // result of the user change.\n                return _this.localDocuments.getDocuments(txn, changedKeys);\n            });\n        });\n    };\n    LocalStore.prototype.startQueryCache = function (txn) {\n        var _this = this;\n        return this.queryCache.start(txn).next(function () {\n            var targetId = _this.queryCache.getHighestTargetId();\n            _this.targetIdGenerator = TargetIdGenerator.forLocalStore(targetId);\n        });\n    };\n    LocalStore.prototype.startMutationQueue = function (txn) {\n        var _this = this;\n        return this.mutationQueue\n            .start(txn)\n            .next(function () {\n            // If we have any leftover mutation batch results from a prior run,\n            // just drop them.\n            // TODO(http://b/33446471): We probably need to repopulate\n            // heldBatchResults or similar instead, but that is not\n            // straightforward since we're not persisting the write ack versions.\n            _this.heldBatchResults = [];\n            return _this.mutationQueue.getHighestAcknowledgedBatchId(txn);\n        })\n            .next(function (highestAck) {\n            // TODO(mikelehen): This is the only usage of\n            // getAllMutationBatchesThroughBatchId(). Consider removing it in\n            // favor of a getAcknowledgedBatches() method.\n            if (highestAck !== BATCHID_UNKNOWN) {\n                return _this.mutationQueue.getAllMutationBatchesThroughBatchId(txn, highestAck);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve([]);\n            }\n        })\n            .next(function (ackedBatches) {\n            if (ackedBatches.length > 0) {\n                return _this.mutationQueue.removeMutationBatches(txn, ackedBatches);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /* Accept locally generated Mutations and commit them to storage. */\n    LocalStore.prototype.localWrite = function (mutations) {\n        var _this = this;\n        return this.persistence.runTransaction('Locally write mutations', function (txn) {\n            var batch;\n            var localWriteTime = timestamp_Timestamp.now();\n            return _this.mutationQueue\n                .addMutationBatch(txn, localWriteTime, mutations)\n                .next(function (promisedBatch) {\n                batch = promisedBatch;\n                // TODO(koss): This is doing an N^2 update by replaying ALL the\n                // mutations on each document (instead of just the ones added) in\n                // this batch.\n                var keys = batch.keys();\n                return _this.localDocuments.getDocuments(txn, keys);\n            })\n                .next(function (changedDocuments) {\n                return { batchId: batch.batchId, changes: changedDocuments };\n            });\n        });\n    };\n    /**\n     * Acknowledge the given batch.\n     *\n     * On the happy path when a batch is acknowledged, the local store will\n     *\n     *  + remove the batch from the mutation queue;\n     *  + apply the changes to the remote document cache;\n     *  + recalculate the latency compensated view implied by those changes (there\n     *    may be mutations in the queue that affect the documents but haven't been\n     *    acknowledged yet); and\n     *  + give the changed documents back the sync engine\n     *\n     * @returns The resulting (modified) documents.\n     */\n    LocalStore.prototype.acknowledgeBatch = function (batchResult) {\n        var _this = this;\n        return this.persistence.runTransaction('Acknowledge batch', function (txn) {\n            var affected;\n            return _this.mutationQueue\n                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n                .next(function () {\n                if (_this.shouldHoldBatchResult(batchResult.commitVersion)) {\n                    _this.heldBatchResults.push(batchResult);\n                    affected = documentKeySet();\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n                else {\n                    var documentBuffer_1 = new remote_document_change_buffer_RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseBatchResults(txn, [batchResult], documentBuffer_1).next(function (promisedAffectedKeys) {\n                        affected = promisedAffectedKeys;\n                        return documentBuffer_1.apply(txn);\n                    });\n                }\n            })\n                .next(function () {\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affected);\n            });\n        });\n    };\n    /**\n     * Remove mutations from the MutationQueue for the specified batch;\n     * LocalDocuments will be recalculated.\n     *\n     * @returns The resulting modified documents.\n     */\n    LocalStore.prototype.rejectBatch = function (batchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Reject batch', function (txn) {\n            var toReject;\n            var affectedKeys;\n            return _this.mutationQueue\n                .lookupMutationBatch(txn, batchId)\n                .next(function (promisedToReject) {\n                assert(promisedToReject != null, 'Attempt to reject nonexistent batch!');\n                toReject = promisedToReject;\n                return _this.mutationQueue\n                    .getHighestAcknowledgedBatchId(txn)\n                    .next(function (lastAcked) {\n                    assert(batchId > lastAcked, \"Acknowledged batches can't be rejected.\");\n                    return toReject;\n                });\n            })\n                .next(function () {\n                return _this.removeMutationBatch(txn, toReject);\n            })\n                .next(function (promisedAffectedKeys) {\n                affectedKeys = promisedAffectedKeys;\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affectedKeys);\n            });\n        });\n    };\n    /** Returns the last recorded stream token for the current user. */\n    LocalStore.prototype.getLastStreamToken = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Get last stream token', function (txn) {\n            return _this.mutationQueue.getLastStreamToken(txn);\n        });\n    };\n    /**\n     * Sets the stream token for the current user without acknowledging any\n     * mutation batch. This is usually only useful after a stream handshake or in\n     * response to an error that requires clearing the stream token.\n     */\n    LocalStore.prototype.setLastStreamToken = function (streamToken) {\n        var _this = this;\n        return this.persistence.runTransaction('Set last stream token', function (txn) {\n            return _this.mutationQueue.setLastStreamToken(txn, streamToken);\n        });\n    };\n    /**\n     * Returns the last consistent snapshot processed (used by the RemoteStore to\n     * determine whether to buffer incoming snapshots from the backend).\n     */\n    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.queryCache.getLastRemoteSnapshotVersion();\n    };\n    /**\n     * Update the \"ground-state\" (remote) documents. We assume that the remote\n     * event reflects any write batches that have been acknowledged or rejected\n     * (i.e. we do not re-apply local mutations to updates from this event).\n     *\n     * LocalDocuments are re-calculated if there are remaining mutations in the\n     * queue.\n     */\n    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        var documentBuffer = new remote_document_change_buffer_RemoteDocumentChangeBuffer(this.remoteDocuments);\n        return this.persistence.runTransaction('Apply remote event', function (txn) {\n            var promises = [];\n            forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                // Do not ref/unref unassigned targetIds - it may lead to leaks.\n                var queryData = _this.targetIds[targetId];\n                if (!queryData)\n                    return;\n                var mapping = change.mapping;\n                if (mapping) {\n                    // First make sure that all references are deleted\n                    if (mapping instanceof ResetMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeysForTargetId(txn, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.documents, targetId);\n                        }));\n                    }\n                    else if (mapping instanceof UpdateMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeys(txn, mapping.removedDocuments, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.addedDocuments, targetId);\n                        }));\n                    }\n                    else {\n                        return fail('Unknown mapping type: ' + JSON.stringify(mapping));\n                    }\n                }\n                // Update the resume token if the change includes one. Don't clear\n                // any preexisting value.\n                var resumeToken = change.resumeToken;\n                if (resumeToken.length > 0) {\n                    queryData = queryData.update({\n                        resumeToken: resumeToken,\n                        snapshotVersion: change.snapshotVersion\n                    });\n                    _this.targetIds[targetId] = queryData;\n                    promises.push(_this.queryCache.addQueryData(txn, queryData));\n                }\n            });\n            var changedDocKeys = documentKeySet();\n            remoteEvent.documentUpdates.forEach(function (key, doc) {\n                changedDocKeys = changedDocKeys.add(key);\n                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {\n                    // Make sure we don't apply an old document version to the remote\n                    // cache, though we make an exception for SnapshotVersion.MIN which\n                    // can happen for manufactured events (e.g. in the case of a limbo\n                    // document resolution failing).\n                    if (existingDoc == null ||\n                        doc.version.isEqual(snapshot_version_SnapshotVersion.MIN) ||\n                        doc.version.compareTo(existingDoc.version) >= 0) {\n                        documentBuffer.addEntry(doc);\n                    }\n                    else {\n                        debug(local_store_LOG_TAG, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n                    }\n                    // The document might be garbage because it was unreferenced by\n                    // everything. Make sure to mark it as garbage if it is...\n                    _this.garbageCollector.addPotentialGarbageKey(key);\n                }));\n            });\n            // HACK: The only reason we allow a null snapshot version is so that we\n            // can synthesize remote events when we get permission denied errors while\n            // trying to resolve the state of a locally cached document that is in\n            // limbo.\n            var lastRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion();\n            var remoteVersion = remoteEvent.snapshotVersion;\n            if (!remoteVersion.isEqual(snapshot_version_SnapshotVersion.MIN)) {\n                assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +\n                    remoteVersion +\n                    ' < ' +\n                    lastRemoteVersion);\n                promises.push(_this.queryCache.setLastRemoteSnapshotVersion(txn, remoteVersion));\n            }\n            var releasedWriteKeys;\n            return persistence_promise_PersistencePromise.waitFor(promises)\n                .next(function () { return _this.releaseHeldBatchResults(txn, documentBuffer); })\n                .next(function (promisedReleasedWriteKeys) {\n                releasedWriteKeys = promisedReleasedWriteKeys;\n                return documentBuffer.apply(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, changedDocKeys.unionWith(releasedWriteKeys));\n            });\n        });\n    };\n    /**\n     * Notify local store of the changed views to locally pin documents.\n     */\n    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {\n        var _this = this;\n        return this.persistence.runTransaction('Notify local view changes', function (txn) {\n            var promises = [];\n            var _loop_1 = function (view) {\n                promises.push(_this.queryCache\n                    .getQueryData(txn, view.query)\n                    .next(function (queryData) {\n                    assert(queryData !== null, 'Local view changes contain unallocated query.');\n                    var targetId = queryData.targetId;\n                    _this.localViewReferences.addReferences(view.addedKeys, targetId);\n                    _this.localViewReferences.removeReferences(view.removedKeys, targetId);\n                }));\n            };\n            for (var _i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n                var view = viewChanges_1[_i];\n                _loop_1(view);\n            }\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        });\n    };\n    /**\n     * Gets the mutation batch after the passed in batchId in the mutation queue\n     * or null if empty.\n     * @param afterBatchId If provided, the batch to search after.\n     * @returns The next mutation or null if there wasn't one.\n     */\n    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Get next mutation batch', function (txn) {\n            if (afterBatchId === undefined) {\n                afterBatchId = BATCHID_UNKNOWN;\n            }\n            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n        });\n    };\n    /**\n     * Read the current value of a Document with a given key or null if not\n     * found - used for testing.\n     */\n    LocalStore.prototype.readDocument = function (key) {\n        var _this = this;\n        return this.persistence.runTransaction('read document', function (txn) {\n            return _this.localDocuments.getDocument(txn, key);\n        });\n    };\n    /**\n     * Assigns the given query an internal ID so that its results can be pinned so\n     * they don't get GC'd. A query must be allocated in the local store before\n     * the store can be used to manage its view.\n     */\n    LocalStore.prototype.allocateQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Allocate query', function (txn) {\n            var queryData;\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (cached) {\n                if (cached) {\n                    // This query has been listened to previously, so reuse the\n                    // previous targetID.\n                    // TODO(mcg): freshen last accessed date?\n                    queryData = cached;\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n                else {\n                    var targetId = _this.targetIdGenerator.next();\n                    queryData = new query_data_QueryData(query, targetId, QueryPurpose.Listen);\n                    return _this.queryCache.addQueryData(txn, queryData);\n                }\n            })\n                .next(function () {\n                assert(!_this.targetIds[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);\n                _this.targetIds[queryData.targetId] = queryData;\n                return queryData;\n            });\n        });\n    };\n    /** Unpin all the documents associated with the given query. */\n    LocalStore.prototype.releaseQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Release query', function (txn) {\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (queryData) {\n                assert(queryData != null, 'Tried to release nonexistent query: ' + query);\n                _this.localViewReferences.removeReferencesForId(queryData.targetId);\n                delete _this.targetIds[queryData.targetId];\n                if (_this.garbageCollector.isEager) {\n                    return _this.queryCache.removeQueryData(txn, queryData);\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            })\n                .next(function () {\n                // If this was the last watch target, then we won't get any more\n                // watch snapshots, so we should release any held batch results.\n                if (isEmpty(_this.targetIds)) {\n                    var documentBuffer_2 = new remote_document_change_buffer_RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseHeldBatchResults(txn, documentBuffer_2).next(function () {\n                        documentBuffer_2.apply(txn);\n                    });\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Runs the specified query against all the documents in the local store and\n     * returns the results.\n     */\n    LocalStore.prototype.executeQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Execute query', function (txn) {\n            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);\n        });\n    };\n    /**\n     * Returns the keys of the documents that are associated with the given\n     * target id in the remote table.\n     */\n    LocalStore.prototype.remoteDocumentKeys = function (targetId) {\n        var _this = this;\n        return this.persistence.runTransaction('Remote document keys', function (txn) {\n            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);\n        });\n    };\n    /**\n     * Collect garbage if necessary.\n     * Should be called periodically by Sync Engine to recover resources. The\n     * implementation must guarantee that GC won't happen in other places than\n     * this method call.\n     */\n    LocalStore.prototype.collectGarbage = function () {\n        var _this = this;\n        // Call collectGarbage regardless of whether isGCEnabled so the referenceSet\n        // doesn't continue to accumulate the garbage keys.\n        return this.persistence.runTransaction('Garbage collection', function (txn) {\n            return _this.garbageCollector.collectGarbage(txn).next(function (garbage) {\n                var promises = [];\n                garbage.forEach(function (key) {\n                    promises.push(_this.remoteDocuments.removeEntry(txn, key));\n                });\n                return persistence_promise_PersistencePromise.waitFor(promises);\n            });\n        });\n    };\n    LocalStore.prototype.releaseHeldBatchResults = function (txn, documentBuffer) {\n        var toRelease = [];\n        for (var _i = 0, _a = this.heldBatchResults; _i < _a.length; _i++) {\n            var batchResult = _a[_i];\n            if (!this.isRemoteUpToVersion(batchResult.commitVersion)) {\n                break;\n            }\n            toRelease.push(batchResult);\n        }\n        if (toRelease.length === 0) {\n            return persistence_promise_PersistencePromise.resolve(documentKeySet());\n        }\n        else {\n            this.heldBatchResults.splice(0, toRelease.length);\n            return this.releaseBatchResults(txn, toRelease, documentBuffer);\n        }\n    };\n    LocalStore.prototype.isRemoteUpToVersion = function (version) {\n        // If there are no watch targets, then we won't get remote snapshots, and\n        // we are always \"up-to-date.\"\n        var lastRemoteVersion = this.queryCache.getLastRemoteSnapshotVersion();\n        return (version.compareTo(lastRemoteVersion) <= 0 ||\n            isEmpty(this.targetIds));\n    };\n    LocalStore.prototype.shouldHoldBatchResult = function (version) {\n        // Check if watcher isn't up to date or prior results are already held.\n        return (!this.isRemoteUpToVersion(version) || this.heldBatchResults.length > 0);\n    };\n    LocalStore.prototype.releaseBatchResults = function (txn, batchResults, documentBuffer) {\n        var _this = this;\n        var promiseChain = persistence_promise_PersistencePromise.resolve();\n        var _loop_2 = function (batchResult) {\n            promiseChain = promiseChain.next(function () {\n                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);\n            });\n        };\n        for (var _i = 0, batchResults_1 = batchResults; _i < batchResults_1.length; _i++) {\n            var batchResult = batchResults_1[_i];\n            _loop_2(batchResult);\n        }\n        return promiseChain.next(function () {\n            return _this.removeMutationBatches(txn, batchResults.map(function (result) { return result.batch; }));\n        });\n    };\n    LocalStore.prototype.removeMutationBatch = function (txn, batch) {\n        return this.removeMutationBatches(txn, [batch]);\n    };\n    /** Removes all the mutation batches named in the given array. */\n    LocalStore.prototype.removeMutationBatches = function (txn, batches) {\n        var affectedDocs = documentKeySet();\n        for (var _i = 0, batches_2 = batches; _i < batches_2.length; _i++) {\n            var batch = batches_2[_i];\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                affectedDocs = affectedDocs.add(key);\n            }\n        }\n        return this.mutationQueue\n            .removeMutationBatches(txn, batches)\n            .next(function () { return affectedDocs; });\n    };\n    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {\n        var batch = batchResult.batch;\n        var docKeys = batch.keys();\n        var promiseChain = persistence_promise_PersistencePromise.resolve();\n        docKeys.forEach(function (docKey) {\n            promiseChain = promiseChain\n                .next(function () {\n                return documentBuffer.getEntry(txn, docKey);\n            })\n                .next(function (remoteDoc) {\n                var doc = remoteDoc;\n                var ackVersion = batchResult.docVersions.get(docKey);\n                assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');\n                if (!doc || doc.version.compareTo(ackVersion) < 0) {\n                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n                    if (!doc) {\n                        assert(!remoteDoc, 'Mutation batch ' +\n                            batch +\n                            ' applied to document ' +\n                            remoteDoc +\n                            ' resulted in null');\n                    }\n                    else {\n                        documentBuffer.addEntry(doc);\n                    }\n                }\n            });\n        });\n        return promiseChain;\n    };\n    return LocalStore;\n}());\n\n\n//# sourceMappingURL=local_store.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_mutation_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\nvar memory_mutation_queue_MemoryMutationQueue = /** @class */ (function () {\n    function MemoryMutationQueue() {\n        /**\n         * The set of all mutations that have been sent but not yet been applied to\n         * the backend.\n         */\n        this.mutationQueue = [];\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\n        this.nextBatchId = 1;\n        /** The highest acknowledged mutation in the queue. */\n        this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        /** The last received stream token from the server, used to acknowledge which\n         * responses the client has processed. Stream tokens are opaque checkpoint\n         * markers whose only real value is their inclusion in the next request.\n         */\n        this.lastStreamToken = emptyByteString();\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n        /** An ordered mapping between documents and the mutations batch IDs. */\n        this.batchesByDocumentKey = new sorted_set_SortedSet(reference_set_DocReference.compareByKey);\n    }\n    MemoryMutationQueue.prototype.start = function (transaction) {\n        // NOTE: The queue may be shutdown / started multiple times, since we\n        // maintain the queue for the duration of the app session in case a user\n        // logs out / back in. To behave like the LevelDB-backed MutationQueue (and\n        // accommodate tests that expect as much), we reset nextBatchId and\n        // highestAcknowledgedBatchId if the queue is empty.\n        if (this.mutationQueue.length === 0) {\n            this.nextBatchId = 1;\n            this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        }\n        assert(this.highestAcknowledgedBatchId < this.nextBatchId, 'highestAcknowledgedBatchId must be less than the nextBatchId');\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.mutationQueue.length === 0);\n    };\n    MemoryMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.nextBatchId);\n    };\n    MemoryMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.highestAcknowledgedBatchId);\n    };\n    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n        // Verify that the batch in the queue is the one to be acknowledged.\n        var check = this.mutationQueue[batchIndex];\n        assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' +\n            batchId +\n            ', got batch ' +\n            check.batchId);\n        assert(!check.isTombstone(), \"Can't acknowledge a previously removed batch\");\n        this.highestAcknowledgedBatchId = batchId;\n        this.lastStreamToken = streamToken;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.lastStreamToken);\n    };\n    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.lastStreamToken = streamToken;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        assert(mutations.length !== 0, 'Mutation batches should not be empty');\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        if (this.mutationQueue.length > 0) {\n            var prior = this.mutationQueue[this.mutationQueue.length - 1];\n            assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');\n        }\n        var batch = new mutation_batch_MutationBatch(batchId, localWriteTime, mutations);\n        this.mutationQueue.push(batch);\n        // Track references by document key.\n        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n            var mutation = mutations_1[_i];\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new reference_set_DocReference(mutation.key, batchId));\n        }\n        return persistence_promise_PersistencePromise.resolve(batch);\n    };\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        return persistence_promise_PersistencePromise.resolve(this.findMutationBatch(batchId));\n    };\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var size = this.mutationQueue.length;\n        // All batches with batchId <= this.highestAcknowledgedBatchId have been\n        // acknowledged so the first unacknowledged batch after batchID will have a\n        // batchID larger than both of these values.\n        batchId = Math.max(batchId + 1, this.highestAcknowledgedBatchId);\n        // The requested batchId may still be out of range so normalize it to the\n        // start of the queue.\n        var rawIndex = this.indexOfBatchId(batchId);\n        var index = rawIndex < 0 ? 0 : rawIndex;\n        // Finally return the first non-tombstone batch.\n        for (; index < size; index++) {\n            var batch = this.mutationQueue[index];\n            if (!batch.isTombstone()) {\n                return persistence_promise_PersistencePromise.resolve(batch);\n            }\n        }\n        return persistence_promise_PersistencePromise.resolve(null);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var count = this.mutationQueue.length;\n        var endIndex = this.indexOfBatchId(batchId);\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        else if (endIndex >= count) {\n            endIndex = count;\n        }\n        else {\n            // The endIndex is in the queue so increment to pull everything in the\n            // queue including it.\n            endIndex++;\n        }\n        return persistence_promise_PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(endIndex));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        var start = new reference_set_DocReference(documentKey, 0);\n        var end = new reference_set_DocReference(documentKey, Number.POSITIVE_INFINITY);\n        var result = [];\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n            assert(documentKey.isEqual(ref.key), \"Should only iterate over a single key's batches\");\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\n            assert(batch !== null, 'Batches in the index must exist in the main table');\n            result.push(batch);\n        });\n        return persistence_promise_PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        // Use the query path as a prefix for testing if a document matches the\n        // query.\n        var prefix = query.path;\n        var immediateChildrenPathLength = prefix.length + 1;\n        // Construct a document reference for actually scanning the index. Unlike\n        // the prefix the document key in this reference must have an even number of\n        // segments. The empty segment can be used a suffix of the query path\n        // because it precedes all other segments in an ordered traversal.\n        var startPath = prefix;\n        if (!document_key_DocumentKey.isDocumentKey(startPath)) {\n            startPath = startPath.child('');\n        }\n        var start = new reference_set_DocReference(new document_key_DocumentKey(startPath), 0);\n        // Find unique batchIDs referenced by all documents potentially matching the\n        // query.\n        var uniqueBatchIDs = new sorted_set_SortedSet(primitiveComparator);\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\n            var rowKeyPath = ref.key.path;\n            if (!prefix.isPrefixOf(rowKeyPath)) {\n                return false;\n            }\n            else {\n                // Rows with document keys more than one segment longer than the query\n                // path can't be matches. For example, a query on 'rooms' can't match\n                // the document /rooms/abc/messages/xyx.\n                // TODO(mcg): we'll need a different scanner when we implement\n                // ancestor queries.\n                if (rowKeyPath.length === immediateChildrenPathLength) {\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n                }\n                return true;\n            }\n        }, start);\n        // Construct an array of matching batches, sorted by batchID to ensure that\n        // multiple mutations affecting the same document key are applied in order.\n        var result = [];\n        uniqueBatchIDs.forEach(function (batchId) {\n            var batch = _this.findMutationBatch(batchId);\n            if (batch !== null) {\n                result.push(batch);\n            }\n        });\n        return persistence_promise_PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var batchCount = batches.length;\n        assert(batchCount > 0, 'Should not remove mutations when none exist.');\n        var firstBatchId = batches[0].batchId;\n        var queueCount = this.mutationQueue.length;\n        // Find the position of the first batch for removal. This need not be the\n        // first entry in the queue.\n        var startIndex = this.indexOfExistingBatchId(firstBatchId, 'removed');\n        assert(this.mutationQueue[startIndex].batchId === firstBatchId, 'Removed batches must exist in the queue');\n        // Check that removed batches are contiguous (while excluding tombstones).\n        var batchIndex = 1;\n        var queueIndex = startIndex + 1;\n        while (batchIndex < batchCount && queueIndex < queueCount) {\n            var batch = this.mutationQueue[queueIndex];\n            if (batch.isTombstone()) {\n                queueIndex++;\n                continue;\n            }\n            assert(batch.batchId === batches[batchIndex].batchId, 'Removed batches must be contiguous in the queue');\n            batchIndex++;\n            queueIndex++;\n        }\n        // Only actually remove batches if removing at the front of the queue.\n        // Previously rejected batches may have left tombstones in the queue, so\n        // expand the removal range to include any tombstones.\n        if (startIndex === 0) {\n            for (; queueIndex < queueCount; queueIndex++) {\n                var batch = this.mutationQueue[queueIndex];\n                if (!batch.isTombstone()) {\n                    break;\n                }\n            }\n            var length_1 = queueIndex - startIndex;\n            this.mutationQueue.splice(startIndex, length_1);\n        }\n        else {\n            // Mark the tombstones\n            for (var i = startIndex; i < queueIndex; i++) {\n                this.mutationQueue[i] = this.mutationQueue[i].toTombstone();\n            }\n        }\n        var references = this.batchesByDocumentKey;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            var batchId = batch.batchId;\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                if (this.garbageCollector !== null) {\n                    this.garbageCollector.addPotentialGarbageKey(key);\n                }\n                var ref = new reference_set_DocReference(key, batchId);\n                references = references.delete(ref);\n            }\n        }\n        this.batchesByDocumentKey = references;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n        var ref = new reference_set_DocReference(key, 0);\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n        return persistence_promise_PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n    };\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        if (this.mutationQueue.length === 0) {\n            assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');\n        }\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    /**\n     * A private helper that collects all the mutations batches in the queue up to\n     * but not including the given endIndex. All tombstones in the queue are\n     * excluded.\n     */\n    MemoryMutationQueue.prototype.getAllLiveMutationBatchesBeforeIndex = function (endIndex) {\n        var result = [];\n        for (var i = 0; i < endIndex; i++) {\n            var batch = this.mutationQueue[i];\n            if (!batch.isTombstone()) {\n                result.push(batch);\n            }\n        }\n        return result;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue and asserts that\n     * the resulting index is within the bounds of the queue.\n     *\n     * @param batchId The batchId to search for\n     * @param action A description of what the caller is doing, phrased in passive\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n     */\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n        var index = this.indexOfBatchId(batchId);\n        assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);\n        return index;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue. This operation\n     * is O(1).\n     *\n     * @return The computed index of the batch with the given batchId, based on\n     * the state of the queue. Note this index can be negative if the requested\n     * batchId has already been remvoed from the queue or past the end of the\n     * queue if the batchId is larger than the last added batch.\n     */\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n        if (this.mutationQueue.length === 0) {\n            // As an index this is past the end of the queue\n            return 0;\n        }\n        // Examine the front of the queue to figure out the difference between the\n        // batchId and indexes in the array. Note that since the queue is ordered\n        // by batchId, if the first batch has a larger batchId then the requested\n        // batchId doesn't exist in the queue.\n        var firstBatchId = this.mutationQueue[0].batchId;\n        return batchId - firstBatchId;\n    };\n    /**\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\n     * other functions that uses this code easier to read and more efficent.\n     */\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n        var index = this.indexOfBatchId(batchId);\n        if (index < 0 || index >= this.mutationQueue.length) {\n            return null;\n        }\n        var batch = this.mutationQueue[index];\n        assert(batch.batchId === batchId, 'If found batch must match');\n        return batch.isTombstone() ? null : batch;\n    };\n    return MemoryMutationQueue;\n}());\n\n\n//# sourceMappingURL=memory_mutation_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_query_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar memory_query_cache_MemoryQueryCache = /** @class */ (function () {\n    function MemoryQueryCache() {\n        /**\n         * Maps a query to the data about that query\n         */\n        this.queries = new obj_map_ObjectMap(function (q) { return q.canonicalId(); });\n        /** The last received snapshot version. */\n        this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.MIN;\n        /** The highest numbered target ID encountered. */\n        this.highestTargetId = 0;\n        /**\n         * A ordered bidirectional mapping between documents and the remote target\n         * IDs.\n         */\n        this.references = new reference_set_ReferenceSet();\n    }\n    MemoryQueryCache.prototype.start = function (transaction) {\n        // Nothing to do.\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    MemoryQueryCache.prototype.getHighestTargetId = function () {\n        return this.highestTargetId;\n    };\n    MemoryQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        this.queries.set(queryData.query, queryData);\n        var targetId = queryData.targetId;\n        if (targetId > this.highestTargetId) {\n            this.highestTargetId = targetId;\n        }\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        this.queries.delete(queryData.query);\n        this.references.removeReferencesForId(queryData.targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {\n        var queryData = this.queries.get(query) || null;\n        return persistence_promise_PersistencePromise.resolve(queryData);\n    };\n    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        this.references.addReferences(keys, targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        this.references.removeReferences(keys, targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        this.references.removeReferencesForId(targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var matchingKeys = this.references.referencesForId(targetId);\n        return persistence_promise_PersistencePromise.resolve(matchingKeys);\n    };\n    MemoryQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.references.setGarbageCollector(gc);\n    };\n    MemoryQueryCache.prototype.containsKey = function (txn, key) {\n        return this.references.containsKey(txn, key);\n    };\n    return MemoryQueryCache;\n}());\n\n\n//# sourceMappingURL=memory_query_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_remote_document_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar memory_remote_document_cache_MemoryRemoteDocumentCache = /** @class */ (function () {\n    function MemoryRemoteDocumentCache() {\n        this.docs = maybeDocumentMap();\n    }\n    MemoryRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        this.docs = this.docs.insert(maybeDocument.key, maybeDocument);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        this.docs = this.docs.remove(documentKey);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        return persistence_promise_PersistencePromise.resolve(this.docs.get(documentKey));\n    };\n    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var prefix = new document_key_DocumentKey(query.path.child(''));\n        var iterator = this.docs.getIteratorFrom(prefix);\n        while (iterator.hasNext()) {\n            var _a = iterator.getNext(), key = _a.key, maybeDoc = _a.value;\n            if (!query.path.isPrefixOf(key.path)) {\n                break;\n            }\n            if (maybeDoc instanceof document_Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        }\n        return persistence_promise_PersistencePromise.resolve(results);\n    };\n    return MemoryRemoteDocumentCache;\n}());\n\n\n//# sourceMappingURL=memory_remote_document_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_persistence.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar memory_persistence_LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar memory_persistence_MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new memory_remote_document_cache_MemoryRemoteDocumentCache();\n        this.queryCache = new memory_query_cache_MemoryQueryCache();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                // No durable state to read on startup.\n                assert(!this.started, 'MemoryPersistence double-started!');\n                this.started = true;\n                return [2 /*return*/];\n            });\n        });\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                // No durable state to ensure is closed on shutdown.\n                assert(this.started, 'MemoryPersistence shutdown without start!');\n                this.started = false;\n                return [2 /*return*/];\n            });\n        });\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new memory_mutation_queue_MemoryMutationQueue();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        debug(memory_persistence_LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\n\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n//# sourceMappingURL=memory_persistence.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/no_op_garbage_collector.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar no_op_garbage_collector_NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return persistence_promise_PersistencePromise.resolve(documentKeySet());\n    };\n    return NoOpGarbageCollector;\n}());\n\n\n//# sourceMappingURL=no_op_garbage_collector.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/promise.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\n\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nfunction sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n//# sourceMappingURL=promise.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/async_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * Wellknown \"timer\" IDs used when scheduling delayed operations on the\n * AsyncQueue. These IDs can then be used from tests to check for the presence\n * of operations or to run them early.\n */\nvar TimerId;\n(function (TimerId) {\n    TimerId[TimerId[\"ListenStreamIdle\"] = 0] = \"ListenStreamIdle\";\n    TimerId[TimerId[\"ListenStreamConnection\"] = 1] = \"ListenStreamConnection\";\n    TimerId[TimerId[\"WriteStreamIdle\"] = 2] = \"WriteStreamIdle\";\n    TimerId[TimerId[\"WriteStreamConnection\"] = 3] = \"WriteStreamConnection\";\n})(TimerId || (TimerId = {}));\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n */\nvar async_queue_DelayedOperation = /** @class */ (function () {\n    function DelayedOperation(asyncQueue, timerId, targetTimeMs, op, removalCallback) {\n        this.asyncQueue = asyncQueue;\n        this.timerId = timerId;\n        this.targetTimeMs = targetTimeMs;\n        this.op = op;\n        this.removalCallback = removalCallback;\n        this.deferred = new Deferred();\n        this.then = this.deferred.promise.then.bind(this.deferred.promise);\n        this.catch = this.deferred.promise.catch.bind(this.deferred.promise);\n    }\n    /**\n     * Creates and returns a DelayedOperation that has been scheduled to be\n     * executed on the provided asyncQueue after the provided delayMs.\n     *\n     * @param asyncQueue The queue to schedule the operation on.\n     * @param id A Timer ID identifying the type of operation this is.\n     * @param delayMs The delay (ms) before the operation should be scheduled.\n     * @param op The operation to run.\n     * @param removalCallback A callback to be called synchronously once the\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\n     *   from its delayedOperations list.\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n     *   the DelayedOperation class public.\n     */\n    DelayedOperation.createAndSchedule = function (asyncQueue, timerId, delayMs, op, removalCallback) {\n        var targetTime = Date.now() + delayMs;\n        var delayedOp = new DelayedOperation(asyncQueue, timerId, targetTime, op, removalCallback);\n        delayedOp.start(delayMs);\n        return delayedOp;\n    };\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */\n    DelayedOperation.prototype.start = function (delayMs) {\n        var _this = this;\n        this.timerHandle = setTimeout(function () { return _this.handleDelayElapsed(); }, delayMs);\n    };\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */\n    DelayedOperation.prototype.skipDelay = function () {\n        return this.handleDelayElapsed();\n    };\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */\n    DelayedOperation.prototype.cancel = function (reason) {\n        if (this.timerHandle !== null) {\n            this.clearTimeout();\n            this.deferred.reject(new error_FirestoreError(Code.CANCELLED, 'Operation cancelled' + (reason ? ': ' + reason : '')));\n        }\n    };\n    DelayedOperation.prototype.handleDelayElapsed = function () {\n        var _this = this;\n        this.asyncQueue.enqueue(function () {\n            if (_this.timerHandle !== null) {\n                _this.clearTimeout();\n                return _this.op().then(function (result) {\n                    return _this.deferred.resolve(result);\n                });\n            }\n            else {\n                return Promise.resolve();\n            }\n        });\n    };\n    DelayedOperation.prototype.clearTimeout = function () {\n        if (this.timerHandle !== null) {\n            this.removalCallback(this);\n            clearTimeout(this.timerHandle);\n            this.timerHandle = null;\n        }\n    };\n    return DelayedOperation;\n}());\nvar async_queue_AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        // The last promise in the queue.\n        this.tail = Promise.resolve();\n        // Operations scheduled to be queued in the future. Operations are\n        // automatically removed after they are run or canceled.\n        this.delayedOperations = [];\n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.operationInProgress = false;\n    }\n    /**\n     * Adds a new operation to the queue. Returns a promise that will be resolved\n     * when the promise returned by the new operation is (with its value).\n     */\n    AsyncQueue.prototype.enqueue = function (op) {\n        var _this = this;\n        this.verifyNotFailed();\n        var newTail = this.tail.then(function () {\n            _this.operationInProgress = true;\n            return op()\n                .catch(function (error) {\n                _this.failure = error;\n                _this.operationInProgress = false;\n                var message = error.stack || error.message || '';\n                log_error('INTERNAL UNHANDLED ERROR: ', message);\n                // Escape the promise chain and throw the error globally so that\n                // e.g. any global crash reporting library detects and reports it.\n                // (but not for simulated errors in our tests since this breaks mocha)\n                if (message.indexOf('Firestore Test Simulated Error') < 0) {\n                    setTimeout(function () {\n                        throw error;\n                    }, 0);\n                }\n                // Re-throw the error so that this.tail becomes a rejected Promise and\n                // all further attempts to chain (via .then) will just short-circuit\n                // and return the rejected Promise.\n                throw error;\n            })\n                .then(function (result) {\n                _this.operationInProgress = false;\n                return result;\n            });\n        });\n        this.tail = newTail;\n        return newTail;\n    };\n    /**\n     * Schedules an operation to be queued on the AsyncQueue once the specified\n     * `delayMs` has elapsed. The returned CancelablePromise can be used to cancel\n     * the operation prior to its running.\n     */\n    AsyncQueue.prototype.enqueueAfterDelay = function (timerId, delayMs, op) {\n        var _this = this;\n        this.verifyNotFailed();\n        // While not necessarily harmful, we currently don't expect to have multiple\n        // ops with the same timer id in the queue, so defensively reject them.\n        assert(!this.containsDelayedOperation(timerId), \"Attempted to schedule multiple operations with timer id \" + TimerId[timerId] + \".\");\n        var delayedOp = async_queue_DelayedOperation.createAndSchedule(this, timerId, delayMs, op, function (op) { return _this.removeDelayedOperation(op); });\n        this.delayedOperations.push(delayedOp);\n        return delayedOp;\n    };\n    AsyncQueue.prototype.verifyNotFailed = function () {\n        if (this.failure) {\n            fail('AsyncQueue is already failed: ' +\n                (this.failure.stack || this.failure.message));\n        }\n    };\n    /**\n     * Verifies there's an operation currently in-progress on the AsyncQueue.\n     * Unfortunately we can't verify that the running code is in the promise chain\n     * of that operation, so this isn't a foolproof check, but it should be enough\n     * to catch some bugs.\n     */\n    AsyncQueue.prototype.verifyOperationInProgress = function () {\n        assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');\n    };\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */\n    AsyncQueue.prototype.drain = function () {\n        return this.enqueue(function () { return Promise.resolve(); });\n    };\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */\n    AsyncQueue.prototype.containsDelayedOperation = function (timerId) {\n        return this.delayedOperations.findIndex(function (op) { return op.timerId === timerId; }) >= 0;\n    };\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId If specified, only delayed operations up to and\n     *   including this TimerId will be drained. Throws if no such operation\n     *   exists.\n     * @returns a Promise that resolves once all operations have been run.\n     */\n    AsyncQueue.prototype.runDelayedOperationsEarly = function (lastTimerId) {\n        var _this = this;\n        // Note that draining may generate more delayed ops, so we do that first.\n        return this.drain().then(function () {\n            assert(lastTimerId === undefined || _this.containsDelayedOperation(lastTimerId), \"Attempted to drain to missing operation \" + lastTimerId);\n            // Run ops in the same order they'd run if they ran naturally.\n            _this.delayedOperations.sort(function (a, b) { return a.targetTimeMs - b.targetTimeMs; });\n            for (var _i = 0, _a = _this.delayedOperations; _i < _a.length; _i++) {\n                var op = _a[_i];\n                op.skipDelay();\n                if (lastTimerId !== undefined && op.timerId === lastTimerId) {\n                    break;\n                }\n            }\n            return _this.drain();\n        });\n    };\n    /** Called once a DelayedOperation is run or canceled. */\n    AsyncQueue.prototype.removeDelayedOperation = function (op) {\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n        var index = this.delayedOperations.indexOf(op);\n        assert(index >= 0, 'Delayed operation not found.');\n        this.delayedOperations.splice(index, 1);\n    };\n    return AsyncQueue;\n}());\n\n\n//# sourceMappingURL=async_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/backoff.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar backoff_LOG_TAG = 'ExponentialBackoff';\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar backoff_ExponentialBackoff = /** @class */ (function () {\n    function ExponentialBackoff(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    queue, \n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    timerId, \n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    initialDelayMs, \n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */\n    backoffFactor, \n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */\n    maxDelayMs) {\n        this.queue = queue;\n        this.timerId = timerId;\n        this.initialDelayMs = initialDelayMs;\n        this.backoffFactor = backoffFactor;\n        this.maxDelayMs = maxDelayMs;\n        this.timerPromise = null;\n        this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */\n    ExponentialBackoff.prototype.reset = function () {\n        this.currentBaseMs = 0;\n    };\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n    ExponentialBackoff.prototype.resetToMax = function () {\n        this.currentBaseMs = this.maxDelayMs;\n    };\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */\n    ExponentialBackoff.prototype.backoffAndRun = function (op) {\n        if (this.timerPromise !== null) {\n            this.timerPromise.cancel();\n        }\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        var delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            debug(backoff_LOG_TAG, \"Backing off for \" + delayWithJitterMs + \" ms \" +\n                (\"(base delay: \" + this.currentBaseMs + \" ms)\"));\n        }\n        this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, delayWithJitterMs, op);\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        if (this.currentBaseMs < this.initialDelayMs) {\n            this.currentBaseMs = this.initialDelayMs;\n        }\n        if (this.currentBaseMs > this.maxDelayMs) {\n            this.currentBaseMs = this.maxDelayMs;\n        }\n    };\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\n        return (Math.random() - 0.5) * this.currentBaseMs;\n    };\n    return ExponentialBackoff;\n}());\n\n\n//# sourceMappingURL=backoff.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/persistent_stream.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar persistent_stream_LOG_TAG = 'PersistentStream';\nvar PersistentStreamState;\n(function (PersistentStreamState) {\n    /**\n     * The streaming RPC is not running and there's no error condition.\n     * Calling `start` will start the stream immediately without backoff.\n     * While in this state isStarted will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Initial\"] = 0] = \"Initial\";\n    /**\n     * The stream is starting, and is waiting for an auth token to attach to\n     * the initial request. While in this state, isStarted will return\n     * true but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Auth\"] = 1] = \"Auth\";\n    /**\n     * The streaming RPC is up and running. Requests and responses can flow\n     * freely. Both isStarted and isOpen will return true.\n     */\n    PersistentStreamState[PersistentStreamState[\"Open\"] = 2] = \"Open\";\n    /**\n     * The stream encountered an error. The next start attempt will back off.\n     * While in this state isStarted() will return false.\n     *\n     */\n    PersistentStreamState[PersistentStreamState[\"Error\"] = 3] = \"Error\";\n    /**\n     * An in-between state after an error where the stream is waiting before\n     * re-starting. After\n     * waiting is complete, the stream will try to open. While in this\n     * state isStarted() will return YES but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Backoff\"] = 4] = \"Backoff\";\n    /**\n     * The stream has been explicitly stopped; no further events will be emitted.\n     */\n    PersistentStreamState[PersistentStreamState[\"Stopped\"] = 5] = \"Stopped\";\n})(PersistentStreamState || (PersistentStreamState = {}));\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nvar BACKOFF_INITIAL_DELAY_MS = 1000;\n/** Maximum backoff time in milliseconds */\nvar BACKOFF_MAX_DELAY_MS = 60 * 1000;\nvar BACKOFF_FACTOR = 1.5;\n/** The time a stream stays open after it is marked idle. */\nvar IDLE_TIMEOUT_MS = 60 * 1000;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be `start`ed before messages can\n * be sent and received. The PersistentStream will call the onOpen function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a `start` fail, PersistentStream will call the registered\n * onClose with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nvar persistent_stream_PersistentStream = /** @class */ (function () {\n    function PersistentStream(queue, connectionTimerId, idleTimerId, connection, credentialsProvider) {\n        this.queue = queue;\n        this.idleTimerId = idleTimerId;\n        this.connection = connection;\n        this.credentialsProvider = credentialsProvider;\n        this.inactivityTimerPromise = null;\n        this.stream = null;\n        this.listener = null;\n        this.backoff = new backoff_ExponentialBackoff(queue, connectionTimerId, BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);\n        this.state = PersistentStreamState.Initial;\n    }\n    /**\n     * Returns true if `start` has been called and no error has occurred. True\n     * indicates the stream is open or in the process of opening (which\n     * encompasses respecting backoff, getting auth tokens, and starting the\n     * actual RPC). Use `isOpen` to determine if the stream is open and ready for\n     * outbound requests.\n     */\n    PersistentStream.prototype.isStarted = function () {\n        return (this.state === PersistentStreamState.Backoff ||\n            this.state === PersistentStreamState.Auth ||\n            this.state === PersistentStreamState.Open);\n    };\n    /**\n     * Returns true if the underlying RPC is open (the openHandler has been\n     * called) and the stream is ready for outbound requests.\n     */\n    PersistentStream.prototype.isOpen = function () {\n        return this.state === PersistentStreamState.Open;\n    };\n    /**\n     * Starts the RPC. Only allowed if isStarted returns false. The stream is\n     * not immediately ready for use: onOpen will be invoked when the RPC is ready\n     * for outbound requests, at which point isOpen will return true.\n     *\n     *  When start returns, isStarted will return true.\n     */\n    PersistentStream.prototype.start = function (listener) {\n        if (this.state === PersistentStreamState.Error) {\n            this.performBackoff(listener);\n            return;\n        }\n        assert(this.state === PersistentStreamState.Initial, 'Already started');\n        this.listener = listener;\n        this.auth();\n    };\n    /**\n     * Stops the RPC. This call is idempotent and allowed regardless of the\n     * current isStarted state.\n     *\n     * When stop returns, isStarted and isOpen will both return false.\n     */\n    PersistentStream.prototype.stop = function () {\n        if (this.isStarted()) {\n            this.close(PersistentStreamState.Stopped);\n        }\n    };\n    /**\n     * After an error the stream will usually back off on the next attempt to\n     * start it. If the error warrants an immediate restart of the stream, the\n     * sender can use this to indicate that the receiver should not back off.\n     *\n     * Each error will call the onClose function. That function can decide to\n     * inhibit backoff if required.\n     */\n    PersistentStream.prototype.inhibitBackoff = function () {\n        assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');\n        this.state = PersistentStreamState.Initial;\n        this.backoff.reset();\n    };\n    /**\n     * Marks this stream as idle. If no further actions are performed on the\n     * stream for one minute, the stream will automatically close itself and\n     * notify the stream's onClose() handler with Status.OK. The stream will then\n     * be in a !isStarted() state, requiring the caller to start the stream again\n     * before further use.\n     *\n     * Only streams that are in state 'Open' can be marked idle, as all other\n     * states imply pending network operations.\n     */\n    PersistentStream.prototype.markIdle = function () {\n        var _this = this;\n        // Starts the idle time if we are in state 'Open' and are not yet already\n        // running a timer (in which case the previous idle timeout still applies).\n        if (this.isOpen() && this.inactivityTimerPromise === null) {\n            this.inactivityTimerPromise = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, function () { return _this.handleIdleCloseTimer(); });\n            this.inactivityTimerPromise.catch(function (err) {\n                // When the AsyncQueue gets drained during testing, pending Promises\n                // (including these idle checks) will get rejected. We special-case\n                // these cancelled idle checks to make sure that these specific Promise\n                // rejections are not considered unhandled.\n                assert(err.code === Code.CANCELLED, \"Received unexpected error in idle timeout closure. Expected CANCELLED, but was: \" + err);\n            });\n        }\n    };\n    /** Sends a message to the underlying stream. */\n    PersistentStream.prototype.sendRequest = function (msg) {\n        this.cancelIdleCheck();\n        this.stream.send(msg);\n    };\n    /** Called by the idle timer when the stream should close due to inactivity. */\n    PersistentStream.prototype.handleIdleCloseTimer = function () {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                if (this.isOpen()) {\n                    // When timing out an idle stream there's no reason to force the stream into backoff when\n                    // it restarts so set the stream state to Initial instead of Error.\n                    return [2 /*return*/, this.close(PersistentStreamState.Initial)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /** Marks the stream as active again. */\n    PersistentStream.prototype.cancelIdleCheck = function () {\n        if (this.inactivityTimerPromise) {\n            this.inactivityTimerPromise.cancel();\n            this.inactivityTimerPromise = null;\n        }\n    };\n    /**\n     * Closes the stream and cleans up as necessary:\n     *\n     * * closes the underlying GRPC stream;\n     * * calls the onClose handler with the given 'error';\n     * * sets internal stream state to 'finalState';\n     * * adjusts the backoff timer based on the error\n     *\n     * A new stream can be opened by calling `start` unless `finalState` is set to\n     * `PersistentStreamState.Stopped`.\n     *\n     * @param finalState the intended state of the stream after closing.\n     * @param error the error the connection was closed with.\n     */\n    PersistentStream.prototype.close = function (finalState, error) {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            var listener;\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                assert(finalState === PersistentStreamState.Error || isNullOrUndefined(error), \"Can't provide an error when not in an error state.\");\n                this.cancelIdleCheck();\n                if (finalState !== PersistentStreamState.Error) {\n                    // If this is an intentional close ensure we don't delay our next connection attempt.\n                    this.backoff.reset();\n                }\n                else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n                    // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n                    log_error(error.toString());\n                    log_error('Using maximum backoff delay to prevent overloading the backend.');\n                    this.backoff.resetToMax();\n                }\n                // Clean up the underlying stream because we are no longer interested in events.\n                if (this.stream !== null) {\n                    this.tearDown();\n                    this.stream.close();\n                    this.stream = null;\n                }\n                // This state must be assigned before calling onClose() to allow the callback to\n                // inhibit backoff or otherwise manipulate the state in its non-started state.\n                this.state = finalState;\n                listener = this.listener;\n                // Clear the listener to avoid bleeding of events from the underlying streams.\n                this.listener = null;\n                // If the caller explicitly requested a stream stop, don't notify them of a closing stream (it\n                // could trigger undesirable recovery logic, etc.).\n                if (finalState !== PersistentStreamState.Stopped) {\n                    return [2 /*return*/, listener.onClose(error)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Can be overridden to perform additional cleanup before the stream is closed.\n     * Calling super.tearDown() is not required.\n     */\n    PersistentStream.prototype.tearDown = function () { };\n    PersistentStream.prototype.auth = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');\n        this.state = PersistentStreamState.Auth;\n        this.credentialsProvider.getToken(/*forceRefresh=*/ false).then(function (token) {\n            // Normally we'd have to schedule the callback on the AsyncQueue.\n            // However, the following calls are safe to be called outside the\n            // AsyncQueue since they don't chain asynchronous calls\n            _this.startStream(token);\n        }, function (error) {\n            _this.queue.enqueue(function () { return tslib_es6[\"__awaiter\"](_this, void 0, void 0, function () {\n                var rpcError;\n                return tslib_es6[\"__generator\"](this, function (_a) {\n                    if (this.state !== PersistentStreamState.Stopped) {\n                        rpcError = new error_FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n                        return [2 /*return*/, this.handleStreamClose(rpcError)];\n                    }\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n    };\n    PersistentStream.prototype.startStream = function (token) {\n        var _this = this;\n        if (this.state === PersistentStreamState.Stopped) {\n            // Stream can be stopped while waiting for authorization.\n            return;\n        }\n        assert(this.state === PersistentStreamState.Auth, 'Trying to start stream in a non-auth state');\n        // Helper function to dispatch to AsyncQueue and make sure that any\n        // close will seem instantaneous and events are prevented from being\n        // raised after the close call\n        var dispatchIfStillActive = function (stream, fn) {\n            _this.queue.enqueue(function () { return tslib_es6[\"__awaiter\"](_this, void 0, void 0, function () {\n                return tslib_es6[\"__generator\"](this, function (_a) {\n                    // Only raise events if the stream instance has not changed\n                    if (this.stream === stream) {\n                        return [2 /*return*/, fn()];\n                    }\n                    return [2 /*return*/];\n                });\n            }); });\n        };\n        // Only start stream if listener has not changed\n        if (this.listener !== null) {\n            var currentStream_1 = this.startRpc(token);\n            this.stream = currentStream_1;\n            this.stream.onOpen(function () {\n                dispatchIfStillActive(currentStream_1, function () {\n                    assert(_this.state === PersistentStreamState.Auth, 'Expected stream to be in state auth, but was ' + _this.state);\n                    _this.state = PersistentStreamState.Open;\n                    return _this.listener.onOpen();\n                });\n            });\n            this.stream.onClose(function (error) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.handleStreamClose(error);\n                });\n            });\n            this.stream.onMessage(function (msg) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.onMessage(msg);\n                });\n            });\n        }\n    };\n    PersistentStream.prototype.performBackoff = function (listener) {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Error, 'Should only perform backoff in an error case');\n        this.state = PersistentStreamState.Backoff;\n        this.backoff.backoffAndRun(function () { return tslib_es6[\"__awaiter\"](_this, void 0, void 0, function () {\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                if (this.state === PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for backoff to complete.\n                    return [2 /*return*/];\n                }\n                this.state = PersistentStreamState.Initial;\n                this.start(listener);\n                assert(this.isStarted(), 'PersistentStream should have started');\n                return [2 /*return*/];\n            });\n        }); });\n    };\n    PersistentStream.prototype.handleStreamClose = function (error) {\n        assert(this.isStarted(), \"Can't handle server close on non-started stream\");\n        debug(persistent_stream_LOG_TAG, \"close with error: \" + error);\n        this.stream = null;\n        // In theory the stream could close cleanly, however, in our current model\n        // we never expect this to happen because if we stop a stream ourselves,\n        // this callback will never be called. To prevent cases where we retry\n        // without a backoff accidentally, we set the stream to error in all cases.\n        return this.close(PersistentStreamState.Error, error);\n    };\n    return PersistentStream;\n}());\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the openHandler, any number of listen and\n * unlisten calls calls can be sent to control what changes will be sent from\n * the server for ListenResponses.\n */\nvar persistent_stream_PersistentListenStream = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](PersistentListenStream, _super);\n    function PersistentListenStream(queue, connection, credentials, serializer) {\n        var _this = _super.call(this, queue, TimerId.ListenStreamConnection, TimerId.ListenStreamIdle, connection, credentials) || this;\n        _this.serializer = serializer;\n        return _this;\n    }\n    PersistentListenStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Listen', token);\n    };\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n        // A successful response means the stream is healthy\n        this.backoff.reset();\n        var watchChange = this.serializer.fromWatchChange(watchChangeProto);\n        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);\n        return this.listener.onWatchChange(watchChange, snapshot);\n    };\n    /**\n     * Registers interest in the results of the given query. If the query\n     * includes a resumeToken it will be included in the request. Results that\n     * affect the query will be streamed back as WatchChange messages that\n     * reference the targetId.\n     */\n    PersistentListenStream.prototype.watch = function (queryData) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.addTarget = this.serializer.toTarget(queryData);\n        var labels = this.serializer.toListenRequestLabels(queryData);\n        if (labels) {\n            request.labels = labels;\n        }\n        this.sendRequest(request);\n    };\n    /**\n     * Unregisters interest in the results of the query associated with the\n     * given targetId.\n     */\n    PersistentListenStream.prototype.unwatch = function (targetId) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.removeTarget = targetId;\n        this.sendRequest(request);\n    };\n    return PersistentListenStream;\n}(persistent_stream_PersistentStream));\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nvar persistent_stream_PersistentWriteStream = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](PersistentWriteStream, _super);\n    function PersistentWriteStream(queue, connection, credentials, serializer) {\n        var _this = _super.call(this, queue, TimerId.WriteStreamConnection, TimerId.WriteStreamIdle, connection, credentials) || this;\n        _this.serializer = serializer;\n        _this.handshakeComplete_ = false;\n        return _this;\n    }\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n        /**\n         * Tracks whether or not a handshake has been successfully exchanged and\n         * the stream is ready to accept mutations.\n         */\n        get: function () {\n            return this.handshakeComplete_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Override of PersistentStream.start\n    PersistentWriteStream.prototype.start = function (listener) {\n        this.handshakeComplete_ = false;\n        _super.prototype.start.call(this, listener);\n    };\n    PersistentWriteStream.prototype.tearDown = function () {\n        if (this.handshakeComplete_) {\n            this.writeMutations([]);\n        }\n    };\n    PersistentWriteStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Write', token);\n    };\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\n        // Always capture the last stream token.\n        assert(!!responseProto.streamToken, 'Got a write response without a stream token');\n        this.lastStreamToken = responseProto.streamToken;\n        if (!this.handshakeComplete_) {\n            // The first response is always the handshake response\n            assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');\n            this.handshakeComplete_ = true;\n            return this.listener.onHandshakeComplete();\n        }\n        else {\n            // A successful first write response means the stream is healthy,\n            // Note, that we could consider a successful handshake healthy, however,\n            // the write itself might be causing an error we want to back off from.\n            this.backoff.reset();\n            var results = this.serializer.fromWriteResults(responseProto.writeResults);\n            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);\n            return this.listener.onMutationResult(commitVersion, results);\n        }\n    };\n    /**\n     * Sends an initial streamToken to the server, performing the handshake\n     * required to make the StreamingWrite RPC work. Subsequent\n     * calls should wait until onHandshakeComplete was called.\n     */\n    PersistentWriteStream.prototype.writeHandshake = function () {\n        assert(this.isOpen(), 'Writing handshake requires an opened stream');\n        assert(!this.handshakeComplete_, 'Handshake already completed');\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\n        // stream token on the handshake, ignoring any stream token we might have.\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        this.sendRequest(request);\n    };\n    /** Sends a group of mutations to the Firestore backend to apply. */\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\n        var _this = this;\n        assert(this.isOpen(), 'Writing mutations requires an opened stream');\n        assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');\n        assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');\n        var request = {\n            // Protos are typed with string, but we support UInt8Array on Node\n            // tslint:disable-next-line:no-any\n            streamToken: this.lastStreamToken,\n            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })\n        };\n        this.sendRequest(request);\n    };\n    return PersistentWriteStream;\n}(persistent_stream_PersistentStream));\n\n\n//# sourceMappingURL=persistent_stream.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/datastore.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nvar datastore_Datastore = /** @class */ (function () {\n    function Datastore(queue, connection, credentials, serializer) {\n        this.queue = queue;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.serializer = serializer;\n    }\n    Datastore.prototype.newPersistentWriteStream = function () {\n        return new persistent_stream_PersistentWriteStream(this.queue, this.connection, this.credentials, this.serializer);\n    };\n    Datastore.prototype.newPersistentWatchStream = function () {\n        return new persistent_stream_PersistentListenStream(this.queue, this.connection, this.credentials, this.serializer);\n    };\n    Datastore.prototype.commit = function (mutations) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\n        };\n        return this.invokeRPC('Commit', params).then(function (response) {\n            return _this.serializer.fromWriteResults(response.writeResults);\n        });\n    };\n    Datastore.prototype.lookup = function (keys) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\n        };\n        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {\n            var docs = maybeDocumentMap();\n            response.forEach(function (proto) {\n                var doc = _this.serializer.fromMaybeDocument(proto);\n                docs = docs.insert(doc.key, doc);\n            });\n            var result = [];\n            keys.forEach(function (key) {\n                var doc = docs.get(key);\n                assert(!!doc, 'Missing entity in write response for ' + key);\n                result.push(doc);\n            });\n            return result;\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC. */\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeRPC(rpcName, request, token);\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC with streamed results. */\n    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeStreamingRPC(rpcName, request, token);\n        });\n    };\n    return Datastore;\n}());\n\n\n//# sourceMappingURL=datastore.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/transaction.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar transaction_Transaction = /** @class */ (function () {\n    function Transaction(datastore) {\n        this.datastore = datastore;\n        // The version of each document that was read during this transaction.\n        this.readVersions = documentVersionMap();\n        this.mutations = [];\n        this.committed = false;\n    }\n    Transaction.prototype.recordVersion = function (doc) {\n        var docVersion = doc.version;\n        if (doc instanceof document_NoDocument) {\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            docVersion = snapshot_version_SnapshotVersion.forDeletedDoc();\n        }\n        var existingVersion = this.readVersions.get(doc.key);\n        if (existingVersion !== null) {\n            if (!docVersion.isEqual(existingVersion)) {\n                // This transaction will fail no matter what.\n                throw new error_FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n            }\n        }\n        else {\n            this.readVersions = this.readVersions.insert(doc.key, docVersion);\n        }\n    };\n    Transaction.prototype.lookup = function (keys) {\n        var _this = this;\n        if (this.committed) {\n            return Promise.reject('Transaction has already completed.');\n        }\n        if (this.mutations.length > 0) {\n            return Promise.reject('Transactions lookups are invalid after writes.');\n        }\n        return this.datastore.lookup(keys).then(function (docs) {\n            docs.forEach(function (doc) { return _this.recordVersion(doc); });\n            return docs;\n        });\n    };\n    Transaction.prototype.write = function (mutations) {\n        if (this.committed) {\n            throw new error_FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');\n        }\n        this.mutations = this.mutations.concat(mutations);\n    };\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n    Transaction.prototype.precondition = function (key) {\n        var version = this.readVersions.get(key);\n        if (version) {\n            return mutation_Precondition.updateTime(version);\n        }\n        else {\n            return mutation_Precondition.NONE;\n        }\n    };\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n    Transaction.prototype.preconditionForUpdate = function (key) {\n        var version = this.readVersions.get(key);\n        if (version && version.isEqual(snapshot_version_SnapshotVersion.forDeletedDoc())) {\n            // The document doesn't exist, so fail the transaction.\n            throw new error_FirestoreError(Code.FAILED_PRECONDITION, \"Can't update a document that doesn't exist.\");\n        }\n        else if (version) {\n            // Document exists, base precondition on document update time.\n            return mutation_Precondition.updateTime(version);\n        }\n        else {\n            // Document was not read, so we just use the preconditions for a blind\n            // update.\n            return mutation_Precondition.exists(true);\n        }\n    };\n    Transaction.prototype.set = function (key, data) {\n        this.write(data.toMutations(key, this.precondition(key)));\n    };\n    Transaction.prototype.update = function (key, data) {\n        this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    };\n    Transaction.prototype.delete = function (key) {\n        this.write([new mutation_DeleteMutation(key, this.precondition(key))]);\n        // Since the delete will be applied before all following writes, we need to\n        // ensure that the precondition for the next write will be exists: false.\n        this.readVersions = this.readVersions.insert(key, snapshot_version_SnapshotVersion.forDeletedDoc());\n    };\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var unwritten = this.readVersions;\n        // For each mutation, note that the doc was written.\n        this.mutations.forEach(function (mutation) {\n            unwritten = unwritten.remove(mutation.key);\n        });\n        if (!unwritten.isEmpty()) {\n            return Promise.reject(Error('Every document read in a transaction must also be written.'));\n        }\n        return this.datastore.commit(this.mutations).then(function () {\n            _this.committed = true;\n        });\n    };\n    return Transaction;\n}());\n\n\n//# sourceMappingURL=transaction.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/remote_store.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar remote_store_LOG_TAG = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nvar MAX_PENDING_WRITES = 10;\n// The RemoteStore notifies an onlineStateHandler with OnlineState.Failed if we\n// fail to connect to the backend. This subsequently triggers get() requests to\n// fail or use cached data, etc. Unfortunately, our connections have\n// historically been subject to various transient failures. So we wait for\n// multiple failures before notifying the onlineStateHandler.\nvar ONLINE_ATTEMPTS_BEFORE_FAILURE = 2;\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nvar remote_store_RemoteStore = /** @class */ (function () {\n    function RemoteStore(\n    /**\n     * The local store, used to fill the write pipeline with outbound\n     * mutations and resolve existence filter mismatches.\n     */\n    localStore, \n    /** The client-side proxy for interacting with the backend. */\n    datastore, onlineStateHandler) {\n        this.localStore = localStore;\n        this.datastore = datastore;\n        this.onlineStateHandler = onlineStateHandler;\n        this.pendingWrites = [];\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        /**\n         * A mapping of watched targets that the client cares about tracking and the\n         * user has explicitly called a 'listen' for this target.\n         *\n         * These targets may or may not have been sent to or acknowledged by the\n         * server. On re-establishing the listen stream, these targets should be sent\n         * to the server. The targets removed with unlistens are removed eagerly\n         * without waiting for confirmation from the listen stream.\n         */\n        this.listenTargets = {};\n        /**\n         * A mapping of targetId to pending acks needed.\n         *\n         * If a targetId is present in this map, then we're waiting for watch to\n         * acknowledge a removal or addition of the target. If a target is not in this\n         * mapping, and it's in the listenTargets map, then we consider the target to\n         * be active.\n         *\n         * We increment the count here every time we issue a request over the stream\n         * to watch or unwatch. We then decrement the count every time we get a target\n         * added or target removed message from the server. Once the count is equal to\n         * 0 we know that the client and server are in the same state (once this state\n         * is reached the targetId is removed from the map to free the memory).\n         */\n        this.pendingTargetResponses = {};\n        this.accumulatedWatchChanges = [];\n        this.watchStream = null;\n        this.writeStream = null;\n        /**\n         * The online state of the watch stream. The state is set to healthy if and\n         * only if there are messages received by the backend.\n         */\n        this.watchStreamOnlineState = OnlineState.Unknown;\n        /** A count of consecutive failures to open the stream. */\n        this.watchStreamFailures = 0;\n        /** Whether the client should fire offline warning. */\n        this.shouldWarnOffline = true;\n    }\n    /**\n     * Starts up the remote store, creating streams, restoring state from\n     * LocalStore, etc.\n     */\n    RemoteStore.prototype.start = function () {\n        return this.enableNetwork();\n    };\n    /**\n     * Updates our OnlineState to the new state, updating local state\n     * and notifying the onlineStateHandler as appropriate. Idempotent.\n     */\n    RemoteStore.prototype.updateOnlineState = function (newState) {\n        if (newState !== this.watchStreamOnlineState) {\n            if (newState === OnlineState.Healthy) {\n                // We've connected to watch at least once. Don't warn the developer about\n                // being offline going forward.\n                this.shouldWarnOffline = false;\n            }\n            else if (newState === OnlineState.Unknown) {\n                // The state is set to unknown when a healthy stream is closed (e.g. due to\n                // a token timeout) or when we have no active listens and therefore there's\n                // no need to start the stream. Assuming there is (possibly in the future)\n                // an active listen, then we will eventually move to state Online or Failed,\n                // but we always want to make at least ONLINE_ATTEMPTS_BEFORE_FAILURE\n                // attempts before failing, so we reset the count here.\n                this.watchStreamFailures = 0;\n            }\n            this.watchStreamOnlineState = newState;\n            this.onlineStateHandler(newState);\n        }\n    };\n    /**\n     * Updates our OnlineState as appropriate after the watch stream reports a\n     * failure. The first failure moves us to the 'Unknown' state. We then may\n     * allow multiple failures (based on ONLINE_ATTEMPTS_BEFORE_FAILURE) before we\n     * actually transition to OnlineState.Failed.\n     */\n    RemoteStore.prototype.updateOnlineStateAfterFailure = function () {\n        if (this.watchStreamOnlineState === OnlineState.Healthy) {\n            this.updateOnlineState(OnlineState.Unknown);\n        }\n        else {\n            this.watchStreamFailures++;\n            if (this.watchStreamFailures >= ONLINE_ATTEMPTS_BEFORE_FAILURE) {\n                if (this.shouldWarnOffline) {\n                    log_error('Could not reach Firestore backend.');\n                    this.shouldWarnOffline = false;\n                }\n                this.updateOnlineState(OnlineState.Failed);\n            }\n        }\n    };\n    RemoteStore.prototype.isNetworkEnabled = function () {\n        assert((this.watchStream == null) === (this.writeStream == null), 'WatchStream and WriteStream should both be null or non-null');\n        return this.watchStream != null;\n    };\n    /** Re-enables the network. Idempotent. */\n    RemoteStore.prototype.enableNetwork = function () {\n        var _this = this;\n        if (this.isNetworkEnabled()) {\n            return Promise.resolve();\n        }\n        // Create new streams (but note they're not started yet).\n        this.watchStream = this.datastore.newPersistentWatchStream();\n        this.writeStream = this.datastore.newPersistentWriteStream();\n        // Load any saved stream token from persistent storage\n        return this.localStore.getLastStreamToken().then(function (token) {\n            _this.writeStream.lastStreamToken = token;\n            if (_this.shouldStartWatchStream()) {\n                _this.startWatchStream();\n            }\n            _this.updateOnlineState(OnlineState.Unknown);\n            return _this.fillWritePipeline(); // This may start the writeStream.\n        });\n    };\n    /**\n     * Temporarily disables the network. The network can be re-enabled using\n     * enableNetwork().\n     */\n    RemoteStore.prototype.disableNetwork = function () {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                this.disableNetworkInternal();\n                // Set the OnlineState to failed so get()'s return from cache, etc.\n                this.updateOnlineState(OnlineState.Failed);\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Disables the network, if it is currently enabled.\n     */\n    RemoteStore.prototype.disableNetworkInternal = function () {\n        if (this.isNetworkEnabled()) {\n            // NOTE: We're guaranteed not to get any further events from these streams (not even a close\n            // event).\n            this.watchStream.stop();\n            this.writeStream.stop();\n            this.cleanUpWatchStreamState();\n            this.cleanUpWriteStreamState();\n            this.writeStream = null;\n            this.watchStream = null;\n        }\n    };\n    RemoteStore.prototype.shutdown = function () {\n        debug(remote_store_LOG_TAG, 'RemoteStore shutting down.');\n        this.disableNetworkInternal();\n        // Set the OnlineState to Unknown (rather than Failed) to avoid potentially\n        // triggering spurious listener events with cached data, etc.\n        this.updateOnlineState(OnlineState.Unknown);\n        return Promise.resolve();\n    };\n    /** Starts new listen for the given query. Uses resume token if provided */\n    RemoteStore.prototype.listen = function (queryData) {\n        assert(!contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');\n        // Mark this as something the client is currently listening for.\n        this.listenTargets[queryData.targetId] = queryData;\n        if (this.shouldStartWatchStream()) {\n            // The listen will be sent in onWatchStreamOpen\n            this.startWatchStream();\n        }\n        else if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendWatchRequest(queryData);\n        }\n    };\n    /** Removes the listen from server */\n    RemoteStore.prototype.unlisten = function (targetId) {\n        assert(contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');\n        delete this.listenTargets[targetId];\n        if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendUnwatchRequest(targetId);\n            if (isEmpty(this.listenTargets)) {\n                this.watchStream.markIdle();\n            }\n        }\n    };\n    /**\n     * We need to increment the the expected number of pending responses we're due\n     * from watch so we wait for the ack to process any messages from this target.\n     */\n    RemoteStore.prototype.sendWatchRequest = function (queryData) {\n        this.recordPendingTargetRequest(queryData.targetId);\n        this.watchStream.watch(queryData);\n    };\n    /**\n     * We need to increment the expected number of pending responses we're due\n     * from watch so we wait for the removal on the server before we process any\n     * messages from this target.\n     */\n    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {\n        this.recordPendingTargetRequest(targetId);\n        this.watchStream.unwatch(targetId);\n    };\n    /**\n     * Increment the mapping of how many acks are needed from watch before we can\n     * consider the server to be 'in-sync' with the client's active targets.\n     */\n    RemoteStore.prototype.recordPendingTargetRequest = function (targetId) {\n        // For each request we get we need to record we need a response for it.\n        this.pendingTargetResponses[targetId] =\n            (this.pendingTargetResponses[targetId] || 0) + 1;\n    };\n    RemoteStore.prototype.startWatchStream = function () {\n        assert(this.shouldStartWatchStream(), 'startWriteStream() called when shouldStartWatchStream() is false.');\n        this.watchStream.start({\n            onOpen: this.onWatchStreamOpen.bind(this),\n            onClose: this.onWatchStreamClose.bind(this),\n            onWatchChange: this.onWatchStreamChange.bind(this)\n        });\n    };\n    /**\n     * Returns whether the watch stream should be started because there are\n     * active targets trying to be listened too\n     */\n    RemoteStore.prototype.shouldStartWatchStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.watchStream.isStarted() &&\n            !isEmpty(this.listenTargets));\n    };\n    RemoteStore.prototype.cleanUpWatchStreamState = function () {\n        // If the connection is closed then we'll never get a snapshot version for\n        // the accumulated changes and so we'll never be able to complete the batch.\n        // When we start up again the server is going to resend these changes\n        // anyway, so just toss the accumulated state.\n        this.accumulatedWatchChanges = [];\n        this.pendingTargetResponses = {};\n    };\n    RemoteStore.prototype.onWatchStreamOpen = function () {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                // TODO(b/35852690): close the stream again (with some timeout?) if no watch\n                // targets are active\n                forEachNumber(this.listenTargets, function (targetId, queryData) {\n                    _this.sendWatchRequest(queryData);\n                });\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.onWatchStreamClose = function (error) {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                assert(this.isNetworkEnabled(), 'onWatchStreamClose() should only be called when the network is enabled');\n                this.cleanUpWatchStreamState();\n                // If there was an error, retry the connection.\n                if (this.shouldStartWatchStream()) {\n                    this.updateOnlineStateAfterFailure();\n                    this.startWatchStream();\n                }\n                else {\n                    // No need to restart watch stream because there are no active targets.\n                    // The online state is set to unknown because there is no active attempt\n                    // at establishing a connection\n                    this.updateOnlineState(OnlineState.Unknown);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            var changes;\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                // Mark the connection as healthy because we got a message from the server\n                this.updateOnlineState(OnlineState.Healthy);\n                if (watchChange instanceof watch_change_WatchTargetChange &&\n                    watchChange.state === WatchTargetChangeState.Removed &&\n                    watchChange.cause) {\n                    // There was an error on a target, don't wait for a consistent snapshot\n                    // to raise events\n                    return [2 /*return*/, this.handleTargetError(watchChange)];\n                }\n                // Accumulate watch changes but don't process them if there's no\n                // snapshotVersion or it's older than a previous snapshot we've processed\n                // (can happen after we resume a target using a resume token).\n                this.accumulatedWatchChanges.push(watchChange);\n                if (!snapshotVersion.isEqual(snapshot_version_SnapshotVersion.MIN) &&\n                    snapshotVersion.compareTo(this.localStore.getLastRemoteSnapshotVersion()) >= 0) {\n                    changes = this.accumulatedWatchChanges;\n                    this.accumulatedWatchChanges = [];\n                    return [2 /*return*/, this.handleWatchChangeBatch(snapshotVersion, changes)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Takes a batch of changes from the Datastore, repackages them as a\n     * RemoteEvent, and passes that on to the listener, which is typically the\n     * SyncEngine.\n     */\n    RemoteStore.prototype.handleWatchChangeBatch = function (snapshotVersion, changes) {\n        var _this = this;\n        var aggregator = new watch_change_WatchChangeAggregator(snapshotVersion, this.listenTargets, this.pendingTargetResponses);\n        aggregator.addChanges(changes);\n        var remoteEvent = aggregator.createRemoteEvent();\n        // Get the new response counts from the aggregator\n        this.pendingTargetResponses = aggregator.pendingTargetResponses;\n        var promises = [];\n        // Handle existence filters and existence filter mismatches.\n        forEachNumber(aggregator.existenceFilters, function (targetId, filter) {\n            var queryData = _this.listenTargets[targetId];\n            if (!queryData) {\n                // A watched target might have been removed already.\n                return;\n            }\n            var query = queryData.query;\n            if (query.isDocumentQuery()) {\n                if (filter.count === 0) {\n                    // The existence filter told us the document does not exist.\n                    // We need to deduce that this document does not exist and apply\n                    // a deleted document to our updates. Without applying a deleted\n                    // document there might be another query that will raise this\n                    // document as part of a snapshot until it is resolved,\n                    // essentially exposing inconsistency between queries.\n                    var key = new document_key_DocumentKey(query.path);\n                    var deletedDoc = new document_NoDocument(key, snapshotVersion);\n                    remoteEvent.addDocumentUpdate(deletedDoc);\n                }\n                else {\n                    assert(filter.count === 1, 'Single document existence filter with count: ' + filter.count);\n                }\n            }\n            else {\n                // Not a document query.\n                var promise = _this.localStore\n                    .remoteDocumentKeys(targetId)\n                    .then(function (trackedRemote) {\n                    if (remoteEvent.targetChanges[targetId]) {\n                        var mapping = remoteEvent.targetChanges[targetId].mapping;\n                        if (mapping !== null) {\n                            if (mapping instanceof UpdateMapping) {\n                                trackedRemote = mapping.applyToKeySet(trackedRemote);\n                            }\n                            else {\n                                assert(mapping instanceof ResetMapping, 'Expected either reset or update mapping but got something else: ' +\n                                    mapping);\n                                trackedRemote = mapping.documents;\n                            }\n                        }\n                    }\n                    if (trackedRemote.size !== filter.count) {\n                        // Existence filter mismatch, resetting mapping.\n                        // Make sure the mismatch is exposed in the remote event.\n                        remoteEvent.handleExistenceFilterMismatch(targetId);\n                        // Clear the resume token for the query, since we're in a\n                        // known mismatch state.\n                        var newQueryData = new query_data_QueryData(query, targetId, queryData.purpose);\n                        _this.listenTargets[targetId] = newQueryData;\n                        // Cause a hard reset by unwatching and rewatching\n                        // immediately, but deliberately don't send a resume token\n                        // so that we get a full update.\n                        // Make sure we expect that this acks are going to happen.\n                        _this.sendUnwatchRequest(targetId);\n                        // Mark the query we send as being on behalf of an existence\n                        // filter mismatch, but don't actually retain that in\n                        // listenTargets. This ensures that we flag the first\n                        // re-listen this way without impacting future listens of\n                        // this target (that might happen e.g. on reconnect).\n                        var requestQueryData = new query_data_QueryData(query, targetId, QueryPurpose.ExistenceFilterMismatch);\n                        _this.sendWatchRequest(requestQueryData);\n                    }\n                });\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises).then(function () {\n            // Update in-memory resume tokens. LocalStore will update the\n            // persistent view of these when applying the completed RemoteEvent.\n            forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                if (change.resumeToken.length > 0) {\n                    var queryData = _this.listenTargets[targetId];\n                    // A watched target might have been removed already.\n                    if (queryData) {\n                        _this.listenTargets[targetId] = queryData.update({\n                            resumeToken: change.resumeToken,\n                            snapshotVersion: change.snapshotVersion\n                        });\n                    }\n                }\n            });\n            // Finally handle remote event\n            return _this.syncEngine.applyRemoteEvent(remoteEvent);\n        });\n    };\n    /** Handles an error on a target */\n    RemoteStore.prototype.handleTargetError = function (watchChange) {\n        var _this = this;\n        assert(!!watchChange.cause, 'Handling target error without a cause');\n        var error = watchChange.cause;\n        var promiseChain = Promise.resolve();\n        watchChange.targetIds.forEach(function (targetId) {\n            promiseChain = promiseChain.then(function () { return tslib_es6[\"__awaiter\"](_this, void 0, void 0, function () {\n                return tslib_es6[\"__generator\"](this, function (_a) {\n                    // A watched target might have been removed already.\n                    if (contains(this.listenTargets, targetId)) {\n                        delete this.listenTargets[targetId];\n                        return [2 /*return*/, this.syncEngine.rejectListen(targetId, error)];\n                    }\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n        return promiseChain;\n    };\n    RemoteStore.prototype.cleanUpWriteStreamState = function () {\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        debug(remote_store_LOG_TAG, 'Stopping write stream with ' +\n            this.pendingWrites.length +\n            ' pending writes');\n        this.pendingWrites = [];\n    };\n    /**\n     * Notifies that there are new mutations to process in the queue. This is\n     * typically called by SyncEngine after it has sent mutations to LocalStore.\n     */\n    RemoteStore.prototype.fillWritePipeline = function () {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                if (this.canWriteMutations()) {\n                    return [2 /*return*/, this.localStore\n                            .nextMutationBatch(this.lastBatchSeen)\n                            .then(function (batch) {\n                            if (batch === null) {\n                                if (_this.pendingWrites.length === 0) {\n                                    _this.writeStream.markIdle();\n                                }\n                            }\n                            else {\n                                _this.commit(batch);\n                                return _this.fillWritePipeline();\n                            }\n                        })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Returns true if the backend can accept additional write requests.\n     *\n     * When sending mutations to the write stream (e.g. in fillWritePipeline),\n     * call this method first to check if more mutations can be sent.\n     *\n     * Currently the only thing that can prevent the backend from accepting\n     * write requests is if there are too many requests already outstanding. As\n     * writes complete the backend will be able to accept more.\n     */\n    RemoteStore.prototype.canWriteMutations = function () {\n        return (this.isNetworkEnabled() && this.pendingWrites.length < MAX_PENDING_WRITES);\n    };\n    // For testing\n    RemoteStore.prototype.outstandingWrites = function () {\n        return this.pendingWrites.length;\n    };\n    /**\n     * Given mutations to commit, actually commits them to the Datastore. Note\n     * that this does *not* return a Promise specifically because the AsyncQueue\n     * should not block operations for this.\n     */\n    RemoteStore.prototype.commit = function (batch) {\n        assert(this.canWriteMutations(), \"commit called when batches can't be written\");\n        this.lastBatchSeen = batch.batchId;\n        this.pendingWrites.push(batch);\n        if (this.shouldStartWriteStream()) {\n            this.startWriteStream();\n        }\n        else if (this.isNetworkEnabled() && this.writeStream.handshakeComplete) {\n            this.writeStream.writeMutations(batch.mutations);\n        }\n    };\n    RemoteStore.prototype.shouldStartWriteStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.writeStream.isStarted() &&\n            this.pendingWrites.length > 0);\n    };\n    RemoteStore.prototype.startWriteStream = function () {\n        assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');\n        this.writeStream.start({\n            onOpen: this.onWriteStreamOpen.bind(this),\n            onClose: this.onWriteStreamClose.bind(this),\n            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n            onMutationResult: this.onMutationResult.bind(this)\n        });\n    };\n    RemoteStore.prototype.onWriteStreamOpen = function () {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                this.writeStream.writeHandshake();\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.onWriteHandshakeComplete = function () {\n        var _this = this;\n        // Record the stream token.\n        return this.localStore\n            .setLastStreamToken(this.writeStream.lastStreamToken)\n            .then(function () {\n            // Drain any pending writes.\n            //\n            // Note that at this point pendingWrites contains mutations that\n            // have already been accepted by fillWritePipeline/commitBatch. If\n            // the pipeline is full, canWriteMutations will be false, despite\n            // the fact that we actually need to send mutations over.\n            //\n            // This also means that this method indirectly respects the limits\n            // imposed by canWriteMutations since writes can't be added to the\n            // pendingWrites array when canWriteMutations is false. If the\n            // limits imposed by canWriteMutations actually protect us from\n            // DOSing ourselves then those limits won't be exceeded here and\n            // we'll continue to make progress.\n            for (var _i = 0, _a = _this.pendingWrites; _i < _a.length; _i++) {\n                var batch = _a[_i];\n                _this.writeStream.writeMutations(batch.mutations);\n            }\n        });\n    };\n    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {\n        var _this = this;\n        // This is a response to a write containing mutations and should be\n        // correlated to the first pending write.\n        assert(this.pendingWrites.length > 0, 'Got result for empty pending writes');\n        var batch = this.pendingWrites.shift();\n        var success = mutation_batch_MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);\n        return this.syncEngine.applySuccessfulWrite(success).then(function () {\n            // It's possible that with the completion of this mutation another\n            // slot has freed up.\n            return _this.fillWritePipeline();\n        });\n    };\n    RemoteStore.prototype.onWriteStreamClose = function (error) {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            var _this = this;\n            var errorHandling;\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                assert(this.isNetworkEnabled(), 'onWriteStreamClose() should only be called when the network is enabled');\n                // If the write stream closed due to an error, invoke the error callbacks if\n                // there are pending writes.\n                if (error && this.pendingWrites.length > 0) {\n                    assert(!!error, 'We have pending writes, but the write stream closed without an error');\n                    errorHandling = void 0;\n                    if (this.writeStream.handshakeComplete) {\n                        // This error affects the actual write.\n                        errorHandling = this.handleWriteError(error);\n                    }\n                    else {\n                        // If there was an error before the handshake has finished, it's\n                        // possible that the server is unable to process the stream token\n                        // we're sending. (Perhaps it's too old?)\n                        errorHandling = this.handleHandshakeError(error);\n                    }\n                    return [2 /*return*/, errorHandling.then(function () {\n                            // The write stream might have been started by refilling the write\n                            // pipeline for failed writes\n                            if (_this.shouldStartWriteStream()) {\n                                _this.startWriteStream();\n                            }\n                        })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.handleHandshakeError = function (error) {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                // Reset the token if it's a permanent error or the error code is\n                // ABORTED, signaling the write stream is no longer valid.\n                if (isPermanentError(error.code) || error.code === Code.ABORTED) {\n                    debug(remote_store_LOG_TAG, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);\n                    this.writeStream.lastStreamToken = emptyByteString();\n                    return [2 /*return*/, this.localStore.setLastStreamToken(emptyByteString())];\n                }\n                else {\n                    // Some other error, don't reset stream token. Our stream logic will\n                    // just retry with exponential backoff.\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.handleWriteError = function (error) {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            var _this = this;\n            var batch;\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                if (isPermanentError(error.code)) {\n                    batch = this.pendingWrites.shift();\n                    // In this case it's also unlikely that the server itself is melting\n                    // down -- this was just a bad request so inhibit backoff on the next\n                    // restart.\n                    this.writeStream.inhibitBackoff();\n                    return [2 /*return*/, this.syncEngine\n                            .rejectFailedWrite(batch.batchId, error)\n                            .then(function () {\n                            // It's possible that with the completion of this mutation\n                            // another slot has freed up.\n                            return _this.fillWritePipeline();\n                        })];\n                }\n                else {\n                    // Transient error, just let the retry logic kick in.\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.createTransaction = function () {\n        return new transaction_Transaction(this.datastore);\n    };\n    RemoteStore.prototype.handleUserChange = function (user) {\n        debug(remote_store_LOG_TAG, 'RemoteStore changing users: uid=', user.uid);\n        // If the network has been explicitly disabled, make sure we don't\n        // accidentally re-enable it.\n        if (this.isNetworkEnabled()) {\n            // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n            // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n            // (since mutations are per-user).\n            this.disableNetworkInternal();\n            this.updateOnlineState(OnlineState.Unknown);\n            return this.enableNetwork();\n        }\n    };\n    return RemoteStore;\n}());\n\n\n//# sourceMappingURL=remote_store.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/firestore_client.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar firestore_client_LOG_TAG = 'FirestoreClient';\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nvar firestore_client_FirestoreClient = /** @class */ (function () {\n    function FirestoreClient(platform, databaseInfo, credentials, \n    /**\n     * Asynchronous queue responsible for all of our internal processing. When\n     * we get incoming work from the user (via public API) or the network\n     * (incoming GRPC messages), we should always schedule onto this queue.\n     * This ensures all of our work is properly serialized (e.g. we don't\n     * start processing a new operation while the previous one is waiting for\n     * an async I/O to complete).\n     */\n    asyncQueue) {\n        this.platform = platform;\n        this.databaseInfo = databaseInfo;\n        this.credentials = credentials;\n        this.asyncQueue = asyncQueue;\n    }\n    /**\n     * Starts up the FirestoreClient, returning only whether or not enabling\n     * persistence succeeded.\n     *\n     * The intent here is to \"do the right thing\" as far as users are concerned.\n     * Namely, in cases where offline persistence is requested and possible,\n     * enable it, but otherwise fall back to persistence disabled. For the most\n     * part we expect this to succeed one way or the other so we don't expect our\n     * users to actually wait on the firestore.enablePersistence Promise since\n     * they generally won't care.\n     *\n     * Of course some users actually do care about whether or not persistence\n     * was successfully enabled, so the Promise returned from this method\n     * indicates this outcome.\n     *\n     * This presents a problem though: even before enablePersistence resolves or\n     * rejects, users may have made calls to e.g. firestore.collection() which\n     * means that the FirestoreClient in there will be available and will be\n     * enqueuing actions on the async queue.\n     *\n     * Meanwhile any failure of an operation on the async queue causes it to\n     * panic and reject any further work, on the premise that unhandled errors\n     * are fatal.\n     *\n     * Consequently the fallback is handled internally here in start, and if the\n     * fallback succeeds we signal success to the async queue even though the\n     * start() itself signals failure.\n     *\n     * @param usePersistence Whether or not to attempt to enable persistence.\n     * @returns A deferred result indicating the user-visible result of enabling\n     *     offline persistence. This method will reject this if IndexedDB fails to\n     *     start for any reason. If usePersistence is false this is\n     *     unconditionally resolved.\n     */\n    FirestoreClient.prototype.start = function (usePersistence) {\n        var _this = this;\n        // We defer our initialization until we get the current user from\n        // setUserChangeListener(). We block the async queue until we got the\n        // initial user and the initialization is completed. This will prevent\n        // any scheduled work from happening before initialization is completed.\n        //\n        // If initializationDone resolved then the FirestoreClient is in a usable\n        // state.\n        var initializationDone = new Deferred();\n        // If usePersistence is true, certain classes of errors while starting are\n        // recoverable but only by falling back to persistence disabled.\n        //\n        // If there's an error in the first case but not in recovery we cannot\n        // reject the promise blocking the async queue because this will cause the\n        // async queue to panic.\n        var persistenceResult = new Deferred();\n        var initialized = false;\n        this.credentials.setUserChangeListener(function (user) {\n            if (!initialized) {\n                initialized = true;\n                _this.initializePersistence(usePersistence, persistenceResult)\n                    .then(function () { return _this.initializeRest(user); })\n                    .then(initializationDone.resolve, initializationDone.reject);\n            }\n            else {\n                _this.asyncQueue.enqueue(function () {\n                    return _this.handleUserChange(user);\n                });\n            }\n        });\n        // Block the async queue until initialization is done\n        this.asyncQueue.enqueue(function () {\n            return initializationDone.promise;\n        });\n        // Return only the result of enabling persistence. Note that this does not\n        // need to await the completion of initializationDone because the result of\n        // this method should not reflect any other kind of failure to start.\n        return persistenceResult.promise;\n    };\n    /** Enables the network connection and requeues all pending operations. */\n    FirestoreClient.prototype.enableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.enqueue(function () {\n            return _this.remoteStore.enableNetwork();\n        });\n    };\n    /**\n     * Initializes persistent storage, attempting to use IndexedDB if\n     * usePersistence is true or memory-only if false.\n     *\n     * If IndexedDB fails because it's already open in another tab or because the\n     * platform can't possibly support our implementation then this method rejects\n     * the persistenceResult and falls back on memory-only persistence.\n     *\n     * @param usePersistence indicates whether or not to use offline persistence\n     * @param persistenceResult A deferred result indicating the user-visible\n     *     result of enabling offline persistence. This method will reject this if\n     *     IndexedDB fails to start for any reason. If usePersistence is false\n     *     this is unconditionally resolved.\n     * @returns a Promise indicating whether or not initialization should\n     *     continue, i.e. that one of the persistence implementations actually\n     *     succeeded.\n     */\n    FirestoreClient.prototype.initializePersistence = function (usePersistence, persistenceResult) {\n        var _this = this;\n        if (usePersistence) {\n            return this.startIndexedDbPersistence()\n                .then(persistenceResult.resolve)\n                .catch(function (error) {\n                // Regardless of whether or not the retry succeeds, from an user\n                // perspective, offline persistence has failed.\n                persistenceResult.reject(error);\n                // An unknown failure on the first stage shuts everything down.\n                if (!_this.canFallback(error)) {\n                    return Promise.reject(error);\n                }\n                console.warn('Error enabling offline storage. Falling back to' +\n                    ' storage disabled: ' +\n                    error);\n                return _this.startMemoryPersistence();\n            });\n        }\n        else {\n            // When usePersistence == false, enabling offline persistence is defined\n            // to unconditionally succeed. This allows start() to have the same\n            // signature for both cases, despite the fact that the returned promise\n            // is only used in the enablePersistence call.\n            persistenceResult.resolve();\n            return this.startMemoryPersistence();\n        }\n    };\n    FirestoreClient.prototype.canFallback = function (error) {\n        return (error.code === Code.FAILED_PRECONDITION ||\n            error.code === Code.UNIMPLEMENTED);\n    };\n    /**\n     * Starts IndexedDB-based persistence.\n     *\n     * @returns A promise indicating success or failure.\n     */\n    FirestoreClient.prototype.startIndexedDbPersistence = function () {\n        // TODO(http://b/33384523): For now we just disable garbage collection\n        // when persistence is enabled.\n        this.garbageCollector = new no_op_garbage_collector_NoOpGarbageCollector();\n        var storagePrefix = indexeddb_persistence_IndexedDbPersistence.buildStoragePrefix(this.databaseInfo);\n        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n        var serializer = new serializer_JsonProtoSerializer(this.databaseInfo.databaseId, {\n            useProto3Json: true\n        });\n        this.persistence = new indexeddb_persistence_IndexedDbPersistence(storagePrefix, serializer);\n        return this.persistence.start();\n    };\n    /**\n     * Starts Memory-backed persistence. In practice this cannot fail.\n     *\n     * @returns A promise that will successfully resolve.\n     */\n    FirestoreClient.prototype.startMemoryPersistence = function () {\n        this.garbageCollector = new eager_garbage_collector_EagerGarbageCollector();\n        this.persistence = new memory_persistence_MemoryPersistence();\n        return this.persistence.start();\n    };\n    /**\n     * Initializes the rest of the FirestoreClient, assuming the initial user\n     * has been obtained from the credential provider and some persistence\n     * implementation is available in this.persistence.\n     */\n    FirestoreClient.prototype.initializeRest = function (user) {\n        var _this = this;\n        return this.platform\n            .loadConnection(this.databaseInfo)\n            .then(function (connection) {\n            _this.localStore = new local_store_LocalStore(_this.persistence, user, _this.garbageCollector);\n            var serializer = _this.platform.newSerializer(_this.databaseInfo.databaseId);\n            var datastore = new datastore_Datastore(_this.asyncQueue, connection, _this.credentials, serializer);\n            var onlineStateChangedHandler = function (onlineState) {\n                _this.syncEngine.applyOnlineStateChange(onlineState);\n                _this.eventMgr.applyOnlineStateChange(onlineState);\n            };\n            _this.remoteStore = new remote_store_RemoteStore(_this.localStore, datastore, onlineStateChangedHandler);\n            _this.syncEngine = new sync_engine_SyncEngine(_this.localStore, _this.remoteStore, user);\n            // Setup wiring between sync engine and remote store\n            _this.remoteStore.syncEngine = _this.syncEngine;\n            _this.eventMgr = new event_manager_EventManager(_this.syncEngine);\n            // NOTE: RemoteStore depends on LocalStore (for persisting stream\n            // tokens, refilling mutation queue, etc.) so must be started after\n            // LocalStore.\n            return _this.localStore.start();\n        })\n            .then(function () {\n            return _this.remoteStore.start();\n        });\n    };\n    FirestoreClient.prototype.handleUserChange = function (user) {\n        this.asyncQueue.verifyOperationInProgress();\n        debug(firestore_client_LOG_TAG, 'User Changed: ' + user.uid);\n        return this.syncEngine.handleUserChange(user);\n    };\n    /** Disables the network connection. Pending operations will not complete. */\n    FirestoreClient.prototype.disableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.enqueue(function () {\n            return _this.remoteStore.disableNetwork();\n        });\n    };\n    FirestoreClient.prototype.shutdown = function () {\n        var _this = this;\n        return this.asyncQueue\n            .enqueue(function () {\n            _this.credentials.removeUserChangeListener();\n            return _this.remoteStore.shutdown();\n        })\n            .then(function () {\n            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n            return _this.persistence.shutdown();\n        });\n    };\n    FirestoreClient.prototype.listen = function (query, observer, options) {\n        var _this = this;\n        var listener = new event_manager_QueryListener(query, observer, options);\n        this.asyncQueue.enqueue(function () {\n            return _this.eventMgr.listen(listener);\n        });\n        return listener;\n    };\n    FirestoreClient.prototype.unlisten = function (listener) {\n        var _this = this;\n        this.asyncQueue.enqueue(function () {\n            return _this.eventMgr.unlisten(listener);\n        });\n    };\n    FirestoreClient.prototype.write = function (mutations) {\n        var _this = this;\n        var deferred = new Deferred();\n        this.asyncQueue.enqueue(function () { return _this.syncEngine.write(mutations, deferred); });\n        return deferred.promise;\n    };\n    FirestoreClient.prototype.databaseId = function () {\n        return this.databaseInfo.databaseId;\n    };\n    FirestoreClient.prototype.transaction = function (updateFunction) {\n        var _this = this;\n        // We have to wait for the async queue to be sure syncEngine is initialized.\n        return this.asyncQueue\n            .enqueue(function () { return tslib_es6[\"__awaiter\"](_this, void 0, void 0, function () { return tslib_es6[\"__generator\"](this, function (_a) {\n            return [2 /*return*/];\n        }); }); })\n            .then(function () { return _this.syncEngine.runTransaction(updateFunction); });\n    };\n    return FirestoreClient;\n}());\n\n\n//# sourceMappingURL=firestore_client.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/async_observer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nvar AsyncObserver = /** @class */ (function () {\n    function AsyncObserver(observer) {\n        this.observer = observer;\n        /**\n         * When set to true, will not raise future events. Necessary to deal with\n         * async detachment of listener.\n         */\n        this.muted = false;\n    }\n    AsyncObserver.prototype.next = function (value) {\n        this.scheduleEvent(this.observer.next, value);\n    };\n    AsyncObserver.prototype.error = function (error) {\n        this.scheduleEvent(this.observer.error, error);\n    };\n    AsyncObserver.prototype.mute = function () {\n        this.muted = true;\n    };\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n        var _this = this;\n        if (!this.muted) {\n            setTimeout(function () {\n                if (!_this.muted) {\n                    eventHandler(event);\n                }\n            }, 0);\n        }\n    };\n    return AsyncObserver;\n}());\n\n\n//# sourceMappingURL=async_observer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/auth/user.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User = /** @class */ (function () {\n    function User(uid) {\n        this.uid = uid;\n    }\n    User.prototype.isAuthenticated = function () {\n        return this.uid != null;\n    };\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n    User.prototype.toKey = function () {\n        if (this.isAuthenticated()) {\n            return 'uid:' + this.uid;\n        }\n        else {\n            return 'anonymous-user';\n        }\n    };\n    User.prototype.isEqual = function (otherUser) {\n        return otherUser.uid === this.uid;\n    };\n    /** A user with a null UID. */\n    User.UNAUTHENTICATED = new User(null);\n    // TODO(mikelehen): Look into getting a proper uid-equivalent for\n    // non-FirebaseAuth providers.\n    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n    User.FIRST_PARTY = new User('first-party-uid');\n    return User;\n}());\n\n\n//# sourceMappingURL=user.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/credentials.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar OAuthToken = /** @class */ (function () {\n    function OAuthToken(value, user) {\n        this.user = user;\n        this.type = 'OAuth';\n        this.authHeaders = { Authorization: \"Bearer \" + value };\n    }\n    return OAuthToken;\n}());\n\n/** A CredentialsProvider that always yields an empty token. */\nvar credentials_EmptyCredentialsProvider = /** @class */ (function () {\n    function EmptyCredentialsProvider() {\n        /**\n         * Stores the User listener registered with setUserChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.userListener = null;\n    }\n    EmptyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(null);\n    };\n    EmptyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire with initial user.\n        listener(User.UNAUTHENTICATED);\n    };\n    EmptyCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.userListener !== null, 'removeUserChangeListener() when no listener registered');\n        this.userListener = null;\n    };\n    return EmptyCredentialsProvider;\n}());\n\nvar credentials_FirebaseCredentialsProvider = /** @class */ (function () {\n    function FirebaseCredentialsProvider(app) {\n        var _this = this;\n        this.app = app;\n        /**\n         * The auth token listener registered with FirebaseApp, retained here so we\n         * can unregister it.\n         */\n        this.tokenListener = null;\n        /**\n         * Counter used to detect if the user changed while a getToken request was\n         * outstanding.\n         */\n        this.userCounter = 0;\n        /** The User listener registered with setUserChangeListener(). */\n        this.userListener = null;\n        // We listen for token changes but all we really care about is knowing when\n        // the uid may have changed.\n        this.tokenListener = function () {\n            var newUser = _this.getUser();\n            if (!_this.currentUser || !newUser.isEqual(_this.currentUser)) {\n                _this.currentUser = newUser;\n                _this.userCounter++;\n                if (_this.userListener) {\n                    _this.userListener(_this.currentUser);\n                }\n            }\n        };\n        this.userCounter = 0;\n        // Will fire at least once where we set this.currentUser\n        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n    FirebaseCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        assert(this.tokenListener != null, 'getToken cannot be called after listener removed.');\n        // Take note of the current value of the userCounter so that this method can\n        // fail (with an ABORTED error) if there is a user change while the request\n        // is outstanding.\n        var initialUserCounter = this.userCounter;\n        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {\n            // Cancel the request since the user changed while the request was\n            // outstanding so the response is likely for a previous user (which\n            // user, we can't be sure).\n            if (_this.userCounter !== initialUserCounter) {\n                throw new error_FirestoreError(Code.ABORTED, 'getToken aborted due to uid change.');\n            }\n            else {\n                if (tokenData) {\n                    assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\n                }\n                else {\n                    return null;\n                }\n            }\n        });\n    };\n    FirebaseCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire the initial event, but only if we received the initial user\n        if (this.currentUser) {\n            listener(this.currentUser);\n        }\n    };\n    FirebaseCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.tokenListener != null, 'removeUserChangeListener() called twice');\n        assert(this.userListener !== null, 'removeUserChangeListener() called when no listener registered');\n        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);\n        this.tokenListener = null;\n        this.userListener = null;\n    };\n    FirebaseCredentialsProvider.prototype.getUser = function () {\n        // TODO(mikelehen): Remove this check once we're shipping with firebase.js.\n        if (typeof this.app.INTERNAL.getUid !== 'function') {\n            fail('This version of the Firestore SDK requires at least version' +\n                ' 3.7.0 of firebase.js.');\n        }\n        var currentUid = this.app.INTERNAL.getUid();\n        assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);\n        return new User(currentUid);\n    };\n    return FirebaseCredentialsProvider;\n}());\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * TODO(b/33147818) this implementation violates the current assumption that\n * tokens are immutable.  We need to either revisit this assumption or come\n * up with some way for FPA to use the listen/unlisten interface.\n */\nvar credentials_FirstPartyToken = /** @class */ (function () {\n    function FirstPartyToken(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        this.type = 'FirstParty';\n        this.user = User.FIRST_PARTY;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n        get: function () {\n            return {\n                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),\n                'X-Goog-AuthUser': this.sessionIndex\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirstPartyToken;\n}());\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar credentials_FirstPartyCredentialsProvider = /** @class */ (function () {\n    function FirstPartyCredentialsProvider(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    FirstPartyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(new credentials_FirstPartyToken(this.gapi, this.sessionIndex));\n    };\n    // TODO(33108925): can someone switch users w/o a page refresh?\n    // TODO(33110621): need to understand token/session lifecycle\n    FirstPartyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.FIRST_PARTY);\n    };\n    FirstPartyCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return FirstPartyCredentialsProvider;\n}());\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nfunction makeCredentialsProvider(credentials) {\n    if (!credentials) {\n        return new credentials_EmptyCredentialsProvider();\n    }\n    switch (credentials.type) {\n        case 'gapi':\n            return new credentials_FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');\n        case 'provider':\n            return credentials.client;\n        default:\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n    }\n}\n\n//# sourceMappingURL=credentials.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/observer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isPartialObserver(obj) {\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    var object = obj;\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in object && typeof object[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=observer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/field_value.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return field_value_DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return field_value_ServerTimestampFieldValueImpl.instance;\n    };\n    FieldValueImpl.prototype.isEqual = function (other) {\n        return this === other;\n    };\n    return FieldValueImpl;\n}());\n\nvar field_value_DeleteFieldValueImpl = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\n\nvar field_value_ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nvar PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n//# sourceMappingURL=field_value.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/user_data_converter.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nvar user_data_converter_ParsedSetData = /** @class */ (function () {\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedSetData.prototype.toMutations = function (key, precondition) {\n        var mutations = [];\n        if (this.fieldMask !== null) {\n            mutations.push(new mutation_PatchMutation(key, this.data, this.fieldMask, precondition));\n        }\n        else {\n            mutations.push(new mutation_SetMutation(key, this.data, precondition));\n        }\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new mutation_TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedSetData;\n}());\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar user_data_converter_ParsedUpdateData = /** @class */ (function () {\n    function ParsedUpdateData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedUpdateData.prototype.toMutations = function (key, precondition) {\n        var mutations = [\n            new mutation_PatchMutation(key, this.data, this.fieldMask, precondition)\n        ];\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new mutation_TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedUpdateData;\n}());\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nvar UserDataSource;\n(function (UserDataSource) {\n    UserDataSource[UserDataSource[\"Set\"] = 0] = \"Set\";\n    UserDataSource[UserDataSource[\"Update\"] = 1] = \"Update\";\n    UserDataSource[UserDataSource[\"MergeSet\"] = 2] = \"MergeSet\";\n    UserDataSource[UserDataSource[\"QueryValue\"] = 3] = \"QueryValue\"; // from a where clause or cursor bound\n})(UserDataSource || (UserDataSource = {}));\nfunction isWrite(dataSource) {\n    switch (dataSource) {\n        case UserDataSource.Set: // fall through\n        case UserDataSource.MergeSet: // fall through\n        case UserDataSource.Update:\n            return true;\n        case UserDataSource.QueryValue:\n            return false;\n        default:\n            throw fail(\"Unexpected case for UserDataSource: \" + dataSource);\n    }\n}\n/** A \"context\" object passed around while parsing user data. */\nvar user_data_converter_ParseContext = /** @class */ (function () {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param dataSource Indicates what kind of API method this data came from.\n     * @param methodName The name of the method the user called to create this\n     *     ParseContext.\n     * @param path A path within the object being parsed. This could be an empty\n     *     path (in which case the context represents the root of the data being\n     *     parsed), or a nonempty path (indicating the context represents a nested\n     *     location within the data).\n     * @param arrayElement Whether or not this context corresponds to an element\n     *     of an array.\n     * @param fieldTransforms A mutable list of field transforms encountered while\n     *     parsing the data.\n     * @param fieldMask A mutable list of field paths encountered while parsing\n     *     the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {\n        this.dataSource = dataSource;\n        this.methodName = methodName;\n        this.path = path;\n        this.arrayElement = arrayElement;\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        if (fieldTransforms === undefined) {\n            this.validatePath();\n        }\n        this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n        this.fieldTransforms = fieldTransforms || [];\n        this.fieldMask = fieldMask || [];\n    }\n    ParseContext.prototype.childContextForField = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePathSegment(field);\n        return context;\n    };\n    ParseContext.prototype.childContextForFieldPath = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePath();\n        return context;\n    };\n    ParseContext.prototype.childContextForArray = function (index) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // null.\n        return new ParseContext(this.dataSource, this.methodName, \n        /*path=*/ null, \n        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);\n    };\n    ParseContext.prototype.createError = function (reason) {\n        var fieldDescription = this.path === null || this.path.isEmpty()\n            ? ''\n            : \" (found in field \" + this.path.toString() + \")\";\n        return new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + this.methodName + \"() called with invalid data. \" +\n            reason +\n            fieldDescription);\n    };\n    ParseContext.prototype.validatePath = function () {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path === null) {\n            return;\n        }\n        for (var i = 0; i < this.path.length; i++) {\n            this.validatePathSegment(this.path.get(i));\n        }\n    };\n    ParseContext.prototype.validatePathSegment = function (segment) {\n        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n            throw this.createError('Document fields cannot begin and end with __');\n        }\n    };\n    return ParseContext;\n}());\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nvar DocumentKeyReference = /** @class */ (function () {\n    function DocumentKeyReference(databaseId, key) {\n        this.databaseId = databaseId;\n        this.key = key;\n    }\n    return DocumentKeyReference;\n}());\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar user_data_converter_UserDataConverter = /** @class */ (function () {\n    function UserDataConverter(preConverter) {\n        this.preConverter = preConverter;\n    }\n    /** Parse document data from a non-merge set() call. */\n    UserDataConverter.prototype.parseSetData = function (methodName, input) {\n        var context = new user_data_converter_ParseContext(UserDataSource.Set, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        return new user_data_converter_ParsedSetData(updateData, \n        /* fieldMask= */ null, context.fieldTransforms);\n    };\n    /** Parse document data from a set() call with '{merge:true}'. */\n    UserDataConverter.prototype.parseMergeData = function (methodName, input) {\n        var context = new user_data_converter_ParseContext(UserDataSource.MergeSet, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        var fieldMask = new mutation_FieldMask(context.fieldMask);\n        return new user_data_converter_ParsedSetData(updateData, fieldMask, context.fieldTransforms);\n    };\n    /** Parse update data from an update() call. */\n    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {\n        var _this = this;\n        var context = new user_data_converter_ParseContext(UserDataSource.Update, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var fieldMaskPaths = [];\n        var updateData = field_value_ObjectValue.EMPTY;\n        forEach(input, function (key, value) {\n            var path = fieldPathFromDotSeparatedString(methodName, key);\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            if (value instanceof field_value_DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = _this.parseData(value, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        });\n        var mask = new mutation_FieldMask(fieldMaskPaths);\n        return new user_data_converter_ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /** Parse update data from a list of field/value arguments. */\n    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {\n        var context = new user_data_converter_ParseContext(UserDataSource.Update, methodName, path_FieldPath.EMPTY_PATH);\n        var keys = [fieldPathFromArgument(methodName, field)];\n        var values = [value];\n        if (moreFieldsAndValues.length % 2 !== 0) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\n                'of arguments that alternate between field names and values.');\n        }\n        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));\n            values.push(moreFieldsAndValues[i + 1]);\n        }\n        var fieldMaskPaths = [];\n        var updateData = field_value_ObjectValue.EMPTY;\n        for (var i = 0; i < keys.length; ++i) {\n            var path = keys[i];\n            var childContext = context.childContextForFieldPath(path);\n            var value_1 = this.runPreConverter(values[i], childContext);\n            if (value_1 instanceof field_value_DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = this.parseData(value_1, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        }\n        var mask = new mutation_FieldMask(fieldMaskPaths);\n        return new user_data_converter_ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /**\n     * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n     * bound).\n     */\n    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {\n        var context = new user_data_converter_ParseContext(UserDataSource.QueryValue, methodName, path_FieldPath.EMPTY_PATH);\n        var parsed = this.parseData(input, context);\n        assert(parsed != null, 'Parsed data should not be null.');\n        assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');\n        return parsed;\n    };\n    /** Sends data through this.preConverter, handling any thrown errors. */\n    UserDataConverter.prototype.runPreConverter = function (input, context) {\n        try {\n            return this.preConverter(input);\n        }\n        catch (e) {\n            var message = errorMessage(e);\n            throw context.createError(message);\n        }\n    };\n    /**\n     * Internal helper for parsing user data.\n     *\n     * @param input Data to be parsed.\n     * @param context A context object representing the current path being parsed,\n     * the source of the data being parsed, etc.\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseData = function (input, context) {\n        input = this.runPreConverter(input, context);\n        if (input instanceof Array) {\n            // TODO(b/34871131): Include the path containing the array in the error\n            // message.\n            if (context.arrayElement) {\n                throw context.createError('Nested arrays are not supported');\n            }\n            // If context.path is null we are already inside an array and we don't\n            // support field mask paths more granular than the top-level array.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseArray(input, context);\n        }\n        else if (looksLikeJsonObject(input)) {\n            validatePlainObject('Unsupported field value:', context, input);\n            return this.parseObject(input, context);\n        }\n        else {\n            // If context.path is null, we are inside an array and we should have\n            // already added the root of the array to the field mask.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseScalarValue(input, context);\n        }\n    };\n    UserDataConverter.prototype.parseArray = function (array, context) {\n        var result = [];\n        var entryIndex = 0;\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n            var entry = array_1[_i];\n            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));\n            if (parsedEntry == null) {\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                parsedEntry = field_value_NullValue.INSTANCE;\n            }\n            result.push(parsedEntry);\n            entryIndex++;\n        }\n        return new field_value_ArrayValue(result);\n    };\n    UserDataConverter.prototype.parseObject = function (obj, context) {\n        var _this = this;\n        var result = new SortedMap(primitiveComparator);\n        forEach(obj, function (key, val) {\n            var parsedValue = _this.parseData(val, context.childContextForField(key));\n            if (parsedValue != null) {\n                result = result.insert(key, parsedValue);\n            }\n        });\n        return new field_value_ObjectValue(result);\n    };\n    /**\n     * Helper to parse a scalar value (i.e. not an Object or Array)\n     *\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseScalarValue = function (value, context) {\n        if (value === null) {\n            return field_value_NullValue.INSTANCE;\n        }\n        else if (typeof value === 'number') {\n            if (isSafeInteger(value)) {\n                return new field_value_IntegerValue(value);\n            }\n            else {\n                return new field_value_DoubleValue(value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            return field_value_BooleanValue.of(value);\n        }\n        else if (typeof value === 'string') {\n            return new field_value_StringValue(value);\n        }\n        else if (value instanceof Date) {\n            return new field_value_TimestampValue(timestamp_Timestamp.fromDate(value));\n        }\n        else if (value instanceof geo_point_GeoPoint) {\n            return new field_value_GeoPointValue(value);\n        }\n        else if (value instanceof blob_Blob) {\n            return new field_value_BlobValue(value);\n        }\n        else if (value instanceof DocumentKeyReference) {\n            return new field_value_RefValue(value.databaseId, value.key);\n        }\n        else if (value instanceof FieldValueImpl) {\n            if (value instanceof field_value_DeleteFieldValueImpl) {\n                if (context.dataSource === UserDataSource.MergeSet) {\n                    return null;\n                }\n                else if (context.dataSource === UserDataSource.Update) {\n                    assert(context.path == null || context.path.length > 0, 'FieldValue.delete() at the top level should have already' +\n                        ' been handled.');\n                    throw context.createError('FieldValue.delete() can only appear at the top level ' +\n                        'of your update data');\n                }\n                else {\n                    // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n                    throw context.createError('FieldValue.delete() can only be used with update() and set() with {merge:true}');\n                }\n            }\n            else if (value instanceof field_value_ServerTimestampFieldValueImpl) {\n                if (!isWrite(context.dataSource)) {\n                    throw context.createError('FieldValue.serverTimestamp() can only be used with set()' +\n                        ' and update()');\n                }\n                if (context.path === null) {\n                    throw context.createError('FieldValue.serverTimestamp() is not currently' +\n                        ' supported inside arrays');\n                }\n                context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));\n                // Return null so this value is omitted from the parsed result.\n                return null;\n            }\n            else {\n                return fail('Unknown FieldValue type: ' + value);\n            }\n        }\n        else {\n            throw context.createError(\"Unsupported field value: \" + valueDescription(value));\n        }\n    };\n    return UserDataConverter;\n}());\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        !(input instanceof Array) &&\n        !(input instanceof Date) &&\n        !(input instanceof geo_point_GeoPoint) &&\n        !(input instanceof blob_Blob) &&\n        !(input instanceof DocumentKeyReference) &&\n        !(input instanceof FieldValueImpl));\n}\nfunction validatePlainObject(message, context, input) {\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n        var description = valueDescription(input);\n        if (description === 'an object') {\n            // Massage the error if it was an object.\n            throw context.createError(message + ' a custom object');\n        }\n        else {\n            throw context.createError(message + ' ' + description);\n        }\n    }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nfunction fieldPathFromArgument(methodName, path) {\n    if (path instanceof field_path_FieldPath) {\n        return path._internalPath;\n    }\n    else if (typeof path === 'string') {\n        return fieldPathFromDotSeparatedString(methodName, path);\n    }\n    else {\n        var message = 'Field path arguments must be of type string or FieldPath.';\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path) {\n    try {\n        return fromDotSeparatedString(path)._internalPath;\n    }\n    catch (e) {\n        var message = errorMessage(e);\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error) {\n    return error instanceof Error ? error.message : error.toString();\n}\n\n//# sourceMappingURL=user_data_converter.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/database.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar database_FirestoreSettings = /** @class */ (function () {\n    function FirestoreSettings(settings) {\n        if (settings.host === undefined) {\n            if (settings.ssl !== undefined) {\n                throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n            }\n            this.host = DEFAULT_HOST;\n            this.ssl = DEFAULT_SSL;\n        }\n        else {\n            validateNamedType('settings', 'string', 'host', settings.host);\n            this.host = settings.host;\n            validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n            this.ssl = defaulted(settings.ssl, DEFAULT_SSL);\n        }\n        validateOptionNames('settings', settings, ['host', 'ssl', 'credentials']);\n        validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);\n        this.credentials = settings.credentials;\n    }\n    FirestoreSettings.prototype.isEqual = function (other) {\n        return (this.host === other.host &&\n            this.ssl === other.ssl &&\n            this.credentials === other.credentials);\n    };\n    return FirestoreSettings;\n}());\nvar FirestoreConfig = /** @class */ (function () {\n    function FirestoreConfig() {\n    }\n    return FirestoreConfig;\n}());\n/**\n * The root reference to the database.\n */\nvar database_Firestore = /** @class */ (function () {\n    function Firestore(databaseIdOrApp) {\n        var _this = this;\n        // Public for use in tests.\n        // TODO(mikelehen): Use modularized initialization instead.\n        this._queue = new async_queue_AsyncQueue();\n        this.INTERNAL = {\n            delete: function () { return tslib_es6[\"__awaiter\"](_this, void 0, void 0, function () {\n                return tslib_es6[\"__generator\"](this, function (_a) {\n                    if (this._firestoreClient) {\n                        return [2 /*return*/, this._firestoreClient.shutdown()];\n                    }\n                    return [2 /*return*/];\n                });\n            }); }\n        };\n        var config = new FirestoreConfig();\n        if (typeof databaseIdOrApp.options === 'object') {\n            // This is very likely a Firebase app object\n            // TODO(b/34177605): Can we somehow use instanceof?\n            var app = databaseIdOrApp;\n            config.firebaseApp = app;\n            config.databaseId = Firestore.databaseIdFromApp(app);\n            config.persistenceKey = config.firebaseApp.name;\n            config.credentials = new credentials_FirebaseCredentialsProvider(app);\n        }\n        else {\n            var external_1 = databaseIdOrApp;\n            if (!external_1.projectId) {\n                throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');\n            }\n            config.databaseId = new database_info_DatabaseId(external_1.projectId, external_1.database);\n            // Use a default persistenceKey that lines up with FirebaseApp.\n            config.persistenceKey = '[DEFAULT]';\n            config.credentials = new credentials_EmptyCredentialsProvider();\n        }\n        config.settings = new database_FirestoreSettings({});\n        this._config = config;\n        this._databaseId = config.databaseId;\n    }\n    Firestore.prototype.settings = function (settingsLiteral) {\n        validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n        validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n        if (contains(settingsLiteral, 'persistence')) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, '\"persistence\" is now specified with a separate call to ' +\n                'firestore.enablePersistence().');\n        }\n        var newSettings = new database_FirestoreSettings(settingsLiteral);\n        if (this._firestoreClient && !this._config.settings.isEqual(newSettings)) {\n            throw new error_FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\n                'be changed. You can only call settings() before calling any other ' +\n                'methods on a Firestore object.');\n        }\n        this._config.settings = newSettings;\n        if (newSettings.credentials !== undefined) {\n            this._config.credentials = makeCredentialsProvider(newSettings.credentials);\n        }\n    };\n    Firestore.prototype.enableNetwork = function () {\n        this.ensureClientConfigured();\n        return this._firestoreClient.enableNetwork();\n    };\n    Firestore.prototype.disableNetwork = function () {\n        this.ensureClientConfigured();\n        return this._firestoreClient.disableNetwork();\n    };\n    Firestore.prototype.enablePersistence = function () {\n        if (this._firestoreClient) {\n            throw new error_FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +\n                'be enabled. You can only call enablePersistence() before calling ' +\n                'any other methods on a Firestore object.');\n        }\n        return this.configureClient(/* persistence= */ true);\n    };\n    Firestore.prototype.ensureClientConfigured = function () {\n        if (!this._firestoreClient) {\n            this.configureClient(/* persistence= */ false);\n        }\n        return this._firestoreClient;\n    };\n    Firestore.prototype.configureClient = function (persistence) {\n        var _this = this;\n        assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');\n        assert(!this._firestoreClient, 'configureClient() called multiple times');\n        var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);\n        var preConverter = function (value) {\n            if (value instanceof database_DocumentReference) {\n                var thisDb = _this._config.databaseId;\n                var otherDb = value.firestore._config.databaseId;\n                if (!otherDb.isEqual(thisDb)) {\n                    throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' +\n                        (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\n                        (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n                }\n                return new DocumentKeyReference(_this._config.databaseId, value._key);\n            }\n            else {\n                return value;\n            }\n        };\n        this._dataConverter = new user_data_converter_UserDataConverter(preConverter);\n        this._firestoreClient = new firestore_client_FirestoreClient(platform_PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, this._queue);\n        return this._firestoreClient.start(persistence);\n    };\n    Firestore.databaseIdFromApp = function (app) {\n        var options = app.options;\n        if (!contains(options, 'projectId')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreId' once alpha testers have upgraded.\n            if (contains(options, 'firestoreId')) {\n                throw new error_FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreId\" is now specified as \"projectId\" in ' +\n                    'firebase.initializeApp.');\n            }\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        }\n        if (contains(options, 'firestoreOptions')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreOptions' once alpha testers have upgraded.\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreOptions\" values are now specified with ' +\n                'Firestore.settings()');\n        }\n        var projectId = options['projectId'];\n        if (!projectId || typeof projectId !== 'string') {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');\n        }\n        return new database_info_DatabaseId(projectId);\n    };\n    Object.defineProperty(Firestore.prototype, \"app\", {\n        get: function () {\n            if (!this._config.firebaseApp) {\n                throw new error_FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n                    'not available');\n            }\n            return this._config.firebaseApp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n        validateArgType('Firestore.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');\n        }\n        this.ensureClientConfigured();\n        return new database_CollectionReference(path_ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.doc = function (pathString) {\n        validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n        validateArgType('Firestore.doc', 'string', 1, pathString);\n        if (!pathString) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');\n        }\n        this.ensureClientConfigured();\n        return database_DocumentReference.forPath(path_ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.runTransaction = function (updateFunction) {\n        var _this = this;\n        validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n        validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n        return this.ensureClientConfigured().transaction(function (transaction) {\n            return updateFunction(new database_Transaction(_this, transaction));\n        });\n    };\n    Firestore.prototype.batch = function () {\n        this.ensureClientConfigured();\n        return new database_WriteBatch(this);\n    };\n    Object.defineProperty(Firestore, \"logLevel\", {\n        get: function () {\n            switch (getLogLevel()) {\n                case LogLevel.DEBUG:\n                    return 'debug';\n                case LogLevel.ERROR:\n                    return 'error';\n                case LogLevel.SILENT:\n                    return 'silent';\n                default:\n                    return fail('Unknown log level: ' + getLogLevel());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.setLogLevel = function (level) {\n        validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n        validateArgType('Firestore.setLogLevel', 'string', 1, level);\n        switch (level) {\n            case 'debug':\n                setLogLevel(LogLevel.DEBUG);\n                break;\n            case 'error':\n                setLogLevel(LogLevel.ERROR);\n                break;\n            case 'silent':\n                setLogLevel(LogLevel.SILENT);\n                break;\n            default:\n                throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);\n        }\n    };\n    return Firestore;\n}());\n\n/**\n * A reference to a transaction.\n */\nvar database_Transaction = /** @class */ (function () {\n    function Transaction(_firestore, _transaction) {\n        this._firestore = _firestore;\n        this._transaction = _transaction;\n    }\n    Transaction.prototype.get = function (documentRef) {\n        var _this = this;\n        validateExactNumberOfArgs('Transaction.get', arguments, 1);\n        var ref = validateReference('Transaction.get', documentRef, this._firestore);\n        return this._transaction\n            .lookup([ref._key])\n            .then(function (docs) {\n            if (!docs || docs.length !== 1) {\n                return fail('Mismatch in docs returned from document lookup.');\n            }\n            var doc = docs[0];\n            if (doc instanceof document_NoDocument) {\n                return new database_DocumentSnapshot(_this._firestore, ref._key, null, false);\n            }\n            return new database_DocumentSnapshot(_this._firestore, ref._key, doc, false);\n        });\n    };\n    Transaction.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n        var ref = validateReference('Transaction.set', documentRef, this._firestore);\n        options = validateSetOptions('Transaction.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('Transaction.set', value)\n            : this._firestore._dataConverter.parseSetData('Transaction.set', value);\n        this._transaction.set(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('Transaction.update', arguments, 2);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);\n        }\n        this._transaction.update(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n        var ref = validateReference('Transaction.delete', documentRef, this._firestore);\n        this._transaction.delete(ref._key);\n        return this;\n    };\n    return Transaction;\n}());\n\nvar database_WriteBatch = /** @class */ (function () {\n    function WriteBatch(_firestore) {\n        this._firestore = _firestore;\n        this._mutations = [];\n        this._committed = false;\n    }\n    WriteBatch.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);\n        options = validateSetOptions('WriteBatch.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value)\n            : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, mutation_Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        this.verifyNotCommitted();\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);\n        }\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, mutation_Precondition.exists(true)));\n        return this;\n    };\n    WriteBatch.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);\n        this._mutations = this._mutations.concat(new mutation_DeleteMutation(ref._key, mutation_Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.commit = function () {\n        return tslib_es6[\"__awaiter\"](this, void 0, void 0, function () {\n            return tslib_es6[\"__generator\"](this, function (_a) {\n                this.verifyNotCommitted();\n                this._committed = true;\n                if (this._mutations.length > 0) {\n                    return [2 /*return*/, this._firestore.ensureClientConfigured().write(this._mutations)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    WriteBatch.prototype.verifyNotCommitted = function () {\n        if (this._committed) {\n            throw new error_FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\n                'has been called.');\n        }\n    };\n    return WriteBatch;\n}());\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nvar database_DocumentReference = /** @class */ (function () {\n    function DocumentReference(_key, firestore) {\n        this._key = _key;\n        this.firestore = firestore;\n        this._firestoreClient = this.firestore.ensureClientConfigured();\n    }\n    DocumentReference.forPath = function (path, firestore) {\n        if (path.length % 2 !== 0) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +\n                'references must have an even number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return new DocumentReference(new document_key_DocumentKey(path), firestore);\n    };\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\n        get: function () {\n            return new database_CollectionReference(this._key.path.popLast(), this.firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\n        get: function () {\n            return this._key.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentReference.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n        validateArgType('DocumentReference.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');\n        }\n        var path = path_ResourcePath.fromString(pathString);\n        return new database_CollectionReference(this._key.path.child(path), this.firestore);\n    };\n    DocumentReference.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentReference)) {\n            throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n        }\n        return this.firestore === other.firestore && this._key.isEqual(other._key);\n    };\n    DocumentReference.prototype.set = function (value, options) {\n        validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n        options = validateSetOptions('DocumentReference.set', options);\n        var parsed = options.merge\n            ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value)\n            : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);\n        return this._firestoreClient.write(parsed.toMutations(this._key, mutation_Precondition.NONE));\n    };\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 2] = arguments[_i];\n        }\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);\n        }\n        return this._firestoreClient.write(parsed.toMutations(this._key, mutation_Precondition.exists(true)));\n    };\n    DocumentReference.prototype.delete = function () {\n        validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n        return this._firestoreClient.write([\n            new mutation_DeleteMutation(this._key, mutation_Precondition.NONE)\n        ]);\n    };\n    DocumentReference.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);\n        var options = {\n            includeMetadataChanges: false\n        };\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('DocumentReference.onSnapshot', options, [\n                'includeMetadataChanges'\n            ]);\n            validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);\n            currArg++;\n        }\n        var internalOptions = {\n            includeDocumentMetadataChanges: options.includeMetadataChanges,\n            includeQueryMetadataChanges: options.includeMetadataChanges\n        };\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(internalOptions, observer);\n    };\n    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (snapshot) {\n                if (observer.next) {\n                    assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');\n                    var doc = snapshot.docs.get(_this._key);\n                    observer.next(new database_DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache));\n                }\n            },\n            error: errHandler\n        });\n        var internalListener = this._firestoreClient.listen(query_Query.atPath(this._key.path), asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            _this._firestoreClient.unlisten(internalListener);\n        };\n    };\n    DocumentReference.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('DocumentReference.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeQueryMetadataChanges: true,\n                includeDocumentMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (snap) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    if (!snap.exists && snap.metadata.fromCache) {\n                        // TODO(dimond): If we're online and the document doesn't\n                        // exist then we resolve with a doc.exists set to false. If\n                        // we're offline however, we reject the Promise in this\n                        // case. Two options: 1) Cache the negative response from\n                        // the server so we can deliver that even when you're\n                        // offline 2) Actually reject the Promise in the online case\n                        // if the document doesn't exist.\n                        reject(new error_FirestoreError(Code.ABORTED, 'Failed to get document because the client is ' + 'offline.'));\n                    }\n                    else {\n                        resolve(snap);\n                    }\n                },\n                error: reject\n            });\n        });\n    };\n    return DocumentReference;\n}());\n\nvar SnapshotMetadata = /** @class */ (function () {\n    function SnapshotMetadata(hasPendingWrites, fromCache) {\n        this.hasPendingWrites = hasPendingWrites;\n        this.fromCache = fromCache;\n    }\n    SnapshotMetadata.prototype.isEqual = function (other) {\n        return (this.hasPendingWrites === other.hasPendingWrites &&\n            this.fromCache === other.fromCache);\n    };\n    return SnapshotMetadata;\n}());\nvar database_DocumentSnapshot = /** @class */ (function () {\n    function DocumentSnapshot(_firestore, _key, _document, _fromCache) {\n        this._firestore = _firestore;\n        this._key = _key;\n        this._document = _document;\n        this._fromCache = _fromCache;\n    }\n    DocumentSnapshot.prototype.data = function (options) {\n        validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);\n        options = validateSnapshotOptions('DocumentSnapshot.data', options);\n        return !this._document\n            ? undefined\n            : this.convertObject(this._document.data, field_value_FieldValueOptions.fromSnapshotOptions(options));\n    };\n    DocumentSnapshot.prototype.get = function (fieldPath, options) {\n        validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);\n        options = validateSnapshotOptions('DocumentSnapshot.get', options);\n        if (this._document) {\n            var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n            if (value !== undefined) {\n                return this.convertValue(value, field_value_FieldValueOptions.fromSnapshotOptions(options));\n            }\n        }\n        return undefined;\n    };\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n        get: function () {\n            return new database_DocumentReference(this._key, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n        get: function () {\n            return this._document !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n        get: function () {\n            return new SnapshotMetadata(this._document !== null && this._document.hasLocalMutations, this._fromCache);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentSnapshot.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentSnapshot)) {\n            throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);\n        }\n        return (this._firestore === other._firestore &&\n            this._fromCache === other._fromCache &&\n            this._key.isEqual(other._key) &&\n            (this._document === null\n                ? other._document === null\n                : this._document.isEqual(other._document)));\n    };\n    DocumentSnapshot.prototype.convertObject = function (data, options) {\n        var _this = this;\n        var result = {};\n        data.forEach(function (key, value) {\n            result[key] = _this.convertValue(value, options);\n        });\n        return result;\n    };\n    DocumentSnapshot.prototype.convertValue = function (value, options) {\n        if (value instanceof field_value_ObjectValue) {\n            return this.convertObject(value, options);\n        }\n        else if (value instanceof field_value_ArrayValue) {\n            return this.convertArray(value, options);\n        }\n        else if (value instanceof field_value_RefValue) {\n            var key = value.value(options);\n            var database = this._firestore.ensureClientConfigured().databaseId();\n            if (!value.databaseId.isEqual(database)) {\n                // TODO(b/64130202): Somehow support foreign references.\n                log_error(\"Document \" + this._key.path + \" contains a document \" +\n                    \"reference within a different database (\" +\n                    (value.databaseId.projectId + \"/\" + value.databaseId.database + \") which is not \") +\n                    \"supported. It will be treated as a reference in the current \" +\n                    (\"database (\" + database.projectId + \"/\" + database.database + \") \") +\n                    \"instead.\");\n            }\n            return new database_DocumentReference(key, this._firestore);\n        }\n        else {\n            return value.value(options);\n        }\n    };\n    DocumentSnapshot.prototype.convertArray = function (data, options) {\n        var _this = this;\n        return data.internalValue.map(function (value) {\n            return _this.convertValue(value, options);\n        });\n    };\n    return DocumentSnapshot;\n}());\n\nvar database_QueryDocumentSnapshot = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](QueryDocumentSnapshot, _super);\n    function QueryDocumentSnapshot(firestore, key, document, fromCache) {\n        return _super.call(this, firestore, key, document, fromCache) || this;\n    }\n    QueryDocumentSnapshot.prototype.data = function (options) {\n        var data = _super.prototype.data.call(this, options);\n        assert(typeof data === 'object', 'Document in a QueryDocumentSnapshot should exist');\n        return data;\n    };\n    return QueryDocumentSnapshot;\n}(database_DocumentSnapshot));\n\nvar database_Query = /** @class */ (function () {\n    function Query(_query, firestore) {\n        this._query = _query;\n        this.firestore = firestore;\n    }\n    Query.prototype.where = function (field, opStr, value) {\n        validateExactNumberOfArgs('Query.where', arguments, 3);\n        validateArgType('Query.where', 'string', 2, opStr);\n        validateDefined('Query.where', 3, value);\n        var fieldValue;\n        var fieldPath = fieldPathFromArgument('Query.where', field);\n        if (fieldPath.isKeyField()) {\n            if (typeof value === 'string') {\n                if (value.indexOf('/') !== -1) {\n                    // TODO(dimond): Allow slashes once ancestor queries are supported\n                    throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it contains a slash.');\n                }\n                if (value === '') {\n                    throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it was an empty string.');\n                }\n                var path = this._query.path.child(new path_ResourcePath([value]));\n                assert(path.length % 2 === 0, 'Path should be a document key');\n                fieldValue = new field_value_RefValue(this.firestore._databaseId, new document_key_DocumentKey(path));\n            }\n            else if (value instanceof database_DocumentReference) {\n                var ref = value;\n                fieldValue = new field_value_RefValue(this.firestore._databaseId, ref._key);\n            }\n            else {\n                throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.where() requires its third parameter to be a \" +\n                    \"string or a DocumentReference if the first parameter is \" +\n                    \"FieldPath.documentId(), but it was: \" +\n                    (valueDescription(value) + \".\"));\n            }\n        }\n        else {\n            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);\n        }\n        var filter = fieldFilter(fieldPath, query_RelationOp.fromString(opStr), fieldValue);\n        this.validateNewFilter(filter);\n        return new Query(this._query.addFilter(filter), this.firestore);\n    };\n    Query.prototype.orderBy = function (field, directionStr) {\n        validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n        validateOptionalArgType('Query.orderBy', 'string', 2, directionStr);\n        var direction;\n        if (directionStr === undefined || directionStr === 'asc') {\n            direction = Direction.ASCENDING;\n        }\n        else if (directionStr === 'desc') {\n            direction = Direction.DESCENDING;\n        }\n        else {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.orderBy() has unknown direction '\" + directionStr + \"', \" +\n                \"expected 'asc' or 'desc'.\");\n        }\n        if (this._query.startAt !== null) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +\n                'Query.startAfter() before calling Query.orderBy().');\n        }\n        if (this._query.endAt !== null) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +\n                'Query.endBefore() before calling Query.orderBy().');\n        }\n        var fieldPath = fieldPathFromArgument('Query.orderBy', field);\n        var orderBy = new query_OrderBy(fieldPath, direction);\n        this.validateNewOrderBy(orderBy);\n        return new Query(this._query.addOrderBy(orderBy), this.firestore);\n    };\n    Query.prototype.limit = function (n) {\n        validateExactNumberOfArgs('Query.limit', arguments, 1);\n        validateArgType('Query.limit', 'number', 1, n);\n        if (n <= 0) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. Query limit (\" + n + \") is invalid. Limit must be \" +\n                'positive.');\n        }\n        return new Query(this._query.withLimit(n), this.firestore);\n    };\n    Query.prototype.startAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.startAfter = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.endBefore = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.endAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.isEqual = function (other) {\n        if (!(other instanceof Query)) {\n            throw invalidClassError('isEqual', 'Query', 1, other);\n        }\n        return (this.firestore === other.firestore && this._query.isEqual(other._query));\n    };\n    /** Helper function to create a bound from a document or fields */\n    Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {\n        validateDefined(methodName, 1, docOrField);\n        if (docOrField instanceof database_DocumentSnapshot) {\n            if (fields.length > 0) {\n                throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"().\");\n            }\n            var snap = docOrField;\n            if (!snap.exists) {\n                throw new error_FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\n                    (methodName + \"().\"));\n            }\n            return this.boundFromDocument(methodName, snap._document, before);\n        }\n        else {\n            var allFields = [docOrField].concat(fields);\n            return this.boundFromFields(methodName, allFields, before);\n        }\n    };\n    /**\n     * Create a Bound from a query and a document.\n     *\n     * Note that the Bound will always include the key of the document\n     * and so only the provided document will compare equal to the returned\n     * position.\n     *\n     * Will throw if the document does not contain all fields of the order by\n     * of the query.\n     */\n    Query.prototype.boundFromDocument = function (methodName, doc, before) {\n        var components = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            if (orderBy.field.isKeyField()) {\n                components.push(new field_value_RefValue(this.firestore._databaseId, doc.key));\n            }\n            else {\n                var value = doc.field(orderBy.field);\n                if (value !== undefined) {\n                    components.push(value);\n                }\n                else {\n                    var field = orderBy.field.canonicalString();\n                    throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\n                        (\"document for which the field '\" + field + \"' (used as the \") +\n                        \"orderBy) does not exist.\");\n                }\n            }\n        }\n        return new query_Bound(components, before);\n    };\n    /**\n     * Converts a list of field values to a Bound for the given query.\n     */\n    Query.prototype.boundFromFields = function (methodName, values, before) {\n        // Use explicit order by's because it has to match the query the user made\n        var orderBy = this._query.explicitOrderBy;\n        if (values.length > orderBy.length) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\n                \"The number of arguments must be less than or equal to the \" +\n                \"number of Query.orderBy() clauses\");\n        }\n        var components = [];\n        for (var i = 0; i < values.length; i++) {\n            var rawValue = values[i];\n            var orderByComponent = orderBy[i];\n            if (orderByComponent.field.isKeyField()) {\n                if (typeof rawValue !== 'string') {\n                    throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\n                        (methodName + \"(), but got a \" + typeof rawValue));\n                }\n                if (rawValue.indexOf('/') !== -1) {\n                    throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Document ID '\" + rawValue + \"' contains a slash in \" +\n                        (methodName + \"()\"));\n                }\n                var key = new document_key_DocumentKey(this._query.path.child(rawValue));\n                components.push(new field_value_RefValue(this.firestore._databaseId, key));\n            }\n            else {\n                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);\n                components.push(wrapped);\n            }\n        }\n        return new query_Bound(components, before);\n    };\n    Query.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n        var options = {};\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('Query.onSnapshot', options, [\n                'includeQueryMetadataChanges',\n                'includeDocumentMetadataChanges'\n            ]);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeDocumentMetadataChanges', options.includeDocumentMetadataChanges);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeQueryMetadataChanges', options.includeQueryMetadataChanges);\n            currArg++;\n        }\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(options, observer);\n    };\n    Query.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (result) {\n                if (observer.next) {\n                    observer.next(new database_QuerySnapshot(_this.firestore, _this._query, result));\n                }\n            },\n            error: errHandler\n        });\n        var firestoreClient = this.firestore.ensureClientConfigured();\n        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            firestoreClient.unlisten(internalListener);\n        };\n    };\n    Query.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('Query.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeDocumentMetadataChanges: false,\n                includeQueryMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (result) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    resolve(result);\n                },\n                error: reject\n            });\n        });\n    };\n    Query.prototype.validateNewFilter = function (filter) {\n        if (filter instanceof query_RelationFilter && filter.isInequality()) {\n            var existingField = this._query.getInequalityFilterField();\n            if (existingField !== null && !existingField.isEqual(filter.field)) {\n                throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\n                    ' (<, <=, >, or >=) must be on the same field. But you have' +\n                    (\" inequality filters on '\" + existingField.toString() + \"'\") +\n                    (\" and '\" + filter.field.toString() + \"'\"));\n            }\n            var firstOrderByField = this._query.getFirstOrderByField();\n            if (firstOrderByField !== null) {\n                this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);\n            }\n        }\n    };\n    Query.prototype.validateNewOrderBy = function (orderBy) {\n        if (this._query.getFirstOrderByField() === null) {\n            // This is the first order by. It must match any inequality.\n            var inequalityField = this._query.getInequalityFilterField();\n            if (inequalityField !== null) {\n                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n            }\n        }\n    };\n    Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {\n        if (!orderBy.isEqual(inequality)) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\n                (\"(<, <=, >, or >=) on field '\" + inequality.toString() + \"' \") +\n                (\"and so you must also use '\" + inequality.toString() + \"' \") +\n                \"as your first Query.orderBy(), but your first Query.orderBy() \" +\n                (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n        }\n    };\n    return Query;\n}());\n\nvar database_QuerySnapshot = /** @class */ (function () {\n    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {\n        this._firestore = _firestore;\n        this._originalQuery = _originalQuery;\n        this._snapshot = _snapshot;\n        this._cachedChanges = null;\n        this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);\n    }\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n        get: function () {\n            var result = [];\n            this.forEach(function (doc) { return result.push(doc); });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n        get: function () {\n            return this._snapshot.docs.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n        get: function () {\n            return this._snapshot.docs.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n        validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n        this._snapshot.docs.forEach(function (doc) {\n            callback.call(thisArg, _this.convertToDocumentImpl(doc));\n        });\n    };\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n        get: function () {\n            return new database_Query(this._originalQuery, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"docChanges\", {\n        get: function () {\n            if (!this._cachedChanges) {\n                this._cachedChanges = changesFromSnapshot(this._firestore, this._snapshot);\n            }\n            return this._cachedChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Check the equality. The call can be very expensive. */\n    QuerySnapshot.prototype.isEqual = function (other) {\n        if (!(other instanceof QuerySnapshot)) {\n            throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);\n        }\n        return (this._firestore === other._firestore &&\n            this._originalQuery.isEqual(other._originalQuery) &&\n            this._snapshot.isEqual(other._snapshot));\n    };\n    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {\n        return new database_QueryDocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache);\n    };\n    return QuerySnapshot;\n}());\n\nvar database_CollectionReference = /** @class */ (function (_super) {\n    tslib_es6[\"__extends\"](CollectionReference, _super);\n    function CollectionReference(path, firestore) {\n        var _this = _super.call(this, query_Query.atPath(path), firestore) || this;\n        if (path.length % 2 !== 1) {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +\n                'references must have an odd number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return _this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\n        get: function () {\n            return this._query.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\n        get: function () {\n            var parentPath = this._query.path.popLast();\n            if (parentPath.isEmpty()) {\n                return null;\n            }\n            else {\n                return new database_DocumentReference(new document_key_DocumentKey(parentPath), this.firestore);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\n        get: function () {\n            return this._query.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (pathString) {\n        validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n        // We allow omission of 'pathString' but explicitly prohibit passing in both\n        // 'undefined' and 'null'.\n        if (arguments.length === 0) {\n            pathString = misc_AutoId.newId();\n        }\n        validateArgType('CollectionReference.doc', 'string', 1, pathString);\n        if (pathString === '') {\n            throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');\n        }\n        var path = path_ResourcePath.fromString(pathString);\n        return database_DocumentReference.forPath(this._query.path.child(path), this.firestore);\n    };\n    CollectionReference.prototype.add = function (value) {\n        validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n        validateArgType('CollectionReference.add', 'object', 1, value);\n        var docRef = this.doc();\n        return docRef.set(value).then(function () { return docRef; });\n    };\n    return CollectionReference;\n}(database_Query));\n\nfunction validateSetOptions(methodName, options) {\n    if (options === undefined) {\n        return {\n            merge: false\n        };\n    }\n    validateOptionNames(methodName, options, ['merge']);\n    validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n    return options;\n}\nfunction validateSnapshotOptions(methodName, options) {\n    if (options === undefined) {\n        return {};\n    }\n    validateOptionNames(methodName, options, ['serverTimestamps']);\n    validateNamedOptionalPropertyEquals(methodName, 'options', 'serverTimestamps', options.serverTimestamps, ['estimate', 'previous', 'none']);\n    return options;\n}\nfunction validateReference(methodName, documentRef, firestore) {\n    if (!(documentRef instanceof database_DocumentReference)) {\n        throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n    }\n    else if (documentRef.firestore !== firestore) {\n        throw new error_FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n    }\n    else {\n        return documentRef;\n    }\n}\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nfunction changesFromSnapshot(firestore, snapshot) {\n    if (snapshot.oldDocs.isEmpty()) {\n        // Special case the first snapshot because index calculation is easy and\n        // fast\n        var lastDoc_1;\n        var index_1 = 0;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new database_QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');\n            assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');\n            lastDoc_1 = change.doc;\n            return {\n                type: 'added',\n                doc: doc,\n                oldIndex: -1,\n                newIndex: index_1++\n            };\n        });\n    }\n    else {\n        // A DocumentSet that is updated incrementally as changes are applied to use\n        // to lookup the index of a document.\n        var indexTracker_1 = snapshot.oldDocs;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new database_QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            var oldIndex = -1;\n            var newIndex = -1;\n            if (change.type !== ChangeType.Added) {\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\n                assert(oldIndex >= 0, 'Index for document not found');\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\n            }\n            if (change.type !== ChangeType.Removed) {\n                indexTracker_1 = indexTracker_1.add(change.doc);\n                newIndex = indexTracker_1.indexOf(change.doc.key);\n            }\n            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };\n        });\n    }\n}\nfunction resultChangeType(type) {\n    switch (type) {\n        case ChangeType.Added:\n            return 'added';\n        case ChangeType.Modified:\n        case ChangeType.Metadata:\n            return 'modified';\n        case ChangeType.Removed:\n            return 'removed';\n        default:\n            return fail('Unknown change type: ' + type);\n    }\n}\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\n// tslint:disable:variable-name\nvar PublicFirestore = makeConstructorPrivate(database_Firestore, 'Use firebase.firestore() instead.');\nvar PublicTransaction = makeConstructorPrivate(database_Transaction, 'Use firebase.firestore().runTransaction() instead.');\nvar PublicWriteBatch = makeConstructorPrivate(database_WriteBatch, 'Use firebase.firestore().batch() instead.');\nvar PublicDocumentReference = makeConstructorPrivate(database_DocumentReference, 'Use firebase.firestore().doc() instead.');\nvar PublicDocumentSnapshot = makeConstructorPrivate(database_DocumentSnapshot);\nvar PublicQueryDocumentSnapshot = makeConstructorPrivate(database_QueryDocumentSnapshot);\nvar PublicQuery = makeConstructorPrivate(database_Query);\nvar PublicQuerySnapshot = makeConstructorPrivate(database_QuerySnapshot);\nvar PublicCollectionReference = makeConstructorPrivate(database_CollectionReference, 'Use firebase.firestore().collection() instead.');\n// tslint:enable:variable-name\n\n//# sourceMappingURL=database.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform/config.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar firestoreNamespace = {\n    Firestore: PublicFirestore,\n    GeoPoint: geo_point_GeoPoint,\n    Blob: PublicBlob,\n    Transaction: PublicTransaction,\n    WriteBatch: PublicWriteBatch,\n    DocumentReference: PublicDocumentReference,\n    DocumentSnapshot: PublicDocumentSnapshot,\n    Query: PublicQuery,\n    QueryDocumentSnapshot: PublicQueryDocumentSnapshot,\n    QuerySnapshot: PublicQuerySnapshot,\n    CollectionReference: PublicCollectionReference,\n    FieldPath: field_path_FieldPath,\n    FieldValue: PublicFieldValue,\n    setLogLevel: database_Firestore.setLogLevel\n};\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n */\nfunction configureForFirebase(firebase) {\n    firebase.INTERNAL.registerService('firestore', function (app) { return new database_Firestore(app); }, shallowCopy(firestoreNamespace));\n}\n/**\n * Exports the Firestore namespace into the provided `exportObject` object under\n * the key 'firestore'. This is used for wrapped binary that exposes Firestore\n * as a goog module.\n */\nfunction configureForStandalone(exportObject) {\n    var copiedNamespace = shallowCopy(firestoreNamespace);\n    // Unlike the use with Firebase, the standalone allows the use of the\n    // constructor, so export it's internal class\n    copiedNamespace['Firestore'] = database_Firestore;\n    exportObject['firestore'] = copiedNamespace;\n}\n\n//# sourceMappingURL=config.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/index.js\n/* harmony export (immutable) */ __webpack_exports__[\"registerFirestore\"] = registerFirestore;\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nfunction registerFirestore(instance) {\n    configureForFirebase(instance);\n}\nregisterFirestore(esm[\"default\"]);\n\n//# sourceMappingURL=index.js.map\n\n\n/***/ }),\n\n/***/ 116:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {(function() {var g,goog=goog||{},k=this;function l(a){return\"string\"==typeof a}function aa(){}\nfunction ba(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"array\"==ba(a)}function ca(a){var b=ba(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length}function da(a){return\"function\"==ba(a)}function ea(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}var p=\"closure_uid_\"+(1E9*Math.random()>>>0),fa=0;function ha(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ia(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function q(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?q=ha:q=ia;return q.apply(null,arguments)}\nfunction ja(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var r=Date.now||function(){return+new Date};function t(a,b){function c(){}c.prototype=b.prototype;a.H=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Db=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ka(a){if(Error.captureStackTrace)Error.captureStackTrace(this,ka);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}t(ka,Error);ka.prototype.name=\"CustomError\";function la(a,b){a=a.split(\"%s\");for(var c=\"\",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:\"%s\");ka.call(this,c+a[d])}t(la,ka);la.prototype.name=\"AssertionError\";function ma(a,b){throw new la(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1));};function u(){0!=na&&(pa[this[p]||(this[p]=++fa)]=this);this.i=this.i;this.m=this.m}var na=0,pa={};u.prototype.i=!1;u.prototype.$=function(){if(!this.i&&(this.i=!0,this.w(),0!=na)){var a=this[p]||(this[p]=++fa);if(0!=na&&this.m&&0<this.m.length)throw Error(this+\" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.\");delete pa[a]}};u.prototype.w=function(){if(this.m)for(;this.m.length;)this.m.shift()()};var qa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(l(a))return l(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ra=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};\nfunction sa(a){a:{var b=ta;for(var c=a.length,d=l(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function ua(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function va(a){return Array.prototype.concat.apply([],arguments)}function wa(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};function xa(a){return/^[\\s\\xa0]*$/.test(a)}var ya=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(a)[1]};function za(a,b){return a<b?-1:a>b?1:0};var w;a:{var Aa=k.navigator;if(Aa){var Ba=Aa.userAgent;if(Ba){w=Ba;break a}}w=\"\"}function x(a){return-1!=w.indexOf(a)};function Ca(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Da(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Ea(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Fa(a){var b={},c;for(c in a)b[c]=a[c];return b}var Ga=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ha(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Ga.length;f++)c=Ga[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ia(a){Ia[\" \"](a);return a}Ia[\" \"]=aa;function Ja(a,b){var c=Ka;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var La=x(\"Opera\"),y=x(\"Trident\")||x(\"MSIE\"),Ma=x(\"Edge\"),Na=Ma||y,Oa=x(\"Gecko\")&&!(-1!=w.toLowerCase().indexOf(\"webkit\")&&!x(\"Edge\"))&&!(x(\"Trident\")||x(\"MSIE\"))&&!x(\"Edge\"),Pa=-1!=w.toLowerCase().indexOf(\"webkit\")&&!x(\"Edge\");function Qa(){var a=k.document;return a?a.documentMode:void 0}var Ra;\na:{var Sa=\"\",Ta=function(){var a=w;if(Oa)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(Ma)return/Edge\\/([\\d\\.]+)/.exec(a);if(y)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Pa)return/WebKit\\/(\\S+)/.exec(a);if(La)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Ta&&(Sa=Ta?Ta[1]:\"\");if(y){var Ua=Qa();if(null!=Ua&&Ua>parseFloat(Sa)){Ra=String(Ua);break a}}Ra=Sa}var Ka={};\nfunction Va(a){return Ja(a,function(){for(var b=0,c=ya(String(Ra)).split(\".\"),d=ya(String(a)).split(\".\"),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||\"\",m=d[f]||\"\";do{h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];m=/(\\d*)(\\D*)(.*)/.exec(m)||[\"\",\"\",\"\",\"\"];if(0==h[0].length&&0==m[0].length)break;b=za(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||za(0==h[2].length,0==m[2].length)||za(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var Wa;var Xa=k.document;\nWa=Xa&&y?Qa()||(\"CSS1Compat\"==Xa.compatMode?parseInt(Ra,10):5):void 0;var Ya=Object.freeze||function(a){return a};var Za=!y||9<=Number(Wa),$a=y&&!Va(\"9\"),ab=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},\"passive\",{get:function(){a=!0}});k.addEventListener(\"test\",aa,b);k.removeEventListener(\"test\",aa,b);return a}();function z(a,b){this.type=a;this.a=this.target=b;this.Qa=!0}z.prototype.b=function(){this.Qa=!1};function bb(a,b){z.call(this,a?a.type:\"\");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key=\"\";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType=\"\";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Oa){a:{try{Ia(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else\"mouseover\"==c?b=\na.fromElement:\"mouseout\"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||\"\";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=\na.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:cb[a.pointerType]||\"\";this.c=a;a.defaultPrevented&&this.b()}}t(bb,z);var cb=Ya({2:\"touch\",3:\"pen\",4:\"mouse\"});bb.prototype.b=function(){bb.H.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,$a)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var db=\"closure_listenable_\"+(1E6*Math.random()|0),eb=0;function fb(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.ga=e;this.key=++eb;this.Z=this.ba=!1}function gb(a){a.Z=!0;a.listener=null;a.proxy=null;a.src=null;a.ga=null};function hb(a){this.src=a;this.a={};this.b=0}hb.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=ib(a,b,d,e);-1<h?(b=a[h],c||(b.ba=!1)):(b=new fb(b,this.src,f,!!d,e),b.ba=c,a.push(b));return b};function jb(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=qa(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(gb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}\nfunction ib(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.Z&&f.listener==b&&f.capture==!!c&&f.ga==d)return e}return-1};var kb=\"closure_lm_\"+(1E6*Math.random()|0),lb={},mb=0;function nb(a,b,c,d,e){if(d&&d.once)return ob(a,b,c,d,e);if(n(b)){for(var f=0;f<b.length;f++)nb(a,b[f],c,d,e);return null}c=pb(c);return a&&a[db]?a.Ha(b,c,ea(d)?!!d.capture:!!d,e):qb(a,b,c,!1,d,e)}\nfunction qb(a,b,c,d,e,f){if(!b)throw Error(\"Invalid event type\");var h=ea(e)?!!e.capture:!!e,m=rb(a);m||(a[kb]=m=new hb(a));c=m.add(b,c,d,h,f);if(c.proxy)return c;d=sb();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)ab||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(tb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error(\"addEventListener and attachEvent are unavailable.\");mb++;return c}\nfunction sb(){var a=ub,b=Za?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function ob(a,b,c,d,e){if(n(b)){for(var f=0;f<b.length;f++)ob(a,b[f],c,d,e);return null}c=pb(c);return a&&a[db]?a.Ia(b,c,ea(d)?!!d.capture:!!d,e):qb(a,b,c,!0,d,e)}\nfunction vb(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)vb(a,b[f],c,d,e);else(d=ea(d)?!!d.capture:!!d,c=pb(c),a&&a[db])?(a=a.f,b=String(b).toString(),b in a.a&&(f=a.a[b],c=ib(f,c,d,e),-1<c&&(gb(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=rb(a))&&(b=a.a[b.toString()],a=-1,b&&(a=ib(b,c,d,e)),(c=-1<a?b[a]:null)&&wb(c))}\nfunction wb(a){if(\"number\"!=typeof a&&a&&!a.Z){var b=a.src;if(b&&b[db])jb(b.f,a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(tb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);mb--;(c=rb(b))?(jb(c,a),0==c.b&&(c.src=null,b[kb]=null)):gb(a)}}}function tb(a){return a in lb?lb[a]:lb[a]=\"on\"+a}\nfunction xb(a,b,c,d){var e=!0;if(a=rb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.Z&&(f=yb(f,d),e=e&&!1!==f)}return e}function yb(a,b){var c=a.listener,d=a.ga||a.src;a.ba&&wb(a);return c.call(d,b)}\nfunction ub(a,b){if(a.Z)return!0;if(!Za){if(!b)a:{b=[\"window\",\"event\"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new bb(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=xb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=xb(d[e],a,!1,b),c=c&&f}return c}return yb(a,\nnew bb(b,this))}function rb(a){a=a[kb];return a instanceof hb?a:null}var zb=\"__closure_events_fn_\"+(1E9*Math.random()>>>0);function pb(a){if(da(a))return a;a[zb]||(a[zb]=function(b){return a.handleEvent(b)});return a[zb]};function A(){u.call(this);this.f=new hb(this);this.N=this;this.J=null}t(A,u);A.prototype[db]=!0;g=A.prototype;g.addEventListener=function(a,b,c,d){nb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){vb(this,a,b,c,d)};\ng.dispatchEvent=function(a){var b,c=this.J;if(c)for(b=[];c;c=c.J)b.push(c);c=this.N;var d=a.type||a;if(l(a))a=new z(a,c);else if(a instanceof z)a.target=a.target||c;else{var e=a;a=new z(d,c);Ha(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=Ab(h,d,!0,a)&&e}h=a.a=c;e=Ab(h,d,!0,a)&&e;e=Ab(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=Ab(h,d,!1,a)&&e;return e};\ng.w=function(){A.H.w.call(this);if(this.f){var a=this.f,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,gb(d[e]);delete a.a[c];a.b--}}this.J=null};g.Ha=function(a,b,c,d){return this.f.add(String(a),b,!1,c,d)};g.Ia=function(a,b,c,d){return this.f.add(String(a),b,!0,c,d)};\nfunction Ab(a,b,c,d){b=a.f.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.Z&&h.capture==c){var m=h.listener,v=h.ga||h.src;h.ba&&jb(a.f,h);e=!1!==m.call(v,d)&&e}}return e&&0!=d.Qa};function Bb(a){return/^\\s*$/.test(a)?!1:/^[\\],:{}\\s\\u2028\\u2029]*$/.test(a.replace(/\\\\[\"\\\\\\/bfnrtu]/g,\"@\").replace(/(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g,\"]\").replace(/(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g,\"\"))}function Cb(a){a=String(a);if(Bb(a))try{return eval(\"(\"+a+\")\")}catch(b){}throw Error(\"Invalid JSON string: \"+a);}function Db(a){var b=[];Eb(new Fb,a,b);return b.join(\"\")}function Fb(){}\nfunction Eb(a,b,c){if(null==b)c.push(\"null\");else{if(\"object\"==typeof b){if(n(b)){var d=b;b=d.length;c.push(\"[\");for(var e=\"\",f=0;f<b;f++)c.push(e),Eb(a,d[f],c),e=\",\";c.push(\"]\");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push(\"{\");e=\"\";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],\"function\"!=typeof f&&(c.push(e),Gb(d,c),c.push(\":\"),Eb(a,f,c),e=\",\"));c.push(\"}\");return}}switch(typeof b){case \"string\":Gb(b,c);break;case \"number\":c.push(isFinite(b)&&\n!isNaN(b)?String(b):\"null\");break;case \"boolean\":c.push(String(b));break;case \"function\":c.push(\"null\");break;default:throw Error(\"Unknown type: \"+typeof b);}}}var Hb={'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\u000b\"},Ib=/\\uffff/.test(\"\\uffff\")?/[\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g:/[\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\nfunction Gb(a,b){b.push('\"',a.replace(Ib,function(a){var b=Hb[a];b||(b=\"\\\\u\"+(a.charCodeAt(0)|65536).toString(16).substr(1),Hb[a]=b);return b}),'\"')};function Jb(a,b){this.c=a;this.f=b;this.b=0;this.a=null}Jb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function Kb(){this.b=this.a=null}var Nb=new Jb(function(){return new Mb},function(a){a.reset()});Kb.prototype.add=function(a,b){var c=Nb.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function Ob(){var a=Pb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Mb(){this.next=this.b=this.a=null}Mb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};Mb.prototype.reset=function(){this.next=this.b=this.a=null};function Qb(a){k.setTimeout(function(){throw a;},0)}var Rb;\nfunction Sb(){var a=k.MessageChannel;\"undefined\"===typeof a&&\"undefined\"!==typeof window&&window.postMessage&&window.addEventListener&&!x(\"Presto\")&&(a=function(){var a=document.createElement(\"IFRAME\");a.style.display=\"none\";a.src=\"\";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write(\"\");a.close();var c=\"callImmediate\"+Math.random(),d=\"file:\"==b.location.protocol?\"*\":b.location.protocol+\"//\"+b.location.host;a=q(function(a){if((\"*\"==d||a.origin==d)&&a.data==\nc)this.port1.onmessage()},this);b.addEventListener(\"message\",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if(\"undefined\"!==typeof a&&!x(\"Trident\")&&!x(\"MSIE\")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.ya;c.ya=null;a()}};return function(a){d.next={ya:a};d=d.next;b.port2.postMessage(0)}}return\"undefined\"!==typeof document&&\"onreadystatechange\"in document.createElement(\"SCRIPT\")?function(a){var b=document.createElement(\"SCRIPT\");\nb.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};var Tb;function Ub(){if(-1!=String(k.Promise).indexOf(\"[native code]\")){var a=k.Promise.resolve(void 0);Tb=function(){a.then(Vb)}}else Tb=function(){var a=Vb;!da(k.setImmediate)||k.Window&&k.Window.prototype&&!x(\"Edge\")&&k.Window.prototype.setImmediate==k.setImmediate?(Rb||(Rb=Sb()),Rb(a)):k.setImmediate(a)}}var Wb=!1,Pb=new Kb;function Vb(){for(var a;a=Ob();){try{a.a.call(a.b)}catch(c){Qb(c)}var b=Nb;b.f(a);100>b.b&&(b.b++,a.next=b.a,b.a=a)}Wb=!1};function Xb(a,b){A.call(this);this.b=a||1;this.a=b||k;this.c=q(this.lb,this);this.g=r()}t(Xb,A);g=Xb.prototype;g.ea=!1;g.O=null;g.lb=function(){if(this.ea){var a=r()-this.g;0<a&&a<.8*this.b?this.O=this.a.setTimeout(this.c,this.b-a):(this.O&&(this.a.clearTimeout(this.O),this.O=null),this.dispatchEvent(\"tick\"),this.ea&&(this.O=this.a.setTimeout(this.c,this.b),this.g=r()))}};g.start=function(){this.ea=!0;this.O||(this.O=this.a.setTimeout(this.c,this.b),this.g=r())};\nfunction Yb(a){a.ea=!1;a.O&&(a.a.clearTimeout(a.O),a.O=null)}g.w=function(){Xb.H.w.call(this);Yb(this);delete this.a};function Zb(a,b,c){if(da(a))c&&(a=q(a,c));else if(a&&\"function\"==typeof a.handleEvent)a=q(a.handleEvent,a);else throw Error(\"Invalid listener argument\");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)};function $b(a,b,c){u.call(this);this.f=null!=c?q(a,c):a;this.c=b;this.b=q(this.fb,this);this.a=[]}t($b,u);g=$b.prototype;g.ha=!1;g.Y=null;g.Ya=function(a){this.a=arguments;this.Y?this.ha=!0:ac(this)};g.w=function(){$b.H.w.call(this);this.Y&&(k.clearTimeout(this.Y),this.Y=null,this.ha=!1,this.a=[])};g.fb=function(){this.Y=null;this.ha&&(this.ha=!1,ac(this))};function ac(a){a.Y=Zb(a.b,a.c);a.f.apply(null,a.a)};function bc(a){u.call(this);this.b=a;this.a={}}t(bc,u);var cc=[];function dc(a,b,c,d){n(c)||(c&&(cc[0]=c.toString()),c=cc);for(var e=0;e<c.length;e++){var f=nb(b,c[e],d||a.handleEvent,!1,a.b||a);if(!f)break;a.a[f.key]=f}}function ec(a){Ca(a.a,function(a,c){this.a.hasOwnProperty(c)&&wb(a)},a);a.a={}}bc.prototype.w=function(){bc.H.w.call(this);ec(this)};bc.prototype.handleEvent=function(){throw Error(\"EventHandler.handleEvent not implemented\");};function fc(a,b,c){this.reset(a,b,c,void 0,void 0)}fc.prototype.a=null;var gc=0;fc.prototype.reset=function(a,b,c,d,e){\"number\"==typeof e||gc++;d||r();delete this.a};function hc(a){this.f=a;this.b=this.c=this.a=null}function B(a,b){this.name=a;this.value=b}B.prototype.toString=function(){return this.name};var ic=new B(\"SEVERE\",1E3),jc=new B(\"WARNING\",900),kc=new B(\"INFO\",800),lc=new B(\"CONFIG\",700),mc=new B(\"FINE\",500);function nc(a){if(a.c)return a.c;if(a.a)return nc(a.a);ma(\"Root logger has no level set.\");return null}hc.prototype.log=function(a,b,c){if(a.value>=nc(this).value)for(da(b)&&(b=b()),a=new fc(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};\nvar oc={},pc=null;function qc(a){pc||(pc=new hc(\"\"),oc[\"\"]=pc,pc.c=lc);var b;if(!(b=oc[a])){b=new hc(a);var c=a.lastIndexOf(\".\"),d=a.substr(c+1);c=qc(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;oc[a]=b}return b};function C(a,b){a&&a.log(jc,b,void 0)}function rc(a,b){a&&a.log(kc,b,void 0)}function D(a,b){a&&a.log(mc,b,void 0)};function sc(){this.a=qc(\"goog.labs.net.webChannel.WebChannelDebug\");this.b=!0}sc.prototype.Ea=function(){this.b=!1};function tc(a,b,c,d,e,f){E(a,function(){if(a.b)if(f){var h=\"\";for(var m=f.split(\"&\"),v=0;v<m.length;v++){var I=m[v].split(\"=\");if(1<I.length){var W=I[0];I=I[1];var Lb=W.split(\"_\");h=2<=Lb.length&&\"type\"==Lb[1]?h+(W+\"=\"+I+\"&\"):h+(W+\"=redacted&\")}}}else h=null;else h=f;return\"XMLHTTP REQ (\"+d+\") [attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+h})}\nfunction uc(a,b,c,d,e,f,h){E(a,function(){return\"XMLHTTP RESP (\"+d+\") [ attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+f+\" \"+h})}function F(a,b,c,d){E(a,function(){return\"XMLHTTP TEXT (\"+b+\"): \"+vc(a,c)+(d?\" \"+d:\"\")})}function wc(a,b){E(a,function(){return\"TIMEOUT: \"+b})}function G(a,b){D(a.a,b)}function xc(a,b,c){(a=a.a)&&a.log(ic,c||\"Exception\",b)}function E(a,b){rc(a.a,b)}function H(a,b){(a=a.a)&&a.log(ic,b,void 0)}\nfunction vc(a,b){if(!a.b)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(var d=0;d<c.length;d++)if(n(c[d])){var e=c[d];if(!(2>e.length)){var f=e[1];if(n(f)&&!(1>f.length)){var h=f[0];if(\"noop\"!=h&&\"stop\"!=h&&\"close\"!=h)for(var m=1;m<f.length;m++)f[m]=\"\"}}}return Db(c)}catch(v){return G(a,\"Exception parsing expected JS array - probably was not JS\"),b}};var J=new A;function yc(a){z.call(this,\"serverreachability\",a)}t(yc,z);function zc(a){J.dispatchEvent(new yc(J,a))}function Ac(a){z.call(this,\"statevent\",a)}t(Ac,z);function K(a){J.dispatchEvent(new Ac(J,a))}function Bc(a){z.call(this,\"timingevent\",a)}t(Bc,z);function Cc(a,b,c){J.dispatchEvent(new Bc(J,a,b,c))}function Dc(a,b){if(!da(a))throw Error(\"Fn must not be null and must be a function\");return k.setTimeout(function(){a()},b)};var Ec={NO_ERROR:0,mb:1,tb:2,sb:3,pb:4,rb:5,ub:6,Sa:7,TIMEOUT:8,xb:9};var Fc={ob:\"complete\",Bb:\"success\",Ta:\"error\",Sa:\"abort\",zb:\"ready\",Ab:\"readystatechange\",TIMEOUT:\"timeout\",vb:\"incrementaldata\",yb:\"progress\",qb:\"downloadprogress\",Cb:\"uploadprogress\"};function Gc(){}var Hc={OPEN:\"a\",nb:\"b\",Ta:\"c\",wb:\"d\"};function Ic(){z.call(this,\"d\")}t(Ic,z);function Jc(){z.call(this,\"c\")}t(Jc,z);function Kc(){}Kc.prototype.a=null;function Lc(a){var b;(b=a.a)||(b={},Mc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Nc;function Oc(){}t(Oc,Kc);function Pc(a){return(a=Mc(a))?new ActiveXObject(a):new XMLHttpRequest}function Mc(a){if(!a.b&&\"undefined\"==typeof XMLHttpRequest&&\"undefined\"!=typeof ActiveXObject){for(var b=[\"MSXML2.XMLHTTP.6.0\",\"MSXML2.XMLHTTP.3.0\",\"MSXML2.XMLHTTP\",\"Microsoft.XMLHTTP\"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error(\"Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed\");}return a.b}Nc=new Oc;function L(a,b,c,d){this.i=a;this.b=b;this.c=c;this.T=d||1;this.L=new bc(this);this.R=Qc;a=Na?125:void 0;this.S=new Xb(a);this.j=null;this.f=!1;this.l=this.g=this.h=this.J=this.D=this.U=this.s=null;this.u=[];this.a=null;this.G=0;this.m=this.o=null;this.C=-1;this.B=!1;this.N=0;this.I=null;this.v=this.X=this.K=!1}var Qc=45E3;\nfunction Rc(a,b){switch(a){case 0:return\"Non-200 return code (\"+b+\")\";case 1:return\"XMLHTTP failure (no data)\";case 2:return\"HttpConnection timeout\";default:return\"Unknown error\"}}var Sc={},Tc={};g=L.prototype;g.setTimeout=function(a){this.R=a};function Uc(a,b,c){a.J=1;a.h=Vc(M(b));a.l=c;a.K=!0;Wc(a,null)}function Xc(a,b,c,d){a.J=1;a.h=Vc(M(b));a.l=null;a.K=c;Wc(a,d)}\nfunction Wc(a,b){a.D=r();Yc(a);a.g=M(a.h);Zc(a.g,\"t\",a.T);a.G=0;a.a=a.i.ca(a.i.ia()?b:null);0<a.N&&(a.I=new $b(q(a.Ra,a,a.a),a.N));dc(a.L,a.a,\"readystatechange\",a.ib);b=a.j?Fa(a.j):{};a.l?(a.o||(a.o=\"POST\"),b[\"Content-Type\"]=\"application/x-www-form-urlencoded\",a.a.fa(a.g,a.o,a.l,b)):(a.o=\"GET\",a.a.fa(a.g,a.o,null,b));zc(1);tc(a.b,a.o,a.g,a.c,a.T,a.l)}g.ib=function(a){a=a.target;var b=this.I;b&&3==N(a)?(G(this.b,\"Throttling readystatechange.\"),b.Ya()):this.Ra(a)};\ng.Ra=function(a){try{a==this.a?$c(this):C(this.b.a,\"Called back with an unexpected xmlhttp\")}catch(c){if(G(this.b,\"Failed call to OnXmlHttpReadyStateChanged_\"),this.a&&this.a.V()){var b=this;xc(this.b,c,function(){return\"ResponseText: \"+b.a.V()})}else xc(this.b,c,\"No response text\")}finally{}};\nfunction $c(a){var b=N(a.a),c=a.a.Fa(),d=a.a.W();if(!(3>b||3==b&&!Na&&!a.a.V())){a.B||4!=b||7==c||(8==c||0>=d?zc(3):zc(2));ad(a);var e=a.a.W();a.C=e;(c=a.a.V())||G(a.b,function(){return\"No response text for uri \"+a.g+\" status \"+e});a.f=200==e;uc(a.b,a.o,a.g,a.c,a.T,b,e);if(a.f){if(d=bd(a))F(a.b,a.c,d,\"Initial handshake response via X-HTTP-Initial-Response\"),a.v=!0,cd(a,d);a.K?(dd(a,b,c),Na&&a.f&&3==b&&ed(a)):(F(a.b,a.c,c,null),cd(a,c));4==b&&fd(a);a.f&&!a.B&&(4==b?a.i.ta(a):(a.f=!1,Yc(a)))}else 400==\ne&&0<c.indexOf(\"Unknown SID\")?(a.m=3,K(12),C(a.b.a,\"XMLHTTP Unknown SID (\"+a.c+\")\")):(a.m=0,K(13),C(a.b.a,\"XMLHTTP Bad status \"+e+\" (\"+a.c+\")\")),fd(a),gd(a)}}function bd(a){return!a.X||a.v?null:a.a&&(a=hd(a.a,\"X-HTTP-Initial-Response\"))&&!xa(a)?a:null}\nfunction dd(a,b,c){for(var d=!0;!a.B&&a.G<c.length;){var e=id(a,c);if(e==Tc){4==b&&(a.m=4,K(14),d=!1);F(a.b,a.c,null,\"[Incomplete Response]\");break}else if(e==Sc){a.m=4;K(15);F(a.b,a.c,c,\"[Invalid Chunk]\");d=!1;break}else F(a.b,a.c,e,null),cd(a,e)}4==b&&0==c.length&&(a.m=1,K(16),d=!1);a.f=a.f&&d;d||(F(a.b,a.c,c,\"[Invalid Chunked Response]\"),fd(a),gd(a))}g.hb=function(){if(this.a){var a=N(this.a),b=this.a.V();this.G<b.length&&(ad(this),dd(this,a,b),this.f&&4!=a&&Yc(this))}};\nfunction ed(a){dc(a.L,a.S,\"tick\",a.hb);a.S.start()}function id(a,b){var c=a.G,d=b.indexOf(\"\\n\",c);if(-1==d)return Tc;c=Number(b.substring(c,d));if(isNaN(c))return Sc;d+=1;if(d+c>b.length)return Tc;b=b.substr(d,c);a.G=d+c;return b}g.cancel=function(){this.B=!0;fd(this)};function Yc(a){a.U=r()+a.R;jd(a,a.R)}function jd(a,b){if(null!=a.s)throw Error(\"WatchDog timer not null\");a.s=Dc(q(a.gb,a),b)}function ad(a){a.s&&(k.clearTimeout(a.s),a.s=null)}\ng.gb=function(){this.s=null;var a=r();0<=a-this.U?(this.f&&H(this.b,\"Received watchdog timeout even though request loaded successfully\"),wc(this.b,this.g),2!=this.J&&(zc(3),K(17)),fd(this),this.m=2,gd(this)):(C(this.b.a,\"WatchDog timer called too early\"),jd(this,this.U-a))};function gd(a){a.i.Ka()||a.B||a.i.ta(a)}function fd(a){ad(a);var b=a.I;b&&\"function\"==typeof b.$&&b.$();a.I=null;Yb(a.S);ec(a.L);a.a&&(b=a.a,a.a=null,b.abort(),b.$())}\nfunction cd(a,b){try{a.i.Na(a,b),zc(4)}catch(c){xc(a.b,c,\"Error in httprequest callback\")}};function kd(a){if(a.A&&\"function\"==typeof a.A)return a.A();if(l(a))return a.split(\"\");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Da(a)}\nfunction ld(a,b){if(a.forEach&&\"function\"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||l(a))ra(a,b,void 0);else{if(a.M&&\"function\"==typeof a.M)var c=a.M();else if(a.A&&\"function\"==typeof a.A)c=void 0;else if(ca(a)||l(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else c=Ea(a);d=kd(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}};function O(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error(\"Uneven number of arguments\");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a)if(a instanceof O)for(c=a.M(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d])}g=O.prototype;g.A=function(){md(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.M=function(){md(this);return this.a.concat()};\nfunction nd(a){a.b={};a.a.length=0;a.c=0}function od(a,b){return P(a.b,b)?(delete a.b[b],a.c--,a.a.length>2*a.c&&md(a),!0):!1}function md(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];P(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],P(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return P(this.b,a)?this.b[a]:b};g.set=function(a,b){P(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};\ng.forEach=function(a,b){for(var c=this.M(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function P(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var pd=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;function qd(a,b){if(a){a=a.split(\"&\");for(var c=0;c<a.length;c++){var d=a[c].indexOf(\"=\"),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\\+/g,\" \")):\"\")}}};function Q(a,b){this.b=this.j=this.f=\"\";this.i=null;this.g=this.a=\"\";this.h=!1;var c;a instanceof Q?(this.h=void 0!==b?b:a.h,rd(this,a.f),this.j=a.j,sd(this,a.b),td(this,a.i),this.a=a.a,ud(this,vd(a.c)),this.g=a.g):a&&(c=String(a).match(pd))?(this.h=!!b,rd(this,c[1]||\"\",!0),this.j=wd(c[2]||\"\"),sd(this,c[3]||\"\",!0),td(this,c[4]),this.a=wd(c[5]||\"\",!0),ud(this,c[6]||\"\",!0),this.g=wd(c[7]||\"\")):(this.h=!!b,this.c=new xd(null,this.h))}\nQ.prototype.toString=function(){var a=[],b=this.f;b&&a.push(yd(b,zd,!0),\":\");var c=this.b;if(c||\"file\"==b)a.push(\"//\"),(b=this.j)&&a.push(yd(b,zd,!0),\"@\"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),c=this.i,null!=c&&a.push(\":\",String(c));if(c=this.a)this.b&&\"/\"!=c.charAt(0)&&a.push(\"/\"),a.push(yd(c,\"/\"==c.charAt(0)?Ad:Bd,!0));(c=this.c.toString())&&a.push(\"?\",c);(c=this.g)&&a.push(\"#\",yd(c,Cd));return a.join(\"\")};\nQ.prototype.resolve=function(a){var b=M(this),c=!!a.f;c?rd(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?sd(b,a.b):c=null!=a.i;var d=a.a;if(c)td(b,a.i);else if(c=!!a.a){if(\"/\"!=d.charAt(0))if(this.b&&!this.a)d=\"/\"+d;else{var e=b.a.lastIndexOf(\"/\");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(\"..\"==e||\".\"==e)d=\"\";else if(-1!=e.indexOf(\"./\")||-1!=e.indexOf(\"/.\")){d=0==e.lastIndexOf(\"/\",0);e=e.split(\"/\");for(var f=[],h=0;h<e.length;){var m=e[h++];\".\"==m?d&&h==e.length&&f.push(\"\"):\"..\"==m?((1<f.length||1==f.length&&\"\"!=\nf[0])&&f.pop(),d&&h==e.length&&f.push(\"\")):(f.push(m),d=!0)}d=f.join(\"/\")}else d=e}c?b.a=d:c=\"\"!==a.c.toString();c?ud(b,vd(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function M(a){return new Q(a)}function rd(a,b,c){a.f=c?wd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,\"\"))}function sd(a,b,c){a.b=c?wd(b,!0):b}function td(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error(\"Bad port number \"+b);a.i=b}else a.i=null}function ud(a,b,c){b instanceof xd?(a.c=b,Dd(a.c,a.h)):(c||(b=yd(b,Ed)),a.c=new xd(b,a.h))}\nfunction R(a,b,c){a.c.set(b,c)}function Zc(a,b,c){n(c)||(c=[String(c)]);Fd(a.c,b,c)}function Vc(a){R(a,\"zx\",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^r()).toString(36));return a}function Gd(a){return a instanceof Q?M(a):new Q(a,void 0)}function Hd(a,b,c,d){var e=new Q(null,void 0);a&&rd(e,a);b&&sd(e,b);c&&td(e,c);d&&(e.a=d);return e}function wd(a,b){return a?b?decodeURI(a.replace(/%25/g,\"%2525\")):decodeURIComponent(a):\"\"}\nfunction yd(a,b,c){return l(a)?(a=encodeURI(a).replace(b,Id),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),a):null}function Id(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)}var zd=/[#\\/\\?@]/g,Bd=/[#\\?:]/g,Ad=/[#\\?]/g,Ed=/[#\\?@]/g,Cd=/#/g;function xd(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}function S(a){a.a||(a.a=new O,a.b=0,a.c&&qd(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\\+/g,\" \")),c)}))}g=xd.prototype;\ng.add=function(a,b){S(this);this.c=null;a=Jd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Kd(a,b){S(a);b=Jd(a,b);P(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,od(a.a,b))}function Ld(a,b){S(a);b=Jd(a,b);return P(a.a.b,b)}g.forEach=function(a,b){S(this);this.a.forEach(function(c,d){ra(c,function(c){a.call(b,c,d,this)},this)},this)};\ng.M=function(){S(this);for(var a=this.a.A(),b=this.a.M(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.A=function(a){S(this);var b=[];if(l(a))Ld(this,a)&&(b=va(b,this.a.get(Jd(this,a))));else{a=this.a.A();for(var c=0;c<a.length;c++)b=va(b,a[c])}return b};g.set=function(a,b){S(this);this.c=null;a=Jd(this,a);Ld(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.A(a):[];return 0<a.length?String(a[0]):b};\nfunction Fd(a,b,c){Kd(a,b);0<c.length&&(a.c=null,a.a.set(Jd(a,b),wa(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return\"\";for(var a=[],b=this.a.M(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.A(d);for(var f=0;f<d.length;f++){var h=e;\"\"!==d[f]&&(h+=\"=\"+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join(\"&\")};function vd(a){var b=new xd;b.c=a.c;a.a&&(b.a=new O(a.a),b.b=a.b);return b}\nfunction Jd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function Dd(a,b){b&&!a.f&&(S(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(Kd(this,b),Fd(this,c,a))},a));a.f=b};function Md(){this.a=r()}var Nd=null;Md.prototype.set=function(a){this.a=a};Md.prototype.reset=function(){this.set(r())};Md.prototype.get=function(){return this.a};function Od(){Nd||(Nd=new Md)}function Pd(){Nd||(Nd=new Md)}t(Pd,Od);function Qd(a,b){this.a=a;this.b=b;this.c=this.i=null;this.h=!1;this.m=null;this.f=-1;this.l=this.g=null}g=Qd.prototype;g.P=null;\nfunction Rd(a){G(a.b,\"TestConnection: starting stage 2\");var b=a.a.I.a;if(null!=b)G(a.b,function(){return true?\"Buffered\":\"Unbuffered\"}),K(4),b?(K(10),Sd(a.a,a,!1)):(K(11),Sd(a.a,a,!0));else{a.c=new L(a,a.b,void 0,void 0);a.c.j=a.i;var c=Td(a.a,a.g,a.m);K(4);Zc(c,\"TYPE\",\"xmlhttp\");var d=a.a.j,e=a.a.K;d&&e&&R(c,d,e);Xc(a.c,c,!1,a.g)}}g.ca=function(a){return this.a.ca(a)};g.abort=function(){this.c&&(this.c.cancel(),this.c=null);this.f=-1};\ng.Ka=function(){return!1};\ng.Na=function(a,b){this.f=a.C;if(0==this.P){G(this.b,\"TestConnection: Got data for stage 1\");if(!this.a.o&&(a=a.a)){var c=hd(a,\"X-Client-Wire-Protocol\");this.l=c?c:null;this.a.j&&((a=hd(a,\"X-HTTP-Session-Id\"))?this.a.K=a:C(this.b.a,\"Missing X_HTTP_SESSION_ID in the handshake response\"))}if(b){try{var d=this.a.la.a.parse(b)}catch(e){xc(this.b,e);Ud(this.a,this);return}this.g=d[0]}else G(this.b,\"TestConnection: Null responseText\"),Ud(this.a,this)}else if(1==this.P)if(this.h)K(6);else if(\"11111\"==b){if(K(5),\nthis.h=!0,!y||10<=Number(Wa))this.f=200,this.c.cancel(),G(this.b,\"Test connection succeeded; using streaming connection\"),K(11),Sd(this.a,this,!0)}else K(7),this.h=!1};\ng.ta=function(){this.f=this.c.C;this.c.f?0==this.P?(this.P=1,G(this.b,\"TestConnection: request complete for initial check\"),Rd(this)):1==this.P&&(G(this.b,\"TestConnection: request complete for stage 2\"),this.h?(G(this.b,\"Test connection succeeded; using streaming connection\"),K(11),Sd(this.a,this,!0)):(G(this.b,\"Test connection failed; not using streaming\"),K(10),Sd(this.a,this,!1))):(G(this.b,\"TestConnection: request failed, in state \"+this.P),0==this.P?K(8):1==this.P&&K(9),Ud(this.a,this))};\ng.ia=function(){return this.a.ia()};g.qa=function(){return this.a.qa()};function Vd(){this.a=this.b=null};function Wd(){this.a=new O}function Xd(a){var b=typeof a;return\"object\"==b&&a||\"function\"==b?\"o\"+(a[p]||(a[p]=++fa)):b.charAt(0)+a}Wd.prototype.add=function(a){this.a.set(Xd(a),a)};Wd.prototype.A=function(){return this.a.A()};function Yd(a,b){this.a=a;this.b=b};function Zd(a){this.g=a||$d;this.f=k.oa&&k.oa.La&&k.oa.La()&&k.oa.La().Fb?this.g:1;this.a=null;1<this.f&&(this.a=new Wd);this.b=null;this.c=[]}var $d=10;function ae(a,b){a.a||-1==b.indexOf(\"spdy\")&&-1==b.indexOf(\"quic\")&&-1==b.indexOf(\"h2\")||(a.f=a.g,a.a=new Wd,a.b&&(be(a,a.b),a.b=null))}function ce(a){return a.b?!0:a.a?a.a.a.c>=a.f:!1}function de(a,b){a.b?a=a.b==b:a.a?(b=Xd(b),a=P(a.a.a.b,b)):a=!1;return a}function be(a,b){a.a?a.a.add(b):a.b=b}\nfunction ee(a,b){if(a.b&&a.b==b)a.b=null;else{var c;if(c=a.a)c=Xd(b),c=P(a.a.a.b,c);c&&od(a.a.a,Xd(b))}}Zd.prototype.cancel=function(){this.c=fe(this);this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(ra(this.a.A(),function(a){a.cancel()}),nd(this.a.a))};function fe(a){if(null!=a.b)return a.c.concat(a.b.u);if(null!=a.a&&0!=a.a.a.c){var b=a.c;ra(a.a.A(),function(a){b=b.concat(a.u)});return b}return wa(a.c)}function ge(a,b){a.c=a.c.concat(b)};function he(){}he.prototype.stringify=function(a){return k.JSON.stringify(a,void 0)};he.prototype.parse=function(a){return k.JSON.parse(a,void 0)};function ie(){this.a=new he}function je(a,b,c){var d=c||\"\";try{ld(a,function(a,c){var e=a;ea(a)&&(e=Db(a));b.push(d+c+\"=\"+encodeURIComponent(e))})}catch(e){throw b.push(d+\"type=\"+encodeURIComponent(\"_badmap\")),e;}};function ke(a,b){var c=new sc;G(c,\"TestLoadImage: loading \"+a);var d=new Image;d.onload=ja(le,c,d,\"TestLoadImage: loaded\",!0,b);d.onerror=ja(le,c,d,\"TestLoadImage: error\",!1,b);d.onabort=ja(le,c,d,\"TestLoadImage: abort\",!1,b);d.ontimeout=ja(le,c,d,\"TestLoadImage: timeout\",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function le(a,b,c,d,e){try{G(a,c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){xc(a,f)}};function T(a){A.call(this);this.headers=new O;this.D=a||null;this.c=!1;this.v=this.a=null;this.K=this.u=\"\";this.j=0;this.g=\"\";this.h=this.I=this.s=this.G=!1;this.l=0;this.B=null;this.L=me;this.C=this.o=!1}t(T,A);var me=\"\";T.prototype.b=qc(\"goog.net.XhrIo\");var ne=/^https?$/i,oe=[\"POST\",\"PUT\"];g=T.prototype;\ng.fa=function(a,b,c,d){if(this.a)throw Error(\"[goog.net.XhrIo] Object is active with another request=\"+this.u+\"; newUri=\"+a);b=b?b.toUpperCase():\"GET\";this.u=a;this.g=\"\";this.j=0;this.K=b;this.G=!1;this.c=!0;this.a=this.D?Pc(this.D):Pc(Nc);this.v=this.D?Lc(this.D):Lc(Nc);this.a.onreadystatechange=q(this.Ma,this);try{D(this.b,U(this,\"Opening Xhr\")),this.I=!0,this.a.open(b,String(a),!0),this.I=!1}catch(f){D(this.b,U(this,\"Error opening Xhr: \"+f.message));pe(this,f);return}a=c||\"\";var e=new O(this.headers);\nd&&ld(d,function(a,b){e.set(b,a)});d=sa(e.M());c=k.FormData&&a instanceof k.FormData;!(0<=qa(oe,b))||d||c||e.set(\"Content-Type\",\"application/x-www-form-urlencoded;charset=utf-8\");e.forEach(function(a,b){this.a.setRequestHeader(b,a)},this);this.L&&(this.a.responseType=this.L);\"withCredentials\"in this.a&&this.a.withCredentials!==this.o&&(this.a.withCredentials=this.o);try{qe(this),0<this.l&&(this.C=re(this.a),D(this.b,U(this,\"Will abort after \"+this.l+\"ms if incomplete, xhr2 \"+this.C)),this.C?(this.a.timeout=\nthis.l,this.a.ontimeout=q(this.Ja,this)):this.B=Zb(this.Ja,this.l,this)),D(this.b,U(this,\"Sending request\")),this.s=!0,this.a.send(a),this.s=!1}catch(f){D(this.b,U(this,\"Send error: \"+f.message)),pe(this,f)}};function re(a){return y&&Va(9)&&\"number\"==typeof a.timeout&&void 0!==a.ontimeout}function ta(a){return\"content-type\"==a.toLowerCase()}\ng.Ja=function(){\"undefined\"!=typeof goog&&this.a&&(this.g=\"Timed out after \"+this.l+\"ms, aborting\",this.j=8,D(this.b,U(this,this.g)),this.dispatchEvent(\"timeout\"),this.abort(8))};function pe(a,b){a.c=!1;a.a&&(a.h=!0,a.a.abort(),a.h=!1);a.g=b;a.j=5;se(a);te(a)}function se(a){a.G||(a.G=!0,a.dispatchEvent(\"complete\"),a.dispatchEvent(\"error\"))}\ng.abort=function(a){this.a&&this.c&&(D(this.b,U(this,\"Aborting\")),this.c=!1,this.h=!0,this.a.abort(),this.h=!1,this.j=a||7,this.dispatchEvent(\"complete\"),this.dispatchEvent(\"abort\"),te(this))};g.w=function(){this.a&&(this.c&&(this.c=!1,this.h=!0,this.a.abort(),this.h=!1),te(this,!0));T.H.w.call(this)};g.Ma=function(){this.i||(this.I||this.s||this.h?ue(this):this.eb())};g.eb=function(){ue(this)};\nfunction ue(a){if(a.c&&\"undefined\"!=typeof goog)if(a.v[1]&&4==N(a)&&2==a.W())D(a.b,U(a,\"Local request error detected and ignored\"));else if(a.s&&4==N(a))Zb(a.Ma,0,a);else if(a.dispatchEvent(\"readystatechange\"),4==N(a)){D(a.b,U(a,\"Request complete\"));a.c=!1;try{var b=a.W();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.u).match(pd)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;\nf=h.substr(0,h.length-1)}e=!ne.test(f?f.toLowerCase():\"\")}d=e}d?(a.dispatchEvent(\"complete\"),a.dispatchEvent(\"success\")):(a.j=6,a.g=a.Ga()+\" [\"+a.W()+\"]\",se(a))}finally{te(a)}}}function te(a,b){if(a.a){qe(a);var c=a.a,d=a.v[0]?aa:null;a.a=null;a.v=null;b||a.dispatchEvent(\"ready\");try{c.onreadystatechange=d}catch(e){(a=a.b)&&a.log(ic,\"Problem encountered resetting onreadystatechange: \"+e.message,void 0)}}}function qe(a){a.a&&a.C&&(a.a.ontimeout=null);a.B&&(k.clearTimeout(a.B),a.B=null)}\nfunction N(a){return a.a?a.a.readyState:0}g.W=function(){try{return 2<N(this)?this.a.status:-1}catch(a){return-1}};g.Ga=function(){try{return 2<N(this)?this.a.statusText:\"\"}catch(a){return D(this.b,\"Can not get status: \"+a.message),\"\"}};g.V=function(){try{return this.a?this.a.responseText:\"\"}catch(a){return D(this.b,\"Can not get responseText: \"+a.message),\"\"}};\ng.Za=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));a:{a=b;if(k.JSON)try{var c=k.JSON.parse(a);break a}catch(d){}c=Cb(a)}return c}};function hd(a,b){return a.a?a.a.getResponseHeader(b):null}g.Fa=function(){return this.j};g.bb=function(){return l(this.g)?this.g:String(this.g)};function U(a,b){return b+\" [\"+a.K+\" \"+a.u+\" \"+a.W()+\"]\"};function ve(a){var b=\"\";Ca(a,function(a,d){b+=d;b+=\":\";b+=a;b+=\"\\r\\n\"});return b}function we(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=ve(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?\"=\"+encodeURIComponent(String(c)):\"\";if(b+=c){c=a.indexOf(\"#\");0>c&&(c=a.length);d=a.indexOf(\"?\");if(0>d||d>c){d=c;var e=\"\"}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+\"&\"+b:b:c;a=a[0]+(a[1]?\"?\"+a[1]:\"\")+a[2]}return a}R(a,b,c);return a};function xe(a){this.xa=0;this.g=[];this.a=new sc;this.I=new Vd;this.X=this.ua=this.D=this.ja=this.b=this.K=this.j=this.U=this.h=this.L=this.i=null;this.Va=this.R=0;this.Ua=a&&a.Eb||!1;this.ka=this.C=this.s=this.l=this.m=this.f=null;this.u=this.wa=this.N=-1;this.T=this.B=this.v=0;this.G=void 0;this.S=a&&a.supportsCrossDomainXhr||!1;this.J=\"\";this.c=new Zd(a&&a.concurrentRequestLimit);this.la=new ie;this.o=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;(this.va=a&&a.fastHandshake||!1)&&\n!this.o&&(C(this.a.a,\"Force backgroundChannelTest when fastHandshake is enabled.\"),this.o=!0);a&&a.Ea&&this.a.Ea()}g=xe.prototype;g.na=8;g.F=1;\nfunction ye(a){G(a.a,\"disconnect()\");ze(a);if(3==a.F){var b=a.R++,c=M(a.D);R(c,\"SID\",a.J);R(c,\"RID\",b);R(c,\"TYPE\",\"terminate\");Ae(a,c);b=new L(a,a.a,b,void 0);b.J=2;b.h=Vc(M(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.h.toString(),\"\"));!c&&k.Image&&((new Image).src=b.h,c=!0);c||(b.a=b.i.ca(null),b.a.fa(b.h));b.D=r();Yc(b)}Be(a)}\nfunction ze(a){a.C&&(a.C.abort(),a.C=null);a.b&&(a.b.cancel(),a.b=null);a.l&&(k.clearTimeout(a.l),a.l=null);Ce(a);a.c.cancel();a.m&&(k.clearTimeout(a.m),a.m=null)}function De(a,b){1E3==a.g.length&&H(a.a,function(){return\"Already have 1000 queued maps upon queueing \"+Db(b)});a.g.push(new Yd(a.Va++,b));3==a.F&&Ee(a)}g.Ka=function(){return 0==this.F};function Ee(a){ce(a.c)||a.m||(a.m=Dc(q(a.Pa,a),0),a.v=0)}\nfunction Fe(a,b){var c=a.c;if((c.b?1:c.a?c.a.a.c:0)>=a.c.f-(a.m?1:0))return H(a.a,\"Unexpected retry request is scheduled.\"),!1;if(a.m)return G(a.a,\"Use the retry request that is already scheduled.\"),a.g=b.u.concat(a.g),!0;if(1==a.F||2==a.F||a.v>=(a.Ua?0:2))return!1;G(a.a,\"Going to retry POST\");a.m=Dc(q(a.Pa,a,b),Ge(a,a.v));a.v++;return!0}\ng.Pa=function(a){this.m=null;G(this.a,\"startForwardChannel_\");if(1==this.F)if(a)H(this.a,\"Not supposed to retry the open\");else{G(this.a,\"open_()\");this.R=Math.floor(1E5*Math.random());a=this.R++;var b=new L(this,this.a,a,void 0),c=this.i;this.L&&(c?(c=Fa(c),Ha(c,this.L)):c=this.L);null===this.h&&(b.j=c);var d=He(this,b),e=M(this.D);R(e,\"RID\",a);R(e,\"CVER\",22);this.o&&this.j&&R(e,\"X-HTTP-Session-Id\",this.j);Ae(this,e);this.h&&c&&we(e,this.h,c);be(this.c,b);this.va?(R(e,\"$req\",d),R(e,\"SID\",\"null\"),\nb.X=!0,Uc(b,e,null)):Uc(b,e,d);this.F=2}else 3==this.F&&(a?Ie(this,a):0==this.g.length?G(this.a,\"startForwardChannel_ returned: nothing to send\"):ce(this.c)?H(this.a,\"startForwardChannel_ returned: connection already in progress\"):(Ie(this),G(this.a,\"startForwardChannel_ finished, sent request\")))};\nfunction Ie(a,b){var c;b?c=b.c:c=a.R++;var d=M(a.D);R(d,\"SID\",a.J);R(d,\"RID\",c);R(d,\"AID\",a.N);Ae(a,d);a.h&&a.i&&we(d,a.h,a.i);c=new L(a,a.a,c,a.v+1);null===a.h&&(c.j=a.i);b&&(a.g=b.u.concat(a.g));b=He(a,c);c.setTimeout(1E4+Math.round(1E4*Math.random()));be(a.c,c);Uc(c,d,b)}function Ae(a,b){a.f&&ld({},function(a,d){R(b,d,a)})}\nfunction He(a,b){var c=Math.min(a.g.length,1E3),d=a.f?q(a.f.Wa,a.f,a):null;a:for(var e=a.g,f=-1;;){var h=[\"count=\"+c];-1==f?0<c?(f=e[0].a,h.push(\"ofs=\"+f)):f=0:h.push(\"ofs=\"+f);for(var m=!0,v=0;v<c;v++){var I=e[v].a,W=e[v].b;I-=f;if(0>I)f=Math.max(0,e[v].a-100),m=!1;else try{je(W,h,\"req\"+I+\"_\")}catch(Lb){d&&d(W)}}if(m){d=h.join(\"&\");break a}}a=a.g.splice(0,c);b.u=a;return d}function Je(a){if(!a.b&&!a.l){a.T=1;var b=a.Oa;Tb||Ub();Wb||(Tb(),Wb=!0);Pb.add(b,a);a.B=0}}\nfunction Ke(a){if(a.b||a.l)return H(a.a,\"Request already in progress\"),!1;if(3<=a.B)return!1;G(a.a,\"Going to retry GET\");a.T++;a.l=Dc(q(a.Oa,a),Ge(a,a.B));a.B++;return!0}\ng.Oa=function(){this.l=null;G(this.a,\"Creating new HttpRequest\");this.b=new L(this,this.a,\"rpc\",this.T);null===this.h&&(this.b.j=this.i);this.b.N=0;var a=M(this.ua);R(a,\"RID\",\"rpc\");R(a,\"SID\",this.J);R(a,\"CI\",this.ka?\"0\":\"1\");R(a,\"AID\",this.N);Ae(this,a);R(a,\"TYPE\",\"xmlhttp\");this.h&&this.i&&we(a,this.h,this.i);this.G&&this.b.setTimeout(this.G);Xc(this.b,a,!0,this.X);G(this.a,\"New Request created\")};\nfunction Sd(a,b,c){G(a.a,\"Test Connection Finished\");var d=b.l;d&&ae(a.c,d);a.ka=c;a.u=b.f;G(a.a,\"connectChannel_()\");a.D=Le(a,a.ja);Ee(a)}function Ud(a,b){G(a.a,\"Test Connection Failed\");a.u=b.f;V(a,2)}\ng.Na=function(a,b){if(0!=this.F&&(this.b==a||de(this.c,a)))if(this.u=a.C,!a.v&&de(this.c,a)&&3==this.F){try{var c=this.la.a.parse(b)}catch(f){c=null}if(n(c)&&3==c.length)if(b=c,0==b[0])a:if(G(this.a,\"Server claims our backchannel is missing.\"),this.l)G(this.a,\"But we are currently starting the request.\");else{if(this.b)if(this.b.D+3E3<a.D)Ce(this),this.b.cancel(),this.b=null;else break a;else C(this.a.a,\"We do not have a BackChannel established\");Ke(this);K(18)}else this.wa=b[1],a=this.wa-this.N,\n0<a&&(b=b[2],G(this.a,b+\" bytes (in \"+a+\" arrays) are outstanding on the BackChannel\"),37500>b&&this.ka&&0==this.B&&!this.s&&(this.s=Dc(q(this.cb,this),6E3)));else G(this.a,\"Bad POST response data returned\"),V(this,11)}else if((a.v||this.b==a)&&Ce(this),!xa(b))for(b=c=this.la.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.N=d[0];d=d[1];if(2==this.F)if(\"c\"==d[0]){this.J=d[1];this.X=d[2];var e=d[3];null!=e&&(this.na=e,E(this.a,\"VER=\"+this.na));e=d[4];null!=e&&(this.xa=e,E(this.a,\"SVER=\"+this.xa));d=\nd[5];null!=d&&\"number\"==typeof d&&0<d&&(this.G=d*=1.5,E(this.a,\"backChannelRequestTimeoutMs_=\"+d));this.o&&(d=a.a)&&((e=hd(d,\"X-Client-Wire-Protocol\"))&&ae(this.c,e),this.j&&((d=hd(d,\"X-HTTP-Session-Id\"))?(this.K=d,R(this.D,this.j,d)):C(this.a.a,\"Missing X_HTTP_SESSION_ID in the handshake response\")));this.F=3;this.f&&this.f.Ca();d=a;this.ua=Td(this,this.X,this.ja);d.v?(G(this.a,\"Upgrade the handshake request to a backchannel.\"),ee(this.c,d),(e=this.G)&&d.setTimeout(e),d.s&&(ad(d),Yc(d)),this.b=d):\nJe(this)}else\"stop\"!=d[0]&&\"close\"!=d[0]||V(this,7);else 3==this.F&&(\"stop\"==d[0]||\"close\"==d[0]?\"stop\"==d[0]?V(this,7):ye(this):\"noop\"!=d[0]&&this.f&&this.f.Ba(d),this.B=0)}};g.cb=function(){null!=this.s&&(this.s=null,this.b.cancel(),this.b=null,Ke(this),K(19))};function Ce(a){null!=a.s&&(k.clearTimeout(a.s),a.s=null)}\ng.ta=function(a){G(this.a,\"Request complete\");var b=null;if(this.b==a){Ce(this);this.b=null;var c=2}else if(de(this.c,a))b=a.u,ee(this.c,a),c=1;else return;this.u=a.C;if(0!=this.F)if(a.f)1==c?(Cc(a.l?a.l.length:0,r()-a.D,this.v),Ee(this)):Je(this);else{var d=a.m;if(3==d||0==d&&0<this.u)G(this.a,\"Not retrying due to error type\");else{var e=this;G(this.a,function(){return\"Maybe retrying, last error: \"+Rc(d,e.u)});if(1==c&&Fe(this,a)||2==c&&Ke(this))return;G(this.a,\"Exceeded max number of retries\")}b&&\n0<b.length&&ge(this.c,b);G(this.a,\"Error: HTTP request failed\");switch(d){case 1:V(this,5);break;case 4:V(this,10);break;case 3:V(this,6);break;default:V(this,2)}}};function Ge(a,b){var c=5E3+Math.floor(1E4*Math.random());a.qa()||(G(a.a,\"Inactive channel\"),c*=2);return c*b}\nfunction V(a,b){E(a.a,\"Error code \"+b);if(2==b){var c=null;a.f&&(c=null);var d=q(a.kb,a);c||(c=new Q(\"//www.google.com/images/cleardot.gif\"),k.location&&\"http\"==k.location.protocol||rd(c,\"https\"),Vc(c));ke(c.toString(),d)}else K(2);G(a.a,\"HttpChannel: error - \"+b);a.F=0;a.f&&a.f.Aa(b);Be(a);ze(a)}g.kb=function(a){a?(E(this.a,\"Successfully pinged google.com\"),K(2)):(E(this.a,\"Failed to ping google.com\"),K(1))};\nfunction Be(a){a.F=0;a.u=-1;if(a.f){var b=fe(a.c);if(0!=b.length||0!=a.g.length)G(a.a,function(){return\"Number of undelivered maps, pending: \"+b.length+\", outgoing: \"+a.g.length}),a.c.c.length=0,wa(a.g),a.g.length=0;a.f.za()}}function Le(a,b){b=Me(a,null,b);G(a.a,\"GetForwardChannelUri: \"+b);return b}function Td(a,b,c){b=Me(a,a.ia()?b:null,c);G(a.a,\"GetBackChannelUri: \"+b);return b}\nfunction Me(a,b,c){var d=Gd(c);if(\"\"!=d.b)b&&sd(d,b+\".\"+d.b),td(d,d.i);else{var e=k.location,f;b?f=b+\".\"+e.hostname:f=e.hostname;d=Hd(e.protocol,f,e.port,c)}a.U&&Ca(a.U,function(a,b){R(d,b,a)});b=a.j;c=a.K;b&&c&&R(d,b,c);R(d,\"VER\",a.na);Ae(a,d);return d}g.ca=function(a){if(a&&!this.S)throw Error(\"Can't create secondary domain capable XhrIo object.\");a=new T;a.o=this.S;return a};g.qa=function(){return!!this.f&&!0};g.ia=function(){return this.S};new Pd;function Ne(){}g=Ne.prototype;g.Ca=function(){};\ng.Ba=function(){};g.Aa=function(){};g.za=function(){};g.Wa=function(){};function Oe(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf(\"/\",0))b=d;else{var e;(e=\"\"==b)||(e=b.length-1,e=0<=e&&b.indexOf(\"/\",e)==e);e?b+=d:b+=\"/\"+d}}return b};function Pe(){if(y&&!(10<=Number(Wa)))throw Error(\"Environmental error: no available transport.\");}Pe.prototype.a=function(a,b){return new X(a,b)};\nfunction X(a,b){A.call(this);this.a=new xe(b);this.b=a;this.o=b&&b.testUrl?b.testUrl:Oe(this.b,\"test\");this.c=qc(\"goog.labs.net.webChannel.WebChannelBaseTransport\");this.g=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a[\"X-Client-Protocol\"]=\"webchannel\":a={\"X-Client-Protocol\":\"webchannel\"});this.a.i=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a[\"X-WebChannel-Content-Type\"]=b.messageContentType:a={\"X-WebChannel-Content-Type\":b.messageContentType});\nb&&b.Da&&(a?a[\"X-WebChannel-Client-Profile\"]=b.Da:a={\"X-WebChannel-Client-Profile\":b.Da});this.a.L=a;(a=b&&b.httpHeadersOverwriteParam)&&!xa(a)&&(this.a.h=a);this.l=b&&b.supportsCrossDomainXhr||!1;this.j=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!xa(b)&&(this.a.j=b,a=this.g,null!==a&&b in a&&(a=this.g,b in a&&delete a[b],C(this.c,\"Ignore httpSessionIdParam also specified with messageUrlParams: \"+b)));this.h=new Qe(this)}t(X,A);g=X.prototype;\ng.addEventListener=function(a,b,c,d){X.H.addEventListener.call(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){X.H.removeEventListener.call(this,a,b,c,d)};\ng.$a=function(){this.a.f=this.h;this.l&&(this.a.S=!0);var a=this.a,b=this.o,c=this.b,d=this.g||void 0;G(a.a,\"connect()\");K(0);a.ja=c;a.U=d||{};a.o&&(G(a.a,\"connect() bypassed channel-test.\"),a.I.b=[],a.I.a=!1);G(a.a,\"connectTest_()\");a.C=new Qd(a,a.a);null===a.h&&(a.C.i=a.i);c=b;a.h&&a.i&&(c=we(b,a.h,a.i));a=a.C;a.m=c;b=Le(a.a,a.m);K(3);c=a.a.I.b;null!=c?(a.g=c[0],a.P=1,Rd(a)):(Zc(b,\"MODE\",\"init\"),!a.a.o&&a.a.j&&Zc(b,\"X-HTTP-Session-Id\",a.a.j),a.c=new L(a,a.b,void 0,void 0),a.c.j=a.i,Xc(a.c,b,!1,\nnull),a.P=0)};g.close=function(){ye(this.a)};g.ab=function(a){if(l(a)){var b={};b.__data__=a;De(this.a,b)}else this.j?(b={},b.__data__=Db(a),De(this.a,b)):De(this.a,a)};g.w=function(){this.a.f=null;delete this.h;ye(this.a);delete this.a;X.H.w.call(this)};function Re(a){Ic.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0}(this.c=a)?(a=this.c,this.data=null!==b&&a in b?b[a]:void 0):this.data=b}else this.data=a}t(Re,Ic);function Se(){Jc.call(this);this.status=1}t(Se,Jc);\nfunction Qe(a){this.a=a}t(Qe,Ne);Qe.prototype.Ca=function(){rc(this.a.c,\"WebChannel opened on \"+this.a.b);this.a.dispatchEvent(\"a\")};Qe.prototype.Ba=function(a){this.a.dispatchEvent(new Re(a))};Qe.prototype.Aa=function(a){rc(this.a.c,\"WebChannel aborted on \"+this.a.b+\" due to channel error: \"+a);this.a.dispatchEvent(new Se(a))};Qe.prototype.za=function(){rc(this.a.c,\"WebChannel closed on \"+this.a.b);this.a.dispatchEvent(\"b\")};var Te=ja(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Pe);function Ue(){this.b=[];this.a=[]}function Ve(a){0==a.b.length&&(a.b=a.a,a.b.reverse(),a.a=[]);return a.b.pop()}function We(a){return a.b.length+a.a.length}Ue.prototype.A=function(){for(var a=[],b=this.b.length-1;0<=b;--b)a.push(this.b[b]);var c=this.a.length;for(b=0;b<c;++b)a.push(this.a[b]);return a};function Xe(a,b){u.call(this);this.h=a||0;this.c=b||10;if(this.h>this.c)throw Error(Ye);this.a=new Ue;this.b=new Wd;this.g=null;this.aa()}t(Xe,u);var Ye=\"[goog.structs.Pool] Min can not be greater than max\";g=Xe.prototype;g.da=function(){var a=r();if(!(null!=this.g&&0>a-this.g)){for(var b;0<We(this.a)&&(b=Ve(this.a),!this.sa(b));)this.aa();!b&&Ze(this)<this.c&&(b=this.pa());b&&(this.g=a,this.b.add(b));return b}};g.jb=function(a){return od(this.b.a,Xd(a))?(this.ma(a),!0):!1};\ng.ma=function(a){od(this.b.a,Xd(a));this.sa(a)&&Ze(this)<this.c?this.a.a.push(a):$e(a)};g.aa=function(){for(var a=this.a;Ze(this)<this.h;){var b=this.pa();a.a.push(b)}for(;Ze(this)>this.c&&0<We(this.a);)$e(Ve(a))};g.pa=function(){return{}};function $e(a){if(\"function\"==typeof a.$)a.$();else for(var b in a)a[b]=null}g.sa=function(a){return\"function\"==typeof a.Xa?a.Xa():!0};function Ze(a){return We(a.a)+a.b.a.c}\ng.w=function(){Xe.H.w.call(this);if(0<this.b.a.c)throw Error(\"[goog.structs.Pool] Objects not released\");delete this.b;for(var a=this.a;0!=a.b.length||0!=a.a.length;)$e(Ve(a));delete this.a};function af(a,b){this.a=a;this.b=b};function bf(a){this.a=[];if(a)a:{if(a instanceof bf){var b=a.M();a=a.A();if(0>=this.a.length){for(var c=this.a,d=0;d<b.length;d++)c.push(new af(b[d],a[d]));break a}}else b=Ea(a),a=Da(a);for(d=0;d<b.length;d++)cf(this,b[d],a[d])}}function cf(a,b,c){var d=a.a;d.push(new af(b,c));b=d.length-1;a=a.a;for(c=a[b];0<b;)if(d=b-1>>1,a[d].a>c.a)a[b]=a[d],b=d;else break;a[b]=c}bf.prototype.A=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].b);return b};\nbf.prototype.M=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].a);return b};function df(){bf.call(this)}t(df,bf);function Y(a,b){this.f=new df;Xe.call(this,a,b)}t(Y,Xe);g=Y.prototype;g.da=function(a,b){if(!a)return Y.H.da.call(this);cf(this.f,void 0!==b?b:100,a);this.ra()};g.ra=function(){for(var a=this.f;0<a.a.length;){var b=this.da();if(b){var c=a,d=c.a,e=d.length;var f=d[0];if(0>=e)f=void 0;else{if(1==e)ua(d);else{d[0]=d.pop();d=0;c=c.a;e=c.length;for(var h=c[d];d<e>>1;){var m=2*d+1,v=2*d+2;m=v<e&&c[v].a<c[m].a?v:m;if(c[m].a>h.a)break;c[d]=c[m];d=m}c[d]=h}f=f.b}f.apply(this,[b])}else break}};\ng.ma=function(a){Y.H.ma.call(this,a);this.ra()};g.aa=function(){Y.H.aa.call(this);this.ra()};g.w=function(){Y.H.w.call(this);k.clearTimeout(void 0);ua(this.f.a);this.f=null};function Z(a,b,c,d){this.l=a;this.j=!!d;Y.call(this,b,c)}t(Z,Y);Z.prototype.pa=function(){var a=new T,b=this.l;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.j&&(a.o=!0);return a};Z.prototype.sa=function(a){return!a.i&&!a.a};Pe.prototype.createWebChannel=Pe.prototype.a;X.prototype.send=X.prototype.ab;X.prototype.open=X.prototype.$a;X.prototype.close=X.prototype.close;Ec.NO_ERROR=0;Ec.TIMEOUT=8;Ec.HTTP_ERROR=6;Fc.COMPLETE=\"complete\";Gc.EventType=Hc;Hc.OPEN=\"a\";Hc.CLOSE=\"b\";Hc.ERROR=\"c\";Hc.MESSAGE=\"d\";A.prototype.listen=A.prototype.Ha;Z.prototype.getObject=Z.prototype.da;Z.prototype.releaseObject=Z.prototype.jb;T.prototype.listenOnce=T.prototype.Ia;T.prototype.getLastError=T.prototype.bb;T.prototype.getLastErrorCode=T.prototype.Fa;\nT.prototype.getStatus=T.prototype.W;T.prototype.getStatusText=T.prototype.Ga;T.prototype.getResponseJson=T.prototype.Za;T.prototype.getResponseText=T.prototype.V;T.prototype.getResponseText=T.prototype.V;T.prototype.send=T.prototype.fa;module.exports={createWebChannelTransport:Te,ErrorCode:Ec,EventType:Fc,WebChannel:Gc,XhrIoPool:Z};}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {})\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))\n\n/***/ })\n\n},[114]);\n        } catch(error) {\n          throw new Error(\n            'Cannot instantiate firebase-firestore.js - ' +\n            'be sure to load firebase-app.js first.'\n          )\n        }\n\n\n// WEBPACK FOOTER //\n// firebase-firestore.js","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrequire('@firebase/firestore');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./firestore/index.js\n// module id = 114\n// module chunks = 1","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* tslint:disable:no-console */\nimport { SDK_VERSION } from '../core/version';\nimport { PlatformSupport } from '../platform/platform';\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar logLevel = LogLevel.ERROR;\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel() {\n    return logLevel;\n}\nexport function setLogLevel(newLevel) {\n    logLevel = newLevel;\n}\nexport function debug(tag, msg) {\n    var obj = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        obj[_i - 2] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.DEBUG) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n    }\n}\nexport function error(msg) {\n    var obj = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        obj[_i - 1] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.ERROR) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n    }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    else {\n        var platform = PlatformSupport.getPlatform();\n        try {\n            return platform.formatJSON(obj);\n        }\n        catch (e) {\n            // Converting to JSON failed, just log the object directly\n            return obj;\n        }\n    }\n}\n\n//# sourceMappingURL=log.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/log.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SDK_VERSION } from '../core/version';\nimport { error } from './log';\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n    error(message);\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nexport function assert(assertion, message) {\n    if (!assertion) {\n        fail(message);\n    }\n}\n\n//# sourceMappingURL=assert.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/assert.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nvar PlatformSupport = /** @class */ (function () {\n    function PlatformSupport() {\n    }\n    PlatformSupport.setPlatform = function (platform) {\n        if (PlatformSupport.platform) {\n            fail('Platform already defined');\n        }\n        PlatformSupport.platform = platform;\n    };\n    PlatformSupport.getPlatform = function () {\n        if (!PlatformSupport.platform) {\n            fail('Platform not set');\n        }\n        return PlatformSupport.platform;\n    };\n    return PlatformSupport;\n}());\nexport { PlatformSupport };\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nexport function emptyByteString() {\n    return PlatformSupport.getPlatform().emptyByteString;\n}\n\n//# sourceMappingURL=platform.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform/platform.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\nimport { Code, FirestoreError } from './error';\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nexport function makeConstructorPrivate(cls, optionalMessage) {\n    function PublicConstructor() {\n        var error = 'This constructor is private.';\n        if (optionalMessage) {\n            error += ' ';\n            error += optionalMessage;\n        }\n        throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n    }\n    // Make sure instanceof checks work and all methods are exposed on the public\n    // constructor\n    PublicConstructor.prototype = cls.prototype;\n    // Copy any static methods/members\n    for (var staticProperty in cls) {\n        if (cls.hasOwnProperty(staticProperty)) {\n            PublicConstructor[staticProperty] = cls[staticProperty];\n        }\n    }\n    return PublicConstructor;\n}\n\n//# sourceMappingURL=api.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/api.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\nexport function contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function get(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nexport function size(obj) {\n    var count = 0;\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            count++;\n        }\n    }\n    return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nexport function defaulted(value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n}\nexport function forEachNumber(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var num = Number(key);\n            if (!isNaN(num)) {\n                fn(num, obj[key]);\n            }\n        }\n    }\n}\nexport function forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\nexport function lookupOrInsert(obj, key, valFn) {\n    if (!contains(obj, key)) {\n        obj[key] = valFn();\n    }\n    return obj[key];\n}\nexport function isEmpty(obj) {\n    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function shallowCopy(obj) {\n    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n    var result = {};\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=obj.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/obj.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport * as obj from './obj';\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n    if (args.length !== numberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" +\n            formatPlural(numberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n    if (args.length < minNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" +\n            formatPlural(minNumberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" +\n            (maxNumberOfArgs + \" arguments, but was called with \") +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n    if (!(value instanceof Array) || value.length < minNumberOfElements) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" +\n            'array with at least ' +\n            (formatPlural(minNumberOfElements, 'element') + \".\"));\n    }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(functionName, type, position, argument) {\n    validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(functionName, type, position, argument) {\n    if (argument !== undefined) {\n        validateArgType(functionName, type, position, argument);\n    }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(functionName, type, optionName, argument) {\n    validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(functionName, type, optionName, argument) {\n    if (argument !== undefined) {\n        validateNamedType(functionName, type, optionName, argument);\n    }\n}\n/**\n * Validates that the provided named option equals one of the expected values.\n */\nexport function validateNamedPropertyEquals(functionName, inputName, optionName, input, expected) {\n    var expectedDescription = [];\n    for (var _i = 0, expected_1 = expected; _i < expected_1.length; _i++) {\n        var val = expected_1[_i];\n        if (val === input) {\n            return;\n        }\n        expectedDescription.push(valueDescription(val));\n    }\n    var actualDescription = valueDescription(input);\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid value \" + actualDescription + \" provided to function \" + functionName + \"() for option \\\"\" + optionName + \"\\\". Acceptable values: \" + expectedDescription.join(', '));\n}\n/**\n * Validates that the provided named option equals one of the expected values or\n * is undefined.\n */\nexport function validateNamedOptionalPropertyEquals(functionName, inputName, optionName, input, expected) {\n    if (input !== undefined) {\n        validateNamedPropertyEquals(functionName, inputName, optionName, input, expected);\n    }\n}\n/** Helper to validate the type of a provided input. */\nfunction validateType(functionName, type, inputName, input) {\n    if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n        var description = valueDescription(input);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" +\n            (\"to be of type \" + type + \", but it was: \" + description));\n    }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        Object.getPrototypeOf(input) === Object.prototype);\n}\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input) {\n    if (input === undefined) {\n        return 'undefined';\n    }\n    else if (input === null) {\n        return 'null';\n    }\n    else if (typeof input === 'string') {\n        if (input.length > 20) {\n            input = input.substring(0, 20) + \"...\";\n        }\n        return JSON.stringify(input);\n    }\n    else if (typeof input === 'number' || typeof input === 'boolean') {\n        return '' + input;\n    }\n    else if (typeof input === 'object') {\n        if (input instanceof Array) {\n            return 'an array';\n        }\n        else {\n            var customObjectName = tryGetCustomObjectType(input);\n            if (customObjectName) {\n                return \"a custom \" + customObjectName + \" object\";\n            }\n            else {\n                return 'an object';\n            }\n        }\n    }\n    else if (typeof input === 'function') {\n        return 'a function';\n    }\n    else {\n        return fail('Unknown wrong type: ' + typeof input);\n    }\n}\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input) {\n    if (input.constructor) {\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n        var results = funcNameRegex.exec(input.constructor.toString());\n        if (results && results.length > 1) {\n            return results[1];\n        }\n    }\n    return null;\n}\n/** Validates the provided argument is defined. */\nexport function validateDefined(functionName, position, argument) {\n    if (argument === undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" +\n            \"argument, but it was undefined.\");\n    }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(functionName, options, optionNames) {\n    obj.forEach(options, function (key, _) {\n        if (optionNames.indexOf(key) < 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" +\n                'Available options: ' +\n                optionNames.join(', '));\n        }\n    });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(functionName, type, position, argument) {\n    var description = valueDescription(argument);\n    return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" +\n        (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\nfunction ordinal(num) {\n    switch (num) {\n        case 1:\n            return 'first';\n        case 2:\n            return 'second';\n        case 3:\n            return 'third';\n        default:\n            return num + 'th';\n    }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num, str) {\n    return num + \" \" + str + (num === 1 ? '' : 's');\n}\n\n//# sourceMappingURL=input_validation.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/input_validation.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\n// tslint:disable-next-line:class-as-namespace\nvar AutoId = /** @class */ (function () {\n    function AutoId() {\n    }\n    AutoId.newId = function () {\n        // Alphanumeric characters\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var autoId = '';\n        for (var i = 0; i < 20; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n        return autoId;\n    };\n    return AutoId;\n}());\nexport { AutoId };\nexport function primitiveComparator(left, right) {\n    if (left < right)\n        return -1;\n    if (left > right)\n        return 1;\n    return 0;\n}\n/** Helper to compare nullable (or undefined-able) objects using isEqual(). */\nexport function equals(left, right) {\n    if (left !== null && left !== undefined) {\n        return !!(right && left.isEqual(right));\n    }\n    else {\n        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n        // smart enough.\n        return left === right;\n    }\n}\n/** Helper to compare arrays using isEqual(). */\nexport function arrayEquals(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < left.length; i++) {\n        if (!left[i].isEqual(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nexport function immediatePredecessor(s) {\n    // We can decrement the last character in the string and be done\n    // unless that character is 0 (0x0000), in which case we have to erase the\n    // last character.\n    var lastIndex = s.length - 1;\n    if (s.length === 0) {\n        // Special case the empty string.\n        return '';\n    }\n    else if (s.charAt(lastIndex) === '\\0') {\n        return s.substring(0, lastIndex);\n    }\n    else {\n        return (s.substring(0, lastIndex) +\n            String.fromCharCode(s.charCodeAt(lastIndex) - 1));\n    }\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s) {\n    // Return the input string, with an additional NUL byte appended.\n    return s + '\\0';\n}\n\n//# sourceMappingURL=misc.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/misc.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!PlatformSupport.getPlatform().base64Available) {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n        validateArgType('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = PlatformSupport.getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return PlatformSupport.getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    Blob.prototype.isEqual = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return primitiveComparator(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\nexport { Blob };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nexport var PublicBlob = makeConstructorPrivate(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n//# sourceMappingURL=blob.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/blob.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { assert, fail } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { DocumentKey } from './document_key';\nexport var TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder || (TypeOrder = {}));\n/** Defines the return value for pending server timestamps. */\nexport var ServerTimestampBehavior;\n(function (ServerTimestampBehavior) {\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Default\"] = 0] = \"Default\";\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Estimate\"] = 1] = \"Estimate\";\n    ServerTimestampBehavior[ServerTimestampBehavior[\"Previous\"] = 2] = \"Previous\";\n})(ServerTimestampBehavior || (ServerTimestampBehavior = {}));\n/** Holds properties that define field value deserialization options. */\nvar FieldValueOptions = /** @class */ (function () {\n    function FieldValueOptions(serverTimestampBehavior) {\n        this.serverTimestampBehavior = serverTimestampBehavior;\n    }\n    FieldValueOptions.fromSnapshotOptions = function (options) {\n        switch (options.serverTimestamps) {\n            case 'estimate':\n                return new FieldValueOptions(ServerTimestampBehavior.Estimate);\n            case 'previous':\n                return new FieldValueOptions(ServerTimestampBehavior.Previous);\n            case 'none': // Fall-through intended.\n            case undefined:\n                return FieldValueOptions.defaultOptions;\n            default:\n                return fail('fromSnapshotOptions() called with invalid options.');\n        }\n    };\n    FieldValueOptions.defaultOptions = new FieldValueOptions(ServerTimestampBehavior.Default);\n    return FieldValueOptions;\n}());\nexport { FieldValueOptions };\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\nexport { FieldValue };\nvar NullValue = /** @class */ (function (_super) {\n    tslib_1.__extends(NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function (options) {\n        return null;\n    };\n    NullValue.prototype.isEqual = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(FieldValue));\nexport { NullValue };\nvar BooleanValue = /** @class */ (function (_super) {\n    tslib_1.__extends(BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.isEqual = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return primitiveComparator(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(FieldValue));\nexport { BooleanValue };\n/** Base class for IntegerValue and DoubleValue. */\nvar NumberValue = /** @class */ (function (_super) {\n    tslib_1.__extends(NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(FieldValue));\nexport { NumberValue };\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar IntegerValue = /** @class */ (function (_super) {\n    tslib_1.__extends(IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.isEqual = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via isEqual().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(NumberValue));\nexport { IntegerValue };\nvar DoubleValue = /** @class */ (function (_super) {\n    tslib_1.__extends(DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.isEqual = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via isEqual().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(NumberValue));\nexport { DoubleValue };\n// TODO(b/37267885): Add truncation support\nvar StringValue = /** @class */ (function (_super) {\n    tslib_1.__extends(StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    StringValue.prototype.isEqual = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return primitiveComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(FieldValue));\nexport { StringValue };\nvar TimestampValue = /** @class */ (function (_super) {\n    tslib_1.__extends(TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function (options) {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.isEqual = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(FieldValue));\nexport { TimestampValue };\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar ServerTimestampValue = /** @class */ (function (_super) {\n    tslib_1.__extends(ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime, previousValue) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.previousValue = previousValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function (options) {\n        if (options &&\n            options.serverTimestampBehavior === ServerTimestampBehavior.Estimate) {\n            return this.localWriteTime.toDate();\n        }\n        else if (options &&\n            options.serverTimestampBehavior === ServerTimestampBehavior.Previous) {\n            return this.previousValue ? this.previousValue.value(options) : null;\n        }\n        else {\n            return null;\n        }\n    };\n    ServerTimestampValue.prototype.isEqual = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.isEqual(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(FieldValue));\nexport { ServerTimestampValue };\nvar BlobValue = /** @class */ (function (_super) {\n    tslib_1.__extends(BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    BlobValue.prototype.isEqual = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(FieldValue));\nexport { BlobValue };\nvar RefValue = /** @class */ (function (_super) {\n    tslib_1.__extends(RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function (options) {\n        return this.key;\n    };\n    RefValue.prototype.isEqual = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.isEqual(other.key) && this.databaseId.isEqual(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(FieldValue));\nexport { RefValue };\nvar GeoPointValue = /** @class */ (function (_super) {\n    tslib_1.__extends(GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function (options) {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.isEqual = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue.isEqual(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(FieldValue));\nexport { GeoPointValue };\nvar ObjectValue = /** @class */ (function (_super) {\n    tslib_1.__extends(ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function (options) {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value(options);\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.isEqual = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.isEqual(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = primitiveComparator(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return primitiveComparator(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        assert(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));\n    return ObjectValue;\n}(FieldValue));\nexport { ObjectValue };\nvar ArrayValue = /** @class */ (function (_super) {\n    tslib_1.__extends(ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function (options) {\n        return this.internalValue.map(function (v) { return v.value(options); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.isEqual = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].isEqual(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return primitiveComparator(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(FieldValue));\nexport { ArrayValue };\n\n//# sourceMappingURL=field_value.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/field_value.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport var MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport var MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nexport var isInteger = NumberAsAny.isInteger ||\n    (function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    });\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value) {\n    return (isInteger(value) &&\n        value <= MAX_SAFE_INTEGER &&\n        value >= MIN_SAFE_INTEGER);\n}\n/**\n * Safely checks if the number is NaN.\n */\nexport function safeIsNaN(value) {\n    if (NumberAsAny.IsNaN) {\n        return NumberAsAny.IsNaN(value);\n    }\n    else {\n        return typeof value === 'number' && isNaN(value);\n    }\n}\n\n//# sourceMappingURL=types.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/types.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DoubleValue, NullValue, RefValue } from '../model/field_value';\nimport { FieldPath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nvar Query = /** @class */ (function () {\n    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\n        if (filters === void 0) { filters = []; }\n        if (limit === void 0) { limit = null; }\n        if (startAt === void 0) { startAt = null; }\n        if (endAt === void 0) { endAt = null; }\n        this.path = path;\n        this.explicitOrderBy = explicitOrderBy;\n        this.filters = filters;\n        this.limit = limit;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.memoizedCanonicalId = null;\n        this.memoizedOrderBy = null;\n        if (this.startAt) {\n            this.assertValidBound(this.startAt);\n        }\n        if (this.endAt) {\n            this.assertValidBound(this.endAt);\n        }\n    }\n    Query.atPath = function (path) {\n        return new Query(path);\n    };\n    Object.defineProperty(Query.prototype, \"orderBy\", {\n        get: function () {\n            if (this.memoizedOrderBy === null) {\n                var inequalityField = this.getInequalityFilterField();\n                var firstOrderByField = this.getFirstOrderByField();\n                if (inequalityField !== null && firstOrderByField === null) {\n                    // In order to implicitly add key ordering, we must also add the\n                    // inequality filter field for it to be a valid query.\n                    // Note that the default inequality field and key ordering is ascending.\n                    if (inequalityField.isKeyField()) {\n                        this.memoizedOrderBy = [KEY_ORDERING_ASC];\n                    }\n                    else {\n                        this.memoizedOrderBy = [\n                            new OrderBy(inequalityField),\n                            KEY_ORDERING_ASC\n                        ];\n                    }\n                }\n                else {\n                    assert(inequalityField === null ||\n                        (firstOrderByField !== null &&\n                            inequalityField.isEqual(firstOrderByField)), 'First orderBy should match inequality field.');\n                    this.memoizedOrderBy = [];\n                    var foundKeyOrdering = false;\n                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n                        var orderBy = _a[_i];\n                        this.memoizedOrderBy.push(orderBy);\n                        if (orderBy.field.isKeyField()) {\n                            foundKeyOrdering = true;\n                        }\n                    }\n                    if (!foundKeyOrdering) {\n                        // The order of the implicit key ordering always matches the last\n                        // explicit order by\n                        var lastDirection = this.explicitOrderBy.length > 0\n                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n                            : Direction.ASCENDING;\n                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING\n                            ? KEY_ORDERING_ASC\n                            : KEY_ORDERING_DESC);\n                    }\n                }\n            }\n            return this.memoizedOrderBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Query.prototype.addFilter = function (filter) {\n        assert(this.getInequalityFilterField() == null ||\n            !(filter instanceof RelationFilter) ||\n            !filter.isInequality() ||\n            filter.field.isEqual(this.getInequalityFilterField()), 'Query must only have one inequality field.');\n        assert(!DocumentKey.isDocumentKey(this.path), 'No filtering allowed for document query');\n        var newFilters = this.filters.concat([filter]);\n        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.addOrderBy = function (orderBy) {\n        assert(!DocumentKey.isDocumentKey(this.path), 'No ordering allowed for document query');\n        assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var newOrderBy = this.explicitOrderBy.concat([orderBy]);\n        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withLimit = function (limit) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withStartAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);\n    };\n    Query.prototype.withEndAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);\n    };\n    // TODO(b/29183165): This is used to get a unique string from a query to, for\n    // example, use as a dictionary key, but the implementation is subject to\n    // collisions. Make it collision-free.\n    Query.prototype.canonicalId = function () {\n        if (this.memoizedCanonicalId === null) {\n            var canonicalId = this.path.canonicalString();\n            canonicalId += '|f:';\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                canonicalId += filter.canonicalId();\n                canonicalId += ',';\n            }\n            canonicalId += '|ob:';\n            // TODO(dimond): make this collision resistant\n            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {\n                var orderBy = _c[_b];\n                canonicalId += orderBy.canonicalId();\n                canonicalId += ',';\n            }\n            if (!isNullOrUndefined(this.limit)) {\n                canonicalId += '|l:';\n                canonicalId += this.limit;\n            }\n            if (this.startAt) {\n                canonicalId += '|lb:';\n                canonicalId += this.startAt.canonicalId();\n            }\n            if (this.endAt) {\n                canonicalId += '|ub:';\n                canonicalId += this.endAt.canonicalId();\n            }\n            this.memoizedCanonicalId = canonicalId;\n        }\n        return this.memoizedCanonicalId;\n    };\n    Query.prototype.toString = function () {\n        var str = 'Query(' + this.path.canonicalString();\n        if (this.filters.length > 0) {\n            str += \", filters: [\" + this.filters.join(', ') + \"]\";\n        }\n        if (!isNullOrUndefined(this.limit)) {\n            str += ', limit: ' + this.limit;\n        }\n        if (this.explicitOrderBy.length > 0) {\n            str += \", orderBy: [\" + this.explicitOrderBy.join(', ') + \"]\";\n        }\n        if (this.startAt) {\n            str += ', startAt: ' + this.startAt.canonicalId();\n        }\n        if (this.endAt) {\n            str += ', endAt: ' + this.endAt.canonicalId();\n        }\n        return str + ')';\n    };\n    Query.prototype.isEqual = function (other) {\n        if (this.limit !== other.limit) {\n            return false;\n        }\n        if (this.orderBy.length !== other.orderBy.length) {\n            return false;\n        }\n        for (var i = 0; i < this.orderBy.length; i++) {\n            if (!this.orderBy[i].isEqual(other.orderBy[i])) {\n                return false;\n            }\n        }\n        if (this.filters.length !== other.filters.length) {\n            return false;\n        }\n        for (var i = 0; i < this.filters.length; i++) {\n            if (!this.filters[i].isEqual(other.filters[i])) {\n                return false;\n            }\n        }\n        if (!this.path.isEqual(other.path)) {\n            return false;\n        }\n        if (this.startAt !== null\n            ? !this.startAt.isEqual(other.startAt)\n            : other.startAt !== null) {\n            return false;\n        }\n        return this.endAt !== null\n            ? this.endAt.isEqual(other.endAt)\n            : other.endAt === null;\n    };\n    Query.prototype.docComparator = function (d1, d2) {\n        var comparedOnKeyField = false;\n        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            var comp = orderBy.compare(d1, d2);\n            if (comp !== 0)\n                return comp;\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n        }\n        // Assert that we actually compared by key\n        assert(comparedOnKeyField, \"orderBy used that doesn't compare on key field\");\n        return 0;\n    };\n    Query.prototype.matches = function (doc) {\n        return (this.matchesAncestor(doc) &&\n            this.matchesOrderBy(doc) &&\n            this.matchesFilters(doc) &&\n            this.matchesBounds(doc));\n    };\n    Query.prototype.hasLimit = function () {\n        return !isNullOrUndefined(this.limit);\n    };\n    Query.prototype.getFirstOrderByField = function () {\n        return this.explicitOrderBy.length > 0\n            ? this.explicitOrderBy[0].field\n            : null;\n    };\n    Query.prototype.getInequalityFilterField = function () {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (filter instanceof RelationFilter && filter.isInequality()) {\n                return filter.field;\n            }\n        }\n        return null;\n    };\n    Query.prototype.isDocumentQuery = function () {\n        return DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;\n    };\n    Query.prototype.matchesAncestor = function (doc) {\n        var docPath = doc.key.path;\n        if (DocumentKey.isDocumentKey(this.path)) {\n            // exact match for document queries\n            return this.path.isEqual(docPath);\n        }\n        else {\n            // shallow ancestor queries by default\n            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);\n        }\n    };\n    /**\n     * A document must have a value for every ordering clause in order to show up\n     * in the results.\n     */\n    Query.prototype.matchesOrderBy = function (doc) {\n        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            // order by key always matches\n            if (!orderBy.field.isKeyField() &&\n                doc.field(orderBy.field) === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Query.prototype.matchesFilters = function (doc) {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (!filter.matches(doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Makes sure a document is within the bounds, if provided.\n     */\n    Query.prototype.matchesBounds = function (doc) {\n        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        return true;\n    };\n    Query.prototype.assertValidBound = function (bound) {\n        assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');\n    };\n    return Query;\n}());\nexport { Query };\nvar RelationOp = /** @class */ (function () {\n    function RelationOp(name) {\n        this.name = name;\n    }\n    RelationOp.fromString = function (op) {\n        switch (op) {\n            case '<':\n                return RelationOp.LESS_THAN;\n            case '<=':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case '==':\n                return RelationOp.EQUAL;\n            case '>=':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case '>':\n                return RelationOp.GREATER_THAN;\n            default:\n                return fail('Unknown relation: ' + op);\n        }\n    };\n    RelationOp.prototype.toString = function () {\n        return this.name;\n    };\n    RelationOp.prototype.isEqual = function (other) {\n        return this.name === other.name;\n    };\n    RelationOp.LESS_THAN = new RelationOp('<');\n    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');\n    RelationOp.EQUAL = new RelationOp('==');\n    RelationOp.GREATER_THAN = new RelationOp('>');\n    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n    return RelationOp;\n}());\nexport { RelationOp };\nvar RelationFilter = /** @class */ (function () {\n    function RelationFilter(field, op, value) {\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    RelationFilter.prototype.matches = function (doc) {\n        if (this.field.isKeyField()) {\n            assert(this.value instanceof RefValue, 'Comparing on key, but filter value not a RefValue');\n            var refValue = this.value;\n            var comparison = DocumentKey.comparator(doc.key, refValue.key);\n            return this.matchesComparison(comparison);\n        }\n        else {\n            var val = doc.field(this.field);\n            return val !== undefined && this.matchesValue(val);\n        }\n    };\n    RelationFilter.prototype.matchesValue = function (value) {\n        // Only compare types with matching backend order (such as double and int).\n        if (this.value.typeOrder !== value.typeOrder) {\n            return false;\n        }\n        return this.matchesComparison(value.compareTo(this.value));\n    };\n    RelationFilter.prototype.matchesComparison = function (comparison) {\n        switch (this.op) {\n            case RelationOp.LESS_THAN:\n                return comparison < 0;\n            case RelationOp.LESS_THAN_OR_EQUAL:\n                return comparison <= 0;\n            case RelationOp.EQUAL:\n                return comparison === 0;\n            case RelationOp.GREATER_THAN:\n                return comparison > 0;\n            case RelationOp.GREATER_THAN_OR_EQUAL:\n                return comparison >= 0;\n            default:\n                return fail('Unknown relation op' + this.op);\n        }\n    };\n    RelationFilter.prototype.isInequality = function () {\n        return this.op !== RelationOp.EQUAL;\n    };\n    RelationFilter.prototype.canonicalId = function () {\n        // TODO(b/29183165): Technically, this won't be unique if two values have\n        // the same description, such as the int 3 and the string \"3\". So we should\n        // add the types in here somehow, too.\n        return (this.field.canonicalString() + this.op.toString() + this.value.toString());\n    };\n    RelationFilter.prototype.isEqual = function (other) {\n        if (other instanceof RelationFilter) {\n            return (this.op.isEqual(other.op) &&\n                this.field.isEqual(other.field) &&\n                this.value.isEqual(other.value));\n        }\n        else {\n            return false;\n        }\n    };\n    RelationFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" \" + this.op + \" \" + this.value.value();\n    };\n    return RelationFilter;\n}());\nexport { RelationFilter };\n/**\n * Filter that matches 'null' values.\n */\nvar NullFilter = /** @class */ (function () {\n    function NullFilter(field) {\n        this.field = field;\n    }\n    NullFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field);\n        return val !== undefined && val.value() === null;\n    };\n    NullFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS null';\n    };\n    NullFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS null\";\n    };\n    NullFilter.prototype.isEqual = function (other) {\n        if (other instanceof NullFilter) {\n            return this.field.isEqual(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NullFilter;\n}());\nexport { NullFilter };\n/**\n * Filter that matches 'NaN' values.\n */\nvar NanFilter = /** @class */ (function () {\n    function NanFilter(field) {\n        this.field = field;\n    }\n    NanFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field).value();\n        return typeof val === 'number' && isNaN(val);\n    };\n    NanFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS NaN';\n    };\n    NanFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS NaN\";\n    };\n    NanFilter.prototype.isEqual = function (other) {\n        if (other instanceof NanFilter) {\n            return this.field.isEqual(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NanFilter;\n}());\nexport { NanFilter };\n/**\n * Creates a filter based on the provided arguments.\n */\nexport function fieldFilter(field, op, value) {\n    if (value.isEqual(NullValue.INSTANCE)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on null.');\n        }\n        return new NullFilter(field);\n    }\n    else if (value.isEqual(DoubleValue.NAN)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on NaN.');\n        }\n        return new NanFilter(field);\n    }\n    else {\n        return new RelationFilter(field, op, value);\n    }\n}\n/**\n * The direction of sorting in an order by.\n */\nvar Direction = /** @class */ (function () {\n    function Direction(name) {\n        this.name = name;\n    }\n    Direction.prototype.toString = function () {\n        return this.name;\n    };\n    Direction.ASCENDING = new Direction('asc');\n    Direction.DESCENDING = new Direction('desc');\n    return Direction;\n}());\nexport { Direction };\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nvar Bound = /** @class */ (function () {\n    function Bound(position, before) {\n        this.position = position;\n        this.before = before;\n    }\n    Bound.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        var canonicalId = this.before ? 'b:' : 'a:';\n        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {\n            var component = _a[_i];\n            canonicalId += component.toString();\n        }\n        return canonicalId;\n    };\n    /**\n     * Returns true if a document sorts before a bound using the provided sort\n     * order.\n     */\n    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {\n        assert(this.position.length <= orderBy.length, \"Bound has more components than query's orderBy\");\n        var comparison = 0;\n        for (var i = 0; i < this.position.length; i++) {\n            var orderByComponent = orderBy[i];\n            var component = this.position[i];\n            if (orderByComponent.field.isKeyField()) {\n                assert(component instanceof RefValue, 'Bound has a non-key value where the key path is being used.');\n                comparison = DocumentKey.comparator(component.key, doc.key);\n            }\n            else {\n                var docValue = doc.field(orderByComponent.field);\n                assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');\n                comparison = component.compareTo(docValue);\n            }\n            if (orderByComponent.dir === Direction.DESCENDING) {\n                comparison = comparison * -1;\n            }\n            if (comparison !== 0) {\n                break;\n            }\n        }\n        return this.before ? comparison <= 0 : comparison < 0;\n    };\n    Bound.prototype.isEqual = function (other) {\n        if (other === null) {\n            return false;\n        }\n        if (this.before !== other.before ||\n            this.position.length !== other.position.length) {\n            return false;\n        }\n        for (var i = 0; i < this.position.length; i++) {\n            var thisPosition = this.position[i];\n            var otherPosition = other.position[i];\n            return thisPosition.isEqual(otherPosition);\n        }\n        return true;\n    };\n    return Bound;\n}());\nexport { Bound };\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar OrderBy = /** @class */ (function () {\n    function OrderBy(field, dir) {\n        this.field = field;\n        if (dir === undefined) {\n            dir = Direction.ASCENDING;\n        }\n        this.dir = dir;\n        this.isKeyOrderBy = field.isKeyField();\n    }\n    OrderBy.prototype.compare = function (d1, d2) {\n        var comparison = this.isKeyOrderBy\n            ? Document.compareByKey(d1, d2)\n            : Document.compareByField(this.field, d1, d2);\n        switch (this.dir) {\n            case Direction.ASCENDING:\n                return comparison;\n            case Direction.DESCENDING:\n                return -1 * comparison;\n            default:\n                return fail('Unknown direction: ' + this.dir);\n        }\n    };\n    OrderBy.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        return this.field.canonicalString() + this.dir.toString();\n    };\n    OrderBy.prototype.toString = function () {\n        return this.field.canonicalString() + \" (\" + this.dir + \")\";\n    };\n    OrderBy.prototype.isEqual = function (other) {\n        return this.dir === other.dir && this.field.isEqual(other.field);\n    };\n    return OrderBy;\n}());\nexport { OrderBy };\nvar KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);\nvar KEY_ORDERING_DESC = new OrderBy(FieldPath.keyField(), Direction.DESCENDING);\n\n//# sourceMappingURL=query.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/query.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nvar RpcCode;\n(function (RpcCode) {\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\nexport function isPermanentError(code) {\n    switch (code) {\n        case Code.OK:\n            return fail('Treated status OK as error');\n        case Code.CANCELLED:\n        case Code.UNKNOWN:\n        case Code.DEADLINE_EXCEEDED:\n        case Code.RESOURCE_EXHAUSTED:\n        case Code.INTERNAL:\n        case Code.UNAVAILABLE:\n        // Unauthenticated means something went wrong with our token and we need\n        // to retry with new credentials which will happen automatically.\n        // TODO(b/37325376): Give up after second unauthenticated error.\n        case Code.UNAUTHENTICATED:\n            return false;\n        case Code.INVALID_ARGUMENT:\n        case Code.NOT_FOUND:\n        case Code.ALREADY_EXISTS:\n        case Code.PERMISSION_DENIED:\n        case Code.FAILED_PRECONDITION:\n        // Aborted might be retried in some scenarios, but that is dependant on\n        // the context and should handled individually by the calling code.\n        // See https://cloud.google.com/apis/design/errors.\n        case Code.ABORTED:\n        case Code.OUT_OF_RANGE:\n        case Code.UNIMPLEMENTED:\n        case Code.DATA_LOSS:\n            return true;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status) {\n    // tslint:disable-next-line:no-any lookup by string\n    var code = RpcCode[status];\n    if (code === undefined) {\n        return undefined;\n    }\n    return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code) {\n    if (code === undefined) {\n        // This shouldn't normally happen, but in certain error cases (like trying\n        // to send invalid proto messages) we may get an error with no GRPC code.\n        log.error('GRPC error has no .code');\n        return Code.UNKNOWN;\n    }\n    switch (code) {\n        case RpcCode.OK:\n            return Code.OK;\n        case RpcCode.CANCELLED:\n            return Code.CANCELLED;\n        case RpcCode.UNKNOWN:\n            return Code.UNKNOWN;\n        case RpcCode.DEADLINE_EXCEEDED:\n            return Code.DEADLINE_EXCEEDED;\n        case RpcCode.RESOURCE_EXHAUSTED:\n            return Code.RESOURCE_EXHAUSTED;\n        case RpcCode.INTERNAL:\n            return Code.INTERNAL;\n        case RpcCode.UNAVAILABLE:\n            return Code.UNAVAILABLE;\n        case RpcCode.UNAUTHENTICATED:\n            return Code.UNAUTHENTICATED;\n        case RpcCode.INVALID_ARGUMENT:\n            return Code.INVALID_ARGUMENT;\n        case RpcCode.NOT_FOUND:\n            return Code.NOT_FOUND;\n        case RpcCode.ALREADY_EXISTS:\n            return Code.ALREADY_EXISTS;\n        case RpcCode.PERMISSION_DENIED:\n            return Code.PERMISSION_DENIED;\n        case RpcCode.FAILED_PRECONDITION:\n            return Code.FAILED_PRECONDITION;\n        case RpcCode.ABORTED:\n            return Code.ABORTED;\n        case RpcCode.OUT_OF_RANGE:\n            return Code.OUT_OF_RANGE;\n        case RpcCode.UNIMPLEMENTED:\n            return Code.UNIMPLEMENTED;\n        case RpcCode.DATA_LOSS:\n            return Code.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code) {\n    if (code === undefined) {\n        return RpcCode.OK;\n    }\n    switch (code) {\n        case Code.OK:\n            return RpcCode.OK;\n        case Code.CANCELLED:\n            return RpcCode.CANCELLED;\n        case Code.UNKNOWN:\n            return RpcCode.UNKNOWN;\n        case Code.DEADLINE_EXCEEDED:\n            return RpcCode.DEADLINE_EXCEEDED;\n        case Code.RESOURCE_EXHAUSTED:\n            return RpcCode.RESOURCE_EXHAUSTED;\n        case Code.INTERNAL:\n            return RpcCode.INTERNAL;\n        case Code.UNAVAILABLE:\n            return RpcCode.UNAVAILABLE;\n        case Code.UNAUTHENTICATED:\n            return RpcCode.UNAUTHENTICATED;\n        case Code.INVALID_ARGUMENT:\n            return RpcCode.INVALID_ARGUMENT;\n        case Code.NOT_FOUND:\n            return RpcCode.NOT_FOUND;\n        case Code.ALREADY_EXISTS:\n            return RpcCode.ALREADY_EXISTS;\n        case Code.PERMISSION_DENIED:\n            return RpcCode.PERMISSION_DENIED;\n        case Code.FAILED_PRECONDITION:\n            return RpcCode.FAILED_PRECONDITION;\n        case Code.ABORTED:\n            return RpcCode.ABORTED;\n        case Code.OUT_OF_RANGE:\n            return RpcCode.OUT_OF_RANGE;\n        case Code.UNIMPLEMENTED:\n            return RpcCode.UNIMPLEMENTED;\n        case Code.DATA_LOSS:\n            return RpcCode.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status) {\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    //\n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n    switch (status) {\n        case 200:// OK\n            return Code.OK;\n        case 400:// Bad Request\n            return Code.INVALID_ARGUMENT;\n        // Other possibilities based on the forward mapping\n        // return Code.FAILED_PRECONDITION;\n        // return Code.OUT_OF_RANGE;\n        case 401:// Unauthorized\n            return Code.UNAUTHENTICATED;\n        case 403:// Forbidden\n            return Code.PERMISSION_DENIED;\n        case 404:// Not Found\n            return Code.NOT_FOUND;\n        case 409:// Conflict\n            return Code.ABORTED;\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n        case 416:// Range Not Satisfiable\n            return Code.OUT_OF_RANGE;\n        case 429:// Too Many Requests\n            return Code.RESOURCE_EXHAUSTED;\n        case 499:// Client Closed Request\n            return Code.CANCELLED;\n        case 500:// Internal Server Error\n            return Code.UNKNOWN;\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n        case 501:// Unimplemented\n            return Code.UNIMPLEMENTED;\n        case 503:// Service Unavailable\n            return Code.UNAVAILABLE;\n        case 504:// Gateway Timeout\n            return Code.DEADLINE_EXCEEDED;\n        default:\n            if (status >= 200 && status < 300)\n                return Code.OK;\n            if (status >= 400 && status < 500)\n                return Code.FAILED_PRECONDITION;\n            if (status >= 500 && status < 600)\n                return Code.INTERNAL;\n            return Code.UNKNOWN;\n    }\n}\n\n//# sourceMappingURL=rpc_error.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/rpc_error.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { DocumentKey } from './document_key';\nvar EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nexport function maybeDocumentMap() {\n    return EMPTY_MAYBE_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nexport function documentMap() {\n    return EMPTY_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);\nexport function documentVersionMap() {\n    return EMPTY_DOCUMENT_VERSION_MAP;\n}\nvar EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet() {\n    return EMPTY_DOCUMENT_KEY_SET;\n}\n\n//# sourceMappingURL=collections.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/collections.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\nimport { assert, fail } from '../util/assert';\nimport * as objUtils from '../util/obj';\nimport { CurrentStatusUpdate, RemoteEvent, ResetMapping, UpdateMapping } from './remote_event';\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nvar DocumentWatchChange = /** @class */ (function () {\n    function DocumentWatchChange(\n    /** The new document applies to all of these targets. */\n    updatedTargetIds, \n    /** The new document is removed from all of these targets. */\n    removedTargetIds, \n    /** The key of the document for this change. */\n    key, \n    /**\n     * The new document or NoDocument if it was deleted. Is null if the\n     * document went out of view without the server sending a new document.\n     */\n    newDoc) {\n        this.updatedTargetIds = updatedTargetIds;\n        this.removedTargetIds = removedTargetIds;\n        this.key = key;\n        this.newDoc = newDoc;\n    }\n    return DocumentWatchChange;\n}());\nexport { DocumentWatchChange };\nvar ExistenceFilterChange = /** @class */ (function () {\n    function ExistenceFilterChange(targetId, existenceFilter) {\n        this.targetId = targetId;\n        this.existenceFilter = existenceFilter;\n    }\n    return ExistenceFilterChange;\n}());\nexport { ExistenceFilterChange };\nexport var WatchTargetChangeState;\n(function (WatchTargetChangeState) {\n    WatchTargetChangeState[WatchTargetChangeState[\"NoChange\"] = 0] = \"NoChange\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Added\"] = 1] = \"Added\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Removed\"] = 2] = \"Removed\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Current\"] = 3] = \"Current\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Reset\"] = 4] = \"Reset\";\n})(WatchTargetChangeState || (WatchTargetChangeState = {}));\nvar WatchTargetChange = /** @class */ (function () {\n    function WatchTargetChange(\n    /** What kind of change occurred to the watch target. */\n    state, \n    /** The target IDs that were added/removed/set. */\n    targetIds, \n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the query. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    resumeToken, \n    /** An RPC error indicating why the watch failed. */\n    cause) {\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        if (cause === void 0) { cause = null; }\n        this.state = state;\n        this.targetIds = targetIds;\n        this.resumeToken = resumeToken;\n        this.cause = cause;\n    }\n    return WatchTargetChange;\n}());\nexport { WatchTargetChange };\n/**\n * A helper class to accumulate watch changes into a RemoteEvent and other\n * target information.\n */\nvar WatchChangeAggregator = /** @class */ (function () {\n    function WatchChangeAggregator(snapshotVersion, listenTargets, pendingTargetResponses) {\n        this.snapshotVersion = snapshotVersion;\n        this.listenTargets = listenTargets;\n        /** The existence filter - if any - for the given target IDs. */\n        this.existenceFilters = {};\n        /** Keeps track of the current target mappings */\n        this.targetChanges = {};\n        /** Keeps track of document to update */\n        this.documentUpdates = maybeDocumentMap();\n        /** Whether this aggregator was frozen and can no longer be modified */\n        this.frozen = false;\n        this.pendingTargetResponses = objUtils.shallowCopy(pendingTargetResponses);\n    }\n    /** Aggregates a watch change into the current state */\n    WatchChangeAggregator.prototype.add = function (watchChange) {\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        if (watchChange instanceof DocumentWatchChange) {\n            this.addDocumentChange(watchChange);\n        }\n        else if (watchChange instanceof WatchTargetChange) {\n            this.addTargetChange(watchChange);\n        }\n        else if (watchChange instanceof ExistenceFilterChange) {\n            this.addExistenceFilterChange(watchChange);\n        }\n        else {\n            fail('Unknown watch change: ' + watchChange);\n        }\n    };\n    /** Aggregates all provided watch changes to the current state in order */\n    WatchChangeAggregator.prototype.addChanges = function (watchChanges) {\n        var _this = this;\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        watchChanges.forEach(function (change) { return _this.add(change); });\n    };\n    /**\n     * Converts the current state into a remote event with the snapshot version\n     * provided via the constructor.\n     */\n    WatchChangeAggregator.prototype.createRemoteEvent = function () {\n        var _this = this;\n        var targetChanges = this.targetChanges;\n        // Remove all the non-active targets from the remote event.\n        objUtils.forEachNumber(this.targetChanges, function (targetId) {\n            if (!_this.isActiveTarget(targetId)) {\n                delete targetChanges[targetId];\n            }\n        });\n        // Mark this aggregator as frozen so no further modifications are made\n        this.frozen = true;\n        return new RemoteEvent(this.snapshotVersion, targetChanges, this.documentUpdates);\n    };\n    WatchChangeAggregator.prototype.ensureTargetChange = function (targetId) {\n        var change = this.targetChanges[targetId];\n        if (!change) {\n            // Create an UpdateMapping by default, since resets are always explicit.\n            change = {\n                currentStatusUpdate: CurrentStatusUpdate.None,\n                snapshotVersion: this.snapshotVersion,\n                mapping: new UpdateMapping(),\n                resumeToken: emptyByteString()\n            };\n            this.targetChanges[targetId] = change;\n        }\n        return change;\n    };\n    /**\n     * We need to wait for watch to ack targets before we process those events,\n     * so to know if a target is active, there must be no pending acks we're\n     * waiting for and it must be in the current list of targets that the client\n     * cares about.\n     *\n     * This method is visible for testing.\n     */\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n        return (!objUtils.contains(this.pendingTargetResponses, targetId) &&\n            objUtils.contains(this.listenTargets, targetId));\n    };\n    WatchChangeAggregator.prototype.addDocumentChange = function (docChange) {\n        var relevant = false;\n        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {\n            var targetId = _a[_i];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.add(docChange.key);\n                relevant = true;\n            }\n        }\n        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {\n            var targetId = _c[_b];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.delete(docChange.key);\n                relevant = true;\n            }\n        }\n        // Only update the document if there is a new document to replace to an\n        // active target that is being listened to, this might be just a target\n        // update instead.\n        if (docChange.newDoc && relevant) {\n            this.documentUpdates = this.documentUpdates.insert(docChange.key, docChange.newDoc);\n        }\n    };\n    WatchChangeAggregator.prototype.addTargetChange = function (targetChange) {\n        var _this = this;\n        targetChange.targetIds.forEach(function (targetId) {\n            var change = _this.ensureTargetChange(targetId);\n            switch (targetChange.state) {\n                case WatchTargetChangeState.NoChange:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Creating the change above satisfies the semantics of no-change.\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Added:\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    if (!objUtils.contains(_this.pendingTargetResponses, targetId)) {\n                        // We have a freshly added target, so we need to reset any state\n                        // that we had previously This can happen e.g. when remove and add\n                        // back a target for existence filter mismatches.\n                        change.mapping = new UpdateMapping();\n                        change.currentStatusUpdate = CurrentStatusUpdate.None;\n                        delete _this.existenceFilters[targetId];\n                    }\n                    applyResumeToken(change, targetChange.resumeToken);\n                    break;\n                case WatchTargetChangeState.Removed:\n                    // We need to keep track of removed targets to we can\n                    // post-filter and remove any target changes.\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');\n                    break;\n                case WatchTargetChangeState.Current:\n                    if (_this.isActiveTarget(targetId)) {\n                        change.currentStatusUpdate = CurrentStatusUpdate.MarkCurrent;\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Reset:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Overwrite any existing target mapping with a reset\n                        // mapping. Every subsequent update will modify the reset\n                        // mapping, not an update mapping.\n                        change.mapping = new ResetMapping();\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                default:\n                    fail('Unknown target watch change state: ' + targetChange.state);\n            }\n        });\n    };\n    /**\n     * Record that we get a watch target add/remove by decrementing the number of\n     * pending target responses that we have.\n     */\n    WatchChangeAggregator.prototype.recordTargetResponse = function (targetId) {\n        var newCount = (this.pendingTargetResponses[targetId] || 0) - 1;\n        if (newCount === 0) {\n            delete this.pendingTargetResponses[targetId];\n        }\n        else {\n            this.pendingTargetResponses[targetId] = newCount;\n        }\n    };\n    WatchChangeAggregator.prototype.addExistenceFilterChange = function (change) {\n        if (this.isActiveTarget(change.targetId)) {\n            this.existenceFilters[change.targetId] = change.existenceFilter;\n        }\n    };\n    return WatchChangeAggregator;\n}());\nexport { WatchChangeAggregator };\n/**\n * Applies the resume token to the TargetChange, but only when it has a new\n * value. null and empty resumeTokens are discarded.\n */\nfunction applyResumeToken(change, resumeToken) {\n    if (resumeToken.length > 0) {\n        change.resumeToken = resumeToken;\n    }\n}\n\n//# sourceMappingURL=watch_change.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/watch_change.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Blob } from '../api/blob';\nimport { GeoPoint } from '../api/geo_point';\nimport { DatabaseId } from '../core/database_info';\nimport { Bound, Direction, NanFilter, NullFilter, OrderBy, Query, RelationFilter, RelationOp } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { QueryPurpose } from '../local/query_data';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport * as fieldValue from '../model/field_value';\nimport { DeleteMutation, FieldMask, FieldTransform, MutationResult, PatchMutation, Precondition, ServerTimestampTransform, SetMutation, TransformMutation } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as obj from '../util/obj';\nimport * as typeUtils from '../util/types';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode, mapRpcCodeFromCode } from './rpc_error';\nimport { DocumentWatchChange, ExistenceFilterChange, WatchTargetChange, WatchTargetChangeState } from './watch_change';\nvar DIRECTIONS = (function () {\n    var dirs = {};\n    dirs[Direction.ASCENDING.name] = 'ASCENDING';\n    dirs[Direction.DESCENDING.name] = 'DESCENDING';\n    return dirs;\n})();\nvar OPERATORS = (function () {\n    var ops = {};\n    ops[RelationOp.LESS_THAN.name] = 'LESS_THAN';\n    ops[RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n    ops[RelationOp.GREATER_THAN.name] = 'GREATER_THAN';\n    ops[RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n    ops[RelationOp.EQUAL.name] = 'EQUAL';\n    return ops;\n})();\nfunction assertPresent(value, description) {\n    assert(!typeUtils.isNullOrUndefined(value), description + ' is missing');\n}\nfunction parseInt64(value) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    if (typeof value === 'number') {\n        return value;\n    }\n    else if (typeof value === 'string') {\n        return Number(value);\n    }\n    else {\n        return fail(\"can't parse \" + value);\n    }\n}\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar JsonProtoSerializer = /** @class */ (function () {\n    function JsonProtoSerializer(databaseId, options) {\n        this.databaseId = databaseId;\n        this.options = options;\n    }\n    JsonProtoSerializer.prototype.emptyByteString = function () {\n        if (this.options.useProto3Json) {\n            return '';\n        }\n        else {\n            return new Uint8Array(0);\n        }\n    };\n    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {\n        // byteStrings can be either string or UInt8Array, but the typings say\n        // it's always a string. Cast as string to avoid type check failing\n        return byteString;\n    };\n    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {\n        var code = status.code === undefined\n            ? Code.UNKNOWN\n            : mapCodeFromRpcCode(status.code);\n        return new FirestoreError(code, status.message || '');\n    };\n    /**\n     * Returns a value for a number (or undefined) that's appropriate to put into\n     * a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be. But GRPC actually\n     * expects a { value: <number> } struct.\n     */\n    JsonProtoSerializer.prototype.toInt32Value = function (val) {\n        if (!typeUtils.isNullOrUndefined(val)) {\n            // tslint:disable-next-line:no-any We need to match generated Proto types.\n            return { value: val };\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Returns a number (or null) from a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as accepting \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be, but it actually\n     * accepts { value: number } to match our serialization in toInt32Value().\n     */\n    JsonProtoSerializer.prototype.fromInt32Value = function (val) {\n        var result;\n        if (typeof val === 'object') {\n            // tslint:disable-next-line:no-any We need to match generated Proto types.\n            result = val.value;\n        }\n        else {\n            // We accept raw numbers (without the {value: ... } wrapper) for\n            // compatibility with legacy persisted data.\n            result = val;\n        }\n        return typeUtils.isNullOrUndefined(result) ? null : result;\n    };\n    /**\n     * Returns a value for a Date that's appropriate to put into a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say dates must be. But it's easier and safer\n     * to actually return a Timestamp proto.\n     */\n    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {\n        return {\n            seconds: timestamp.seconds,\n            nanos: timestamp.nanos\n            // tslint:disable-next-line:no-any\n        };\n    };\n    JsonProtoSerializer.prototype.fromTimestamp = function (date) {\n        // The json interface (for the browser) will return an iso timestamp string,\n        // while the proto js library (for node) will return a\n        // google.protobuf.Timestamp instance.\n        if (typeof date === 'string') {\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(this.options.useProto3Json,\n            //   'The timestamp string format requires Proto3.');\n            return Timestamp.fromISOString(date);\n        }\n        else {\n            assert(!!date, 'Cannot deserialize null or undefined timestamp.');\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(!this.options.useProto3Json,\n            //   'The timestamp instance format requires Proto JS.');\n            var seconds = parseInt64(date.seconds || '0');\n            var nanos = date.nanos || 0;\n            return new Timestamp(seconds, nanos);\n        }\n    };\n    /**\n     * Returns a value for bytes that's appropriate to put in a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say bytes must be. But it should return\n     * an Uint8Array in Node.\n     */\n    JsonProtoSerializer.prototype.toBytes = function (bytes) {\n        if (this.options.useProto3Json) {\n            return bytes.toBase64();\n        }\n        else {\n            // The typings say it's a string, but it needs to be a Uint8Array in Node.\n            return this.unsafeCastProtoByteString(bytes.toUint8Array());\n        }\n    };\n    /**\n     * Parse the blob from the protos into the internal Blob class. Note that the\n     * typings assume all blobs are strings, but they are actually Uint8Arrays\n     * on Node.\n     */\n    JsonProtoSerializer.prototype.fromBlob = function (blob) {\n        if (typeof blob === 'string') {\n            assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');\n            return Blob.fromBase64String(blob);\n        }\n        else {\n            assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');\n            return Blob.fromUint8Array(blob);\n        }\n    };\n    JsonProtoSerializer.prototype.toVersion = function (version) {\n        return this.toTimestamp(version.toTimestamp());\n    };\n    JsonProtoSerializer.prototype.fromVersion = function (version) {\n        assert(!!version, \"Trying to deserialize version that isn't set\");\n        return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n    };\n    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {\n        return this.fullyQualifiedPrefixPath(databaseId)\n            .child('documents')\n            .child(path)\n            .canonicalString();\n    };\n    JsonProtoSerializer.prototype.fromResourceName = function (name) {\n        var resource = ResourcePath.fromString(name);\n        assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());\n        return resource;\n    };\n    JsonProtoSerializer.prototype.toName = function (key) {\n        return this.toResourceName(this.databaseId, key.path);\n    };\n    JsonProtoSerializer.prototype.fromName = function (name) {\n        var resource = this.fromResourceName(name);\n        assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +\n            resource.get(1) +\n            ' vs ' +\n            this.databaseId.projectId);\n        assert((!resource.get(3) && !this.databaseId.database) ||\n            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +\n            resource.get(3) +\n            ' vs ' +\n            this.databaseId.database);\n        return new DocumentKey(this.extractLocalPathFromResourceName(resource));\n    };\n    JsonProtoSerializer.prototype.toQueryPath = function (path) {\n        if (path.length === 0) {\n            // If the path is empty, the backend requires we leave off the /documents\n            // at the end.\n            return this.encodedDatabaseId;\n        }\n        return this.toResourceName(this.databaseId, path);\n    };\n    JsonProtoSerializer.prototype.fromQueryPath = function (name) {\n        var resourceName = this.fromResourceName(name);\n        if (resourceName.length === 4) {\n            return ResourcePath.EMPTY_PATH;\n        }\n        return this.extractLocalPathFromResourceName(resourceName);\n    };\n    Object.defineProperty(JsonProtoSerializer.prototype, \"encodedDatabaseId\", {\n        get: function () {\n            var path = new ResourcePath([\n                'projects',\n                this.databaseId.projectId,\n                'databases',\n                this.databaseId.database\n            ]);\n            return path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {\n        return new ResourcePath([\n            'projects',\n            databaseId.projectId,\n            'databases',\n            databaseId.database\n        ]);\n    };\n    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {\n        assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());\n        return resourceName.popFirst(5);\n    };\n    JsonProtoSerializer.prototype.isValidResourceName = function (path) {\n        // Resource names have at least 4 components (project ID, database ID)\n        return (path.length >= 4 &&\n            path.get(0) === 'projects' &&\n            path.get(2) === 'databases');\n    };\n    JsonProtoSerializer.prototype.toValue = function (val) {\n        if (val instanceof fieldValue.NullValue) {\n            return { nullValue: 'NULL_VALUE' };\n        }\n        else if (val instanceof fieldValue.BooleanValue) {\n            return { booleanValue: val.value() };\n        }\n        else if (val instanceof fieldValue.IntegerValue) {\n            return { integerValue: '' + val.value() };\n        }\n        else if (val instanceof fieldValue.DoubleValue) {\n            var doubleValue = val.value();\n            if (this.options.useProto3Json) {\n                // Proto 3 let's us encode NaN and Infinity as string values as\n                // expected by the backend. This is currently not checked by our unit\n                // tests because they rely on protobuf.js.\n                if (isNaN(doubleValue)) {\n                    return { doubleValue: 'NaN' };\n                }\n                else if (doubleValue === Infinity) {\n                    return { doubleValue: 'Infinity' };\n                }\n                else if (doubleValue === -Infinity) {\n                    return { doubleValue: '-Infinity' };\n                }\n            }\n            return { doubleValue: val.value() };\n        }\n        else if (val instanceof fieldValue.StringValue) {\n            return { stringValue: val.value() };\n        }\n        else if (val instanceof fieldValue.ObjectValue) {\n            return { mapValue: this.toMapValue(val) };\n        }\n        else if (val instanceof fieldValue.ArrayValue) {\n            return { arrayValue: this.toArrayValue(val) };\n        }\n        else if (val instanceof fieldValue.TimestampValue) {\n            return {\n                timestampValue: this.toTimestamp(val.internalValue)\n            };\n        }\n        else if (val instanceof fieldValue.GeoPointValue) {\n            return {\n                geoPointValue: {\n                    latitude: val.value().latitude,\n                    longitude: val.value().longitude\n                }\n            };\n        }\n        else if (val instanceof fieldValue.BlobValue) {\n            return {\n                bytesValue: this.toBytes(val.value())\n            };\n        }\n        else if (val instanceof fieldValue.RefValue) {\n            return {\n                referenceValue: this.toResourceName(val.databaseId, val.key.path)\n            };\n        }\n        else {\n            return fail('Unknown FieldValue ' + JSON.stringify(val));\n        }\n    };\n    JsonProtoSerializer.prototype.fromValue = function (obj) {\n        var _this = this;\n        // tslint:disable-next-line:no-any\n        var type = obj['value_type'];\n        if (hasTag(obj, type, 'nullValue')) {\n            return fieldValue.NullValue.INSTANCE;\n        }\n        else if (hasTag(obj, type, 'booleanValue')) {\n            return fieldValue.BooleanValue.of(obj.booleanValue);\n        }\n        else if (hasTag(obj, type, 'integerValue')) {\n            return new fieldValue.IntegerValue(parseInt64(obj.integerValue));\n        }\n        else if (hasTag(obj, type, 'doubleValue')) {\n            if (this.options.useProto3Json) {\n                // Proto 3 uses the string values 'NaN' and 'Infinity'.\n                if (obj.doubleValue === 'NaN') {\n                    return fieldValue.DoubleValue.NAN;\n                }\n                else if (obj.doubleValue === 'Infinity') {\n                    return fieldValue.DoubleValue.POSITIVE_INFINITY;\n                }\n                else if (obj.doubleValue === '-Infinity') {\n                    return fieldValue.DoubleValue.NEGATIVE_INFINITY;\n                }\n            }\n            return new fieldValue.DoubleValue(obj.doubleValue);\n        }\n        else if (hasTag(obj, type, 'stringValue')) {\n            return new fieldValue.StringValue(obj.stringValue);\n        }\n        else if (hasTag(obj, type, 'mapValue')) {\n            return this.fromFields(obj.mapValue.fields || {});\n        }\n        else if (hasTag(obj, type, 'arrayValue')) {\n            // \"values\" is not present if the array is empty\n            assertPresent(obj.arrayValue, 'arrayValue');\n            var values = obj.arrayValue.values || [];\n            return new fieldValue.ArrayValue(values.map(function (v) { return _this.fromValue(v); }));\n        }\n        else if (hasTag(obj, type, 'timestampValue')) {\n            assertPresent(obj.timestampValue, 'timestampValue');\n            return new fieldValue.TimestampValue(this.fromTimestamp(obj.timestampValue));\n        }\n        else if (hasTag(obj, type, 'geoPointValue')) {\n            assertPresent(obj.geoPointValue, 'geoPointValue');\n            var latitude = obj.geoPointValue.latitude || 0;\n            var longitude = obj.geoPointValue.longitude || 0;\n            return new fieldValue.GeoPointValue(new GeoPoint(latitude, longitude));\n        }\n        else if (hasTag(obj, type, 'bytesValue')) {\n            assertPresent(obj.bytesValue, 'bytesValue');\n            var blob = this.fromBlob(obj.bytesValue);\n            return new fieldValue.BlobValue(blob);\n        }\n        else if (hasTag(obj, type, 'referenceValue')) {\n            assertPresent(obj.referenceValue, 'referenceValue');\n            var resourceName = this.fromResourceName(obj.referenceValue);\n            var dbId = new DatabaseId(resourceName.get(1), resourceName.get(3));\n            var key = new DocumentKey(this.extractLocalPathFromResourceName(resourceName));\n            return new fieldValue.RefValue(dbId, key);\n        }\n        else {\n            return fail('Unknown Value proto ' + JSON.stringify(obj));\n        }\n    };\n    /** Creates an api.Document from key and fields (but no create/update time) */\n    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {\n        return {\n            name: this.toName(key),\n            fields: this.toFields(fields)\n        };\n    };\n    JsonProtoSerializer.prototype.toDocument = function (document) {\n        assert(!document.hasLocalMutations, \"Can't serialize documents with mutations.\");\n        return {\n            name: this.toName(document.key),\n            fields: this.toFields(document.data),\n            updateTime: this.toTimestamp(document.version.toTimestamp())\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocument = function (document) {\n        return new Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.toFields = function (fields) {\n        var _this = this;\n        var result = {};\n        fields.forEach(function (key, value) {\n            result[key] = _this.toValue(value);\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromFields = function (object) {\n        var _this = this;\n        // Proto map<string, Value> gets mapped to Object, so cast it.\n        var map = object;\n        var result = fieldValue.ObjectValue.EMPTY;\n        obj.forEach(map, function (key, value) {\n            result = result.set(new FieldPath([key]), _this.fromValue(value));\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.toMapValue = function (map) {\n        return {\n            fields: this.toFields(map)\n        };\n    };\n    JsonProtoSerializer.prototype.toArrayValue = function (array) {\n        var _this = this;\n        var result = [];\n        array.forEach(function (value) {\n            result.push(_this.toValue(value));\n        });\n        return { values: result };\n    };\n    JsonProtoSerializer.prototype.fromFound = function (doc) {\n        assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');\n        assertPresent(doc.found.name, 'doc.found.name');\n        assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n        var key = this.fromName(doc.found.name);\n        var version = this.fromVersion(doc.found.updateTime);\n        var fields = this.fromFields(doc.found.fields || {});\n        return new Document(key, version, fields, { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.fromMissing = function (result) {\n        assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');\n        assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');\n        var key = this.fromName(result.missing);\n        var version = this.fromVersion(result.readTime);\n        return new NoDocument(key, version);\n    };\n    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {\n        // tslint:disable-next-line:no-any\n        var type = result['result'];\n        if (hasTag(result, type, 'found')) {\n            return this.fromFound(result);\n        }\n        else if (hasTag(result, type, 'missing')) {\n            return this.fromMissing(result);\n        }\n        return fail('invalid batch get response: ' + JSON.stringify(result));\n    };\n    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {\n        switch (state) {\n            case WatchTargetChangeState.Added:\n                return 'ADD';\n            case WatchTargetChangeState.Current:\n                return 'CURRENT';\n            case WatchTargetChangeState.NoChange:\n                return 'NO_CHANGE';\n            case WatchTargetChangeState.Removed:\n                return 'REMOVE';\n            case WatchTargetChangeState.Reset:\n                return 'RESET';\n            default:\n                return fail('Unknown WatchTargetChangeState: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {\n        if (watchChange instanceof ExistenceFilterChange) {\n            return {\n                filter: {\n                    count: watchChange.existenceFilter.count,\n                    targetId: watchChange.targetId\n                }\n            };\n        }\n        if (watchChange instanceof DocumentWatchChange) {\n            if (watchChange.newDoc instanceof Document) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentChange: {\n                        document: {\n                            name: this.toName(doc.key),\n                            fields: this.toFields(doc.data),\n                            updateTime: this.toVersion(doc.version)\n                        },\n                        targetIds: watchChange.updatedTargetIds,\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc instanceof NoDocument) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentDelete: {\n                        document: this.toName(doc.key),\n                        readTime: this.toVersion(doc.version),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc === null) {\n                return {\n                    documentRemove: {\n                        document: this.toName(watchChange.key),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n        }\n        if (watchChange instanceof WatchTargetChange) {\n            var cause = undefined;\n            if (watchChange.cause) {\n                cause = {\n                    code: mapRpcCodeFromCode(watchChange.cause.code),\n                    message: watchChange.cause.message\n                };\n            }\n            return {\n                targetChange: {\n                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n                    targetIds: watchChange.targetIds,\n                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n                    cause: cause\n                }\n            };\n        }\n        return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));\n    };\n    JsonProtoSerializer.prototype.fromWatchChange = function (change) {\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        var watchChange;\n        if (hasTag(change, type, 'targetChange')) {\n            assertPresent(change.targetChange, 'targetChange');\n            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n            // if unset\n            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n            var targetIds = change.targetChange.targetIds || [];\n            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();\n            var causeProto = change.targetChange.cause;\n            var cause = causeProto && this.fromRpcStatus(causeProto);\n            watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);\n        }\n        else if (hasTag(change, type, 'documentChange')) {\n            assertPresent(change.documentChange, 'documentChange');\n            assertPresent(change.documentChange.document, 'documentChange.name');\n            assertPresent(change.documentChange.document.name, 'documentChange.document.name');\n            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');\n            var entityChange = change.documentChange;\n            var key = this.fromName(entityChange.document.name);\n            var version = this.fromVersion(entityChange.document.updateTime);\n            var fields = this.fromFields(entityChange.document.fields || {});\n            var doc = new Document(key, version, fields, {\n                hasLocalMutations: false\n            });\n            var updatedTargetIds = entityChange.targetIds || [];\n            var removedTargetIds = entityChange.removedTargetIds || [];\n            watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentDelete')) {\n            assertPresent(change.documentDelete, 'documentDelete');\n            assertPresent(change.documentDelete.document, 'documentDelete.document');\n            var docDelete = change.documentDelete;\n            var key = this.fromName(docDelete.document);\n            var version = docDelete.readTime\n                ? this.fromVersion(docDelete.readTime)\n                : SnapshotVersion.forDeletedDoc();\n            var doc = new NoDocument(key, version);\n            var removedTargetIds = docDelete.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentRemove')) {\n            assertPresent(change.documentRemove, 'documentRemove');\n            assertPresent(change.documentRemove.document, 'documentRemove');\n            var docRemove = change.documentRemove;\n            var key = this.fromName(docRemove.document);\n            var removedTargetIds = docRemove.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n        }\n        else if (hasTag(change, type, 'filter')) {\n            // TODO(dimond): implement existence filter parsing with strategy.\n            assertPresent(change.filter, 'filter');\n            assertPresent(change.filter.targetId, 'filter.targetId');\n            var filter = change.filter;\n            var count = filter.count || 0;\n            var existenceFilter = new ExistenceFilter(count);\n            var targetId = filter.targetId;\n            watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n        }\n        else {\n            return fail('Unknown change type ' + JSON.stringify(change));\n        }\n        return watchChange;\n    };\n    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {\n        if (state === 'NO_CHANGE') {\n            return WatchTargetChangeState.NoChange;\n        }\n        else if (state === 'ADD') {\n            return WatchTargetChangeState.Added;\n        }\n        else if (state === 'REMOVE') {\n            return WatchTargetChangeState.Removed;\n        }\n        else if (state === 'CURRENT') {\n            return WatchTargetChangeState.Current;\n        }\n        else if (state === 'RESET') {\n            return WatchTargetChangeState.Reset;\n        }\n        else {\n            return fail('Got unexpected TargetChange.state: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {\n        // We have only reached a consistent snapshot for the entire stream if there\n        // is a read_time set and it applies to all targets (i.e. the list of\n        // targets is empty). The backend is guaranteed to send such responses.\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        if (!hasTag(change, type, 'targetChange')) {\n            return SnapshotVersion.MIN;\n        }\n        var targetChange = change.targetChange;\n        if (targetChange.targetIds && targetChange.targetIds.length) {\n            return SnapshotVersion.MIN;\n        }\n        if (!targetChange.readTime) {\n            return SnapshotVersion.MIN;\n        }\n        return this.fromVersion(targetChange.readTime);\n    };\n    JsonProtoSerializer.prototype.toMutation = function (mutation) {\n        var _this = this;\n        var result;\n        if (mutation instanceof SetMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.value)\n            };\n        }\n        else if (mutation instanceof DeleteMutation) {\n            result = { delete: this.toName(mutation.key) };\n        }\n        else if (mutation instanceof PatchMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.data),\n                updateMask: this.toDocumentMask(mutation.fieldMask)\n            };\n        }\n        else if (mutation instanceof TransformMutation) {\n            result = {\n                transform: {\n                    document: this.toName(mutation.key),\n                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {\n                        return _this.toFieldTransform(transform);\n                    })\n                }\n            };\n        }\n        else {\n            return fail('Unknown mutation type ' + mutation.type);\n        }\n        if (!mutation.precondition.isNone) {\n            result.currentDocument = this.toPrecondition(mutation.precondition);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromMutation = function (proto) {\n        var _this = this;\n        var precondition = proto.currentDocument\n            ? this.fromPrecondition(proto.currentDocument)\n            : Precondition.NONE;\n        if (proto.update) {\n            assertPresent(proto.update.name, 'name');\n            var key = this.fromName(proto.update.name);\n            var value = this.fromFields(proto.update.fields || {});\n            if (proto.updateMask) {\n                var fieldMask = this.fromDocumentMask(proto.updateMask);\n                return new PatchMutation(key, value, fieldMask, precondition);\n            }\n            else {\n                return new SetMutation(key, value, precondition);\n            }\n        }\n        else if (proto.delete) {\n            var key = this.fromName(proto.delete);\n            return new DeleteMutation(key, precondition);\n        }\n        else if (proto.transform) {\n            var key = this.fromName(proto.transform.document);\n            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {\n                return _this.fromFieldTransform(transform);\n            });\n            assert(precondition.exists === true, 'Transforms only support precondition \"exists == true\"');\n            return new TransformMutation(key, fieldTransforms);\n        }\n        else {\n            return fail('unknown mutation proto: ' + JSON.stringify(proto));\n        }\n    };\n    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {\n        assert(!precondition.isNone, \"Can't serialize an empty precondition\");\n        if (precondition.updateTime !== undefined) {\n            return {\n                updateTime: this.toVersion(precondition.updateTime)\n            };\n        }\n        else if (precondition.exists !== undefined) {\n            return { exists: precondition.exists };\n        }\n        else {\n            return fail('Unknown precondition');\n        }\n    };\n    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {\n        if (precondition.updateTime !== undefined) {\n            return Precondition.updateTime(this.fromVersion(precondition.updateTime));\n        }\n        else if (precondition.exists !== undefined) {\n            return Precondition.exists(precondition.exists);\n        }\n        else {\n            return Precondition.NONE;\n        }\n    };\n    JsonProtoSerializer.prototype.fromWriteResult = function (proto) {\n        var _this = this;\n        // NOTE: Deletes don't have an updateTime.\n        var version = proto.updateTime\n            ? this.fromVersion(proto.updateTime)\n            : null;\n        var transformResults = null;\n        if (proto.transformResults && proto.transformResults.length > 0) {\n            transformResults = proto.transformResults.map(function (result) {\n                return _this.fromValue(result);\n            });\n        }\n        return new MutationResult(version, transformResults);\n    };\n    JsonProtoSerializer.prototype.fromWriteResults = function (protos) {\n        var _this = this;\n        return (protos || []).map(function (proto) { return _this.fromWriteResult(proto); });\n    };\n    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {\n        assert(fieldTransform.transform instanceof ServerTimestampTransform, 'Unknown transform: ' + fieldTransform.transform);\n        return {\n            fieldPath: fieldTransform.field.canonicalString(),\n            setToServerValue: 'REQUEST_TIME'\n        };\n    };\n    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {\n        assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown transform proto: ' + JSON.stringify(proto));\n        var fieldPath = FieldPath.fromServerFormat(proto.fieldPath);\n        return new FieldTransform(fieldPath, ServerTimestampTransform.instance);\n    };\n    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {\n        return { documents: [this.toQueryPath(query.path)] };\n    };\n    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {\n        var count = documentsTarget.documents.length;\n        assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);\n        var name = documentsTarget.documents[0];\n        return Query.atPath(this.fromQueryPath(name));\n    };\n    JsonProtoSerializer.prototype.toQueryTarget = function (query) {\n        // Dissect the path into parent, collectionId, and optional key filter.\n        var result = { structuredQuery: {} };\n        if (query.path.isEmpty()) {\n            result.parent = this.toQueryPath(ResourcePath.EMPTY_PATH);\n        }\n        else {\n            var path = query.path;\n            assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');\n            result.parent = this.toQueryPath(path.popLast());\n            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\n        }\n        var where = this.toFilter(query.filters);\n        if (where) {\n            result.structuredQuery.where = where;\n        }\n        var orderBy = this.toOrder(query.orderBy);\n        if (orderBy) {\n            result.structuredQuery.orderBy = orderBy;\n        }\n        var limit = this.toInt32Value(query.limit);\n        if (limit !== undefined) {\n            result.structuredQuery.limit = limit;\n        }\n        if (query.startAt) {\n            result.structuredQuery.startAt = this.toCursor(query.startAt);\n        }\n        if (query.endAt) {\n            result.structuredQuery.endAt = this.toCursor(query.endAt);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {\n        var path = this.fromQueryPath(target.parent);\n        var query = target.structuredQuery;\n        var fromCount = query.from ? query.from.length : 0;\n        if (fromCount > 0) {\n            assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');\n            var from = query.from[0];\n            path = path.child(from.collectionId);\n        }\n        var filterBy = [];\n        if (query.where) {\n            filterBy = this.fromFilter(query.where);\n        }\n        var orderBy = [];\n        if (query.orderBy) {\n            orderBy = this.fromOrder(query.orderBy);\n        }\n        var limit = null;\n        if (query.limit) {\n            limit = this.fromInt32Value(query.limit);\n        }\n        var startAt = null;\n        if (query.startAt) {\n            startAt = this.fromCursor(query.startAt);\n        }\n        var endAt = null;\n        if (query.endAt) {\n            endAt = this.fromCursor(query.endAt);\n        }\n        return new Query(path, orderBy, filterBy, limit, startAt, endAt);\n    };\n    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {\n        var value = this.toLabel(queryData.purpose);\n        if (value == null) {\n            return null;\n        }\n        else {\n            return {\n                'goog-listen-tags': value\n            };\n        }\n    };\n    JsonProtoSerializer.prototype.toLabel = function (purpose) {\n        switch (purpose) {\n            case QueryPurpose.Listen:\n                return null;\n            case QueryPurpose.ExistenceFilterMismatch:\n                return 'existence-filter-mismatch';\n            case QueryPurpose.LimboResolution:\n                return 'limbo-document';\n            default:\n                return fail('Unrecognized query purpose: ' + purpose);\n        }\n    };\n    JsonProtoSerializer.prototype.toTarget = function (queryData) {\n        var result;\n        var query = queryData.query;\n        if (query.isDocumentQuery()) {\n            result = { documents: this.toDocumentsTarget(query) };\n        }\n        else {\n            result = { query: this.toQueryTarget(query) };\n        }\n        result.targetId = queryData.targetId;\n        if (queryData.resumeToken.length > 0) {\n            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.toFilter = function (filters) {\n        var _this = this;\n        if (filters.length === 0)\n            return;\n        var protos = filters.map(function (filter) {\n            return filter instanceof RelationFilter\n                ? _this.toRelationFilter(filter)\n                : _this.toUnaryFilter(filter);\n        });\n        if (protos.length === 1) {\n            return protos[0];\n        }\n        return { compositeFilter: { op: 'AND', filters: protos } };\n    };\n    JsonProtoSerializer.prototype.fromFilter = function (filter) {\n        var _this = this;\n        if (!filter) {\n            return [];\n        }\n        else if (filter.unaryFilter !== undefined) {\n            return [this.fromUnaryFilter(filter)];\n        }\n        else if (filter.fieldFilter !== undefined) {\n            return [this.fromRelationFilter(filter)];\n        }\n        else if (filter.compositeFilter !== undefined) {\n            return filter.compositeFilter.filters\n                .map(function (f) { return _this.fromFilter(f); })\n                .reduce(function (accum, current) { return accum.concat(current); });\n        }\n        else {\n            return fail('Unknown filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.toOrder = function (orderBys) {\n        var _this = this;\n        if (orderBys.length === 0)\n            return;\n        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {\n        var _this = this;\n        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.toCursor = function (cursor) {\n        var _this = this;\n        return {\n            before: cursor.before,\n            values: cursor.position.map(function (component) { return _this.toValue(component); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromCursor = function (cursor) {\n        var _this = this;\n        var before = !!cursor.before;\n        var position = cursor.values.map(function (component) { return _this.fromValue(component); });\n        return new Bound(position, before);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toDirection = function (dir) {\n        return DIRECTIONS[dir.name];\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.fromDirection = function (dir) {\n        switch (dir) {\n            case 'ASCENDING':\n                return Direction.ASCENDING;\n            case 'DESCENDING':\n                return Direction.DESCENDING;\n            default:\n                return undefined;\n        }\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toOperatorName = function (op) {\n        return OPERATORS[op.name];\n    };\n    JsonProtoSerializer.prototype.fromOperatorName = function (op) {\n        switch (op) {\n            case 'EQUAL':\n                return RelationOp.EQUAL;\n            case 'GREATER_THAN':\n                return RelationOp.GREATER_THAN;\n            case 'GREATER_THAN_OR_EQUAL':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case 'LESS_THAN':\n                return RelationOp.LESS_THAN;\n            case 'LESS_THAN_OR_EQUAL':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified relation');\n            default:\n                return fail('Unknown relation');\n        }\n    };\n    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {\n        return { fieldPath: path.canonicalString() };\n    };\n    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {\n        return FieldPath.fromServerFormat(fieldReference.fieldPath);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {\n        return {\n            field: this.toFieldPathReference(orderBy.field),\n            direction: this.toDirection(orderBy.dir)\n        };\n    };\n    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {\n        return new OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {\n        if (filter instanceof RelationFilter) {\n            return {\n                fieldFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: this.toOperatorName(filter.op),\n                    value: this.toValue(filter.value)\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {\n        return new RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {\n        if (filter instanceof NanFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NAN'\n                }\n            };\n        }\n        else if (filter instanceof NullFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NULL'\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {\n        switch (filter.unaryFilter.op) {\n            case 'IS_NAN':\n                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NanFilter(nanField);\n            case 'IS_NULL':\n                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NullFilter(nullField);\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified filter');\n            default:\n                return fail('Unknown filter');\n        }\n    };\n    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {\n        return {\n            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {\n        var paths = proto.fieldPaths || [];\n        var fields = paths.map(function (path) { return FieldPath.fromServerFormat(path); });\n        return new FieldMask(fields);\n    };\n    return JsonProtoSerializer;\n}());\nexport { JsonProtoSerializer };\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj, type, tag) {\n    return type === tag || (!type && tag in obj);\n}\n\n//# sourceMappingURL=serializer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/serializer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateNamedArrayAtLeastNumberOfElements } from '../util/input_validation';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            validateArgType('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new InternalFieldPath(fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    FieldPath.prototype.isEqual = function (other) {\n        if (!(other instanceof FieldPath)) {\n            throw invalidClassError('isEqual', 'FieldPath', 1, other);\n        }\n        return this._internalPath.isEqual(other._internalPath);\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(InternalFieldPath.keyField().canonicalString());\n    return FieldPath;\n}());\nexport { FieldPath };\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (FieldPath.bind.apply(FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n//# sourceMappingURL=field_path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/field_path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { Document } from '../model/document';\nimport { DocumentSet } from '../model/document_set';\nimport { CurrentStatusUpdate, ResetMapping, UpdateMapping } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport { OnlineState } from './types';\nimport { ChangeType, DocumentChangeSet, SyncState, ViewSnapshot } from './view_snapshot';\nvar AddedLimboDocument = /** @class */ (function () {\n    function AddedLimboDocument(key) {\n        this.key = key;\n    }\n    return AddedLimboDocument;\n}());\nexport { AddedLimboDocument };\nvar RemovedLimboDocument = /** @class */ (function () {\n    function RemovedLimboDocument(key) {\n        this.key = key;\n    }\n    return RemovedLimboDocument;\n}());\nexport { RemovedLimboDocument };\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nvar View = /** @class */ (function () {\n    function View(query, \n    /** Documents included in the remote target */\n    syncedDocuments) {\n        this.query = query;\n        this.syncedDocuments = syncedDocuments;\n        this.syncState = null;\n        /**\n         * A flag whether the view is current with the backend. A view is considered\n         * current after it has seen the current flag from the backend and did not\n         * lose consistency within the watch stream (e.g. because of an existence\n         * filter mismatch).\n         */\n        this.current = false;\n        /** Documents in the view but not in the remote target */\n        this.limboDocuments = documentKeySet();\n        /** Document Keys that have local changes */\n        this.mutatedKeys = documentKeySet();\n        this.documentSet = new DocumentSet(query.docComparator.bind(query));\n    }\n    /**\n     * Iterates over a set of doc changes, applies the query limit, and computes\n     * what the new results should be, what the changes were, and whether we may\n     * need to go back to the local cache for more results. Does not make any\n     * changes to the view.\n     * @param docChanges The doc changes to apply to this view.\n     * @param previousChanges If this is being called with a refill, then start\n     *        with this set of docs and changes instead of the current view.\n     * @return a new set of docs, changes, and refill flag.\n     */\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n        var _this = this;\n        var changeSet = previousChanges\n            ? previousChanges.changeSet\n            : new DocumentChangeSet();\n        var oldDocumentSet = previousChanges\n            ? previousChanges.documentSet\n            : this.documentSet;\n        var newMutatedKeys = previousChanges\n            ? previousChanges.mutatedKeys\n            : this.mutatedKeys;\n        var newDocumentSet = oldDocumentSet;\n        var needsRefill = false;\n        // Track the last doc in a (full) limit. This is necessary, because some\n        // update (a delete, or an update moving a doc past the old limit) might\n        // mean there is some other document in the local cache that either should\n        // come (1) between the old last limit doc and the new last document, in the\n        // case of updates, or (2) after the new last document, in the case of\n        // deletes. So we keep this doc at the old limit to compare the updates to.\n        //\n        // Note that this should never get used in a refill (when previousChanges is\n        // set), because there will only be adds -- no deletes or updates.\n        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit\n            ? oldDocumentSet.last()\n            : null;\n        docChanges.inorderTraversal(function (key, newMaybeDoc) {\n            var oldDoc = oldDocumentSet.get(key);\n            var newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n            if (newDoc) {\n                assert(key.isEqual(newDoc.key), 'Mismatching keys found in document changes: ' +\n                    key +\n                    ' != ' +\n                    newDoc.key);\n                newDoc = _this.query.matches(newDoc) ? newDoc : null;\n            }\n            if (newDoc) {\n                newDocumentSet = newDocumentSet.add(newDoc);\n                if (newDoc.hasLocalMutations) {\n                    newMutatedKeys = newMutatedKeys.add(key);\n                }\n                else {\n                    newMutatedKeys = newMutatedKeys.delete(key);\n                }\n            }\n            else {\n                newDocumentSet = newDocumentSet.delete(key);\n                newMutatedKeys = newMutatedKeys.delete(key);\n            }\n            // Calculate change\n            if (oldDoc && newDoc) {\n                var docsEqual = oldDoc.data.isEqual(newDoc.data);\n                if (!docsEqual ||\n                    oldDoc.hasLocalMutations !== newDoc.hasLocalMutations) {\n                    // only report a change if document actually changed\n                    if (docsEqual) {\n                        changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n                    }\n                    else {\n                        changeSet.track({ type: ChangeType.Modified, doc: newDoc });\n                    }\n                    if (lastDocInLimit &&\n                        _this.query.docComparator(newDoc, lastDocInLimit) > 0) {\n                        // This doc moved from inside the limit to after the limit.\n                        // That means there may be some doc in the local cache that's\n                        // actually less than this one.\n                        needsRefill = true;\n                    }\n                }\n            }\n            else if (!oldDoc && newDoc) {\n                changeSet.track({ type: ChangeType.Added, doc: newDoc });\n            }\n            else if (oldDoc && !newDoc) {\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n                if (lastDocInLimit) {\n                    // A doc was removed from a full limit query. We'll need to\n                    // requery from the local cache to see if we know about some other\n                    // doc that should be in the results.\n                    needsRefill = true;\n                }\n            }\n        });\n        if (this.query.hasLimit()) {\n            // TODO(klimt): Make DocumentSet size be constant time.\n            while (newDocumentSet.size > this.query.limit) {\n                var oldDoc = newDocumentSet.last();\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n            }\n        }\n        assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');\n        return {\n            documentSet: newDocumentSet,\n            changeSet: changeSet,\n            needsRefill: needsRefill,\n            mutatedKeys: newMutatedKeys\n        };\n    };\n    /**\n     * Updates the view with the given ViewDocumentChanges and updates limbo docs\n     * and sync state from the given (optional) target change.\n     * @param docChanges The set of changes to make to the view's docs.\n     * @param targetChange A target change to apply for computing limbo docs and\n     *        sync state.\n     * @return A new ViewChange with the given docs, changes, and sync state.\n     */\n    View.prototype.applyChanges = function (docChanges, targetChange) {\n        var _this = this;\n        assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');\n        var oldDocs = this.documentSet;\n        this.documentSet = docChanges.documentSet;\n        this.mutatedKeys = docChanges.mutatedKeys;\n        // Sort changes based on type and query comparator\n        var changes = docChanges.changeSet.getChanges();\n        changes.sort(function (c1, c2) {\n            return (compareChangeType(c1.type, c2.type) ||\n                _this.query.docComparator(c1.doc, c2.doc));\n        });\n        this.applyTargetChange(targetChange);\n        var limboChanges = this.updateLimboDocuments();\n        var synced = this.limboDocuments.size === 0 && this.current;\n        var newSyncState = synced ? SyncState.Synced : SyncState.Local;\n        var syncStateChanged = newSyncState !== this.syncState;\n        this.syncState = newSyncState;\n        if (changes.length === 0 && !syncStateChanged) {\n            // no changes\n            return { limboChanges: limboChanges };\n        }\n        else {\n            var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, newSyncState === SyncState.Local, !docChanges.mutatedKeys.isEmpty(), syncStateChanged);\n            return {\n                snapshot: snap,\n                limboChanges: limboChanges\n            };\n        }\n    };\n    /**\n     * Applies an OnlineState change to the view, potentially generating a\n     * ViewChange if the view's syncState changes as a result.\n     */\n    View.prototype.applyOnlineStateChange = function (onlineState) {\n        if (this.current && onlineState === OnlineState.Failed) {\n            // If we're offline, set `current` to false and then call applyChanges()\n            // to refresh our syncState and generate a ViewChange as appropriate. We\n            // are guaranteed to get a new TargetChange that sets `current` back to\n            // true once the client is back online.\n            this.current = false;\n            return this.applyChanges({\n                documentSet: this.documentSet,\n                changeSet: new DocumentChangeSet(),\n                mutatedKeys: this.mutatedKeys,\n                needsRefill: false\n            });\n        }\n        else {\n            // No effect, just return a no-op ViewChange.\n            return { limboChanges: [] };\n        }\n    };\n    /**\n     * Returns whether the doc for the given key should be in limbo.\n     */\n    View.prototype.shouldBeInLimbo = function (key) {\n        // If the remote end says it's part of this query, it's not in limbo.\n        if (this.syncedDocuments.has(key)) {\n            return false;\n        }\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\n        if (!this.documentSet.has(key)) {\n            return false;\n        }\n        // If there are local changes to the doc, they might explain why the server\n        // doesn't know that it's part of the query. So don't put it in limbo.\n        // TODO(klimt): Ideally, we would only consider changes that might actually\n        // affect this specific query.\n        if (this.documentSet.get(key).hasLocalMutations) {\n            return false;\n        }\n        // Everything else is in limbo.\n        return true;\n    };\n    /**\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\n     * Returns the list of changes to which docs are in limbo.\n     */\n    View.prototype.applyTargetChange = function (targetChange) {\n        if (targetChange) {\n            var targetMapping = targetChange.mapping;\n            if (targetMapping instanceof ResetMapping) {\n                this.syncedDocuments = targetMapping.documents;\n            }\n            else if (targetMapping instanceof UpdateMapping) {\n                this.syncedDocuments = targetMapping.applyToKeySet(this.syncedDocuments);\n            }\n            switch (targetChange.currentStatusUpdate) {\n                case CurrentStatusUpdate.MarkCurrent:\n                    this.current = true;\n                    break;\n                case CurrentStatusUpdate.MarkNotCurrent:\n                    this.current = false;\n                    break;\n                case CurrentStatusUpdate.None:\n                    break;\n                default:\n                    fail('Unknown current status update: ' + targetChange.currentStatusUpdate);\n            }\n        }\n    };\n    View.prototype.updateLimboDocuments = function () {\n        var _this = this;\n        // We can only determine limbo documents when we're in-sync with the server.\n        if (!this.current) {\n            return [];\n        }\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\n        // updating many documents.\n        var oldLimboDocuments = this.limboDocuments;\n        this.limboDocuments = documentKeySet();\n        this.documentSet.forEach(function (doc) {\n            if (_this.shouldBeInLimbo(doc.key)) {\n                _this.limboDocuments = _this.limboDocuments.add(doc.key);\n            }\n        });\n        // Diff the new limbo docs with the old limbo docs.\n        var changes = [];\n        oldLimboDocuments.forEach(function (key) {\n            if (!_this.limboDocuments.has(key)) {\n                changes.push(new RemovedLimboDocument(key));\n            }\n        });\n        this.limboDocuments.forEach(function (key) {\n            if (!oldLimboDocuments.has(key)) {\n                changes.push(new AddedLimboDocument(key));\n            }\n        });\n        return changes;\n    };\n    return View;\n}());\nexport { View };\nfunction compareChangeType(c1, c2) {\n    var order = function (change) {\n        switch (change) {\n            case ChangeType.Added:\n                return 1;\n            case ChangeType.Modified:\n                return 2;\n            case ChangeType.Metadata:\n                // A metadata change is converted to a modified change at the public\n                // api layer.  Since we sort by document key and then change type,\n                // metadata and modified changes must be sorted equivalently.\n                return 2;\n            case ChangeType.Removed:\n                return 0;\n            default:\n                return fail('Unknown ChangeType: ' + change);\n        }\n    };\n    return order(c1) - order(c2);\n}\n\n//# sourceMappingURL=view.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/view.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nexport function encode(path) {\n    var result = '';\n    for (var i = 0; i < path.length; i++) {\n        if (result.length > 0) {\n            result = encodeSeparator(result);\n        }\n        result = encodeSegment(path.get(i), result);\n    }\n    return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n    var result = resultBuf;\n    var length = segment.length;\n    for (var i = 0; i < length; i++) {\n        var c = segment.charAt(i);\n        switch (c) {\n            case '\\0':\n                result += escapeChar + encodedNul;\n                break;\n            case escapeChar:\n                result += escapeChar + encodedEscape;\n                break;\n            default:\n                result += c;\n        }\n    }\n    return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n    return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nexport function decode(path) {\n    // Event the empty path must encode as a path of at least length 2. A path\n    // with exactly 2 must be the empty path.\n    var length = path.length;\n    assert(length >= 2, 'Invalid path ' + path);\n    if (length === 2) {\n        assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');\n        return ResourcePath.EMPTY_PATH;\n    }\n    // Escape characters cannot exist past the second-to-last position in the\n    // source value.\n    var lastReasonableEscapeIndex = length - 2;\n    var segments = [];\n    var segmentBuilder = '';\n    for (var start = 0; start < length;) {\n        // The last two characters of a valid encoded path must be a separator, so\n        // there must be an end to this segment.\n        var end = path.indexOf(escapeChar, start);\n        if (end < 0 || end > lastReasonableEscapeIndex) {\n            fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        var next = path.charAt(end + 1);\n        switch (next) {\n            case encodedSeparatorChar:\n                var currentPiece = path.substring(start, end);\n                var segment = void 0;\n                if (segmentBuilder.length === 0) {\n                    // Avoid copying for the common case of a segment that excludes \\0\n                    // and \\001\n                    segment = currentPiece;\n                }\n                else {\n                    segmentBuilder += currentPiece;\n                    segment = segmentBuilder;\n                    segmentBuilder = '';\n                }\n                segments.push(segment);\n                break;\n            case encodedNul:\n                segmentBuilder += path.substring(start, end);\n                segmentBuilder += '\\0';\n                break;\n            case encodedEscape:\n                // The escape character can be used in the output to encode itself.\n                segmentBuilder += path.substring(start, end + 1);\n                break;\n            default:\n                fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        start = end + 2;\n    }\n    return new ResourcePath(segments);\n}\n/**\n * Computes the prefix successor of the given path, computed by encode above.\n * A prefix successor is the first key that cannot be prefixed by the given\n * path. It's useful for defining the end of a prefix scan such that all keys\n * in the scan have the same prefix.\n *\n * Note that this is not a general prefix successor implementation, which is\n * tricky to get right with Strings, given that they encode down to UTF-8.\n * Instead this relies on the fact that all paths encoded by this class are\n * always terminated with a separator, and so a successor can always be\n * cheaply computed by incrementing the last character of the path.\n */\nexport function prefixSuccessor(path) {\n    var c = path.charCodeAt(path.length - 1);\n    // TODO(mcg): this really should be a general thing, but not worth it right\n    // now\n    assert(c === 1, 'successor may only operate on paths generated by encode');\n    return path.substring(0, path.length - 1) + String.fromCharCode(c + 1);\n}\n\n//# sourceMappingURL=encoded_resource_path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/encoded_resource_path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { encode } from './encoded_resource_path';\nexport var SCHEMA_VERSION = 1;\n/** Performs database creation and (in the future) upgrades between versions. */\nexport function createOrUpgradeDb(db, oldVersion) {\n    assert(oldVersion === 0, 'Unexpected upgrade from version ' + oldVersion);\n    db.createObjectStore(DbMutationQueue.store, {\n        keyPath: DbMutationQueue.keyPath\n    });\n    // TODO(mikelehen): Get rid of \"as any\" if/when TypeScript fixes their\n    // types. https://github.com/Microsoft/TypeScript/issues/14322\n    db.createObjectStore(DbMutationBatch.store, \n    // tslint:disable-next-line:no-any\n    { keyPath: DbMutationBatch.keyPath });\n    var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, \n    // tslint:disable-next-line:no-any\n    { keyPath: DbTargetDocument.keyPath });\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\n    var targetStore = db.createObjectStore(DbTarget.store, {\n        keyPath: DbTarget.keyPath\n    });\n    // NOTE: This is unique only because the TargetId is the suffix.\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\n    // NOTE: keys for these stores are specified explicitly rather than using a\n    // keyPath.\n    db.createObjectStore(DbDocumentMutation.store);\n    db.createObjectStore(DbRemoteDocument.store);\n    db.createObjectStore(DbOwner.store);\n    db.createObjectStore(DbTargetGlobal.store);\n}\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nvar DbTimestamp = /** @class */ (function () {\n    function DbTimestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n    }\n    return DbTimestamp;\n}());\nexport { DbTimestamp };\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can be owned by a single tab at a given time. That tab\n * must validate that it is still the owner before every write operation and\n * should regularly write an updated timestamp to prevent other tabs from\n * \"stealing\" ownership of the db.\n */\nvar DbOwner = /** @class */ (function () {\n    function DbOwner(ownerId, leaseTimestampMs) {\n        this.ownerId = ownerId;\n        this.leaseTimestampMs = leaseTimestampMs;\n    }\n    /** Name of the IndexedDb object store. */\n    DbOwner.store = 'owner';\n    return DbOwner;\n}());\nexport { DbOwner };\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nvar DbMutationQueue = /** @class */ (function () {\n    function DbMutationQueue(\n    /**\n     * The normalized user ID to which this queue belongs.\n     */\n    userId, \n    /**\n     * An identifier for the highest numbered batch that has been acknowledged\n     * by the server. All MutationBatches in this queue with batchIds less\n     * than or equal to this value are considered to have been acknowledged by\n     * the server.\n     */\n    lastAcknowledgedBatchId, \n    /**\n     * A stream token that was previously sent by the server.\n     *\n     * See StreamingWriteRequest in datastore.proto for more details about\n     * usage.\n     *\n     * After sending this token, earlier tokens may not be used anymore so\n     * only a single stream token is retained.\n     */\n    lastStreamToken) {\n        this.userId = userId;\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n        this.lastStreamToken = lastStreamToken;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationQueue.store = 'mutationQueues';\n    /** Keys are automatically assigned via the userId property. */\n    DbMutationQueue.keyPath = 'userId';\n    return DbMutationQueue;\n}());\nexport { DbMutationQueue };\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nvar DbMutationBatch = /** @class */ (function () {\n    function DbMutationBatch(\n    /**\n     * The normalized user ID to which this batch belongs.\n     */\n    userId, \n    /**\n     * An identifier for this batch, allocated by the mutation queue in a\n     * monotonically increasing manner.\n     */\n    batchId, \n    /**\n     * The local write time of the batch, stored as milliseconds since the\n     * epoch.\n     */\n    localWriteTimeMs, \n    /**\n     * A list of mutations to apply. All mutations will be applied atomically.\n     *\n     * Mutations are serialized via JsonProtoSerializer.toMutation().\n     */\n    mutations) {\n        this.userId = userId;\n        this.batchId = batchId;\n        this.localWriteTimeMs = localWriteTimeMs;\n        this.mutations = mutations;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationBatch.store = 'mutations';\n    /** Keys are automatically assigned via the userId, batchId properties. */\n    DbMutationBatch.keyPath = ['userId', 'batchId'];\n    return DbMutationBatch;\n}());\nexport { DbMutationBatch };\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nvar DbDocumentMutation = /** @class */ (function () {\n    function DbDocumentMutation() {\n    }\n    /**\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n     * over all of a user's document mutations.\n     */\n    DbDocumentMutation.prefixForUser = function (userId) {\n        return [userId];\n    };\n    /**\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n     * index to iterate over all at document mutations for a given path or lower.\n     */\n    DbDocumentMutation.prefixForPath = function (userId, path) {\n        return [userId, encode(path)];\n    };\n    /**\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\n     * and deleting into the DbDocumentMutations index.\n     */\n    DbDocumentMutation.key = function (userId, path, batchId) {\n        return [userId, encode(path), batchId];\n    };\n    DbDocumentMutation.store = 'documentMutations';\n    /**\n     * Because we store all the useful information for this store in the key,\n     * there is no useful information to store as the value. The raw (unencoded)\n     * path cannot be stored because IndexedDb doesn't store prototype\n     * information.\n     */\n    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n    return DbDocumentMutation;\n}());\nexport { DbDocumentMutation };\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nvar DbNoDocument = /** @class */ (function () {\n    function DbNoDocument(path, readTime) {\n        this.path = path;\n        this.readTime = readTime;\n    }\n    return DbNoDocument;\n}());\nexport { DbNoDocument };\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb. It\n * represents either a cached document (if it exists) or a cached \"no-document\"\n * (if it is known to not exist).\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nvar DbRemoteDocument = /** @class */ (function () {\n    function DbRemoteDocument(\n    /**\n     * Set to an instance of a DbNoDocument if it is known that no document\n     * exists.\n     */\n    noDocument, \n    /**\n     * Set to an instance of a Document if there's a cached version of the\n     * document.\n     */\n    document) {\n        this.noDocument = noDocument;\n        this.document = document;\n    }\n    DbRemoteDocument.store = 'remoteDocuments';\n    return DbRemoteDocument;\n}());\nexport { DbRemoteDocument };\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nvar DbTarget = /** @class */ (function () {\n    function DbTarget(\n    /**\n     * An auto-generated sequential numeric identifier for the query.\n     *\n     * Queries are stored using their canonicalId as the key, but these\n     * canonicalIds can be quite long so we additionally assign a unique\n     * queryId which can be used by referenced data structures (e.g.\n     * indexes) to minimize the on-disk cost.\n     */\n    targetId, \n    /**\n     * The canonical string representing this query. This is not unique.\n     */\n    canonicalId, \n    /**\n     * The last readTime received from the Watch Service for this query.\n     *\n     * This is the same value as TargetChange.read_time in the protos.\n     */\n    readTime, \n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data\n     * that matches the query. The resume token essentially identifies a\n     * point in time from which the server should resume sending results.\n     *\n     * This is related to the snapshotVersion in that the resumeToken\n     * effectively also encodes that value, but the resumeToken is opaque\n     * and sometimes encodes additional information.\n     *\n     * A consequence of this is that the resumeToken should be used when\n     * asking the server to reason about where this client is in the watch\n     * stream, but the client should use the snapshotVersion for its own\n     * purposes.\n     *\n     * This is the same value as TargetChange.resume_token in the protos.\n     */\n    resumeToken, \n    /**\n     * A sequence number representing the last time this query was\n     * listened to, used for garbage collection purposes.\n     *\n     * Conventionally this would be a timestamp value, but device-local\n     * clocks are unreliable and they must be able to create new listens\n     * even while disconnected. Instead this should be a monotonically\n     * increasing number that's incremented on each listen call.\n     *\n     * This is different from the queryId since the queryId is an\n     * immutable identifier assigned to the Query on first use while\n     * lastListenSequenceNumber is updated every time the query is\n     * listened to.\n     */\n    lastListenSequenceNumber, \n    /**\n     * The query for this target.\n     *\n     * Because canonical ids are not unique we must store the actual query. We\n     * use the proto to have an object we can persist without having to\n     * duplicate translation logic to and from a `Query` object.\n     */\n    query) {\n        this.targetId = targetId;\n        this.canonicalId = canonicalId;\n        this.readTime = readTime;\n        this.resumeToken = resumeToken;\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\n        this.query = query;\n    }\n    DbTarget.store = 'targets';\n    /** Keys are automatically assigned via the targetId property. */\n    DbTarget.keyPath = 'targetId';\n    /** The name of the queryTargets index. */\n    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n    /**\n     * The index of all canonicalIds to the targets that they match. This is not\n     * a unique mapping because canonicalId does not promise a unique name for all\n     * possible queries, so we append the targetId to make the mapping unique.\n     */\n    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n    return DbTarget;\n}());\nexport { DbTarget };\n/**\n * An object representing an association between a target and a document.\n * Stored in the targetDocument object store to store the documents tracked by a\n * particular target.\n */\nvar DbTargetDocument = /** @class */ (function () {\n    function DbTargetDocument(\n    /**\n     * The targetId identifying a target.\n     */\n    targetId, \n    /**\n     * The path to the document, as encoded in the key.\n     */\n    path) {\n        this.targetId = targetId;\n        this.path = path;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbTargetDocument.store = 'targetDocuments';\n    /** Keys are automatically assigned via the targetId, path properties. */\n    DbTargetDocument.keyPath = ['targetId', 'path'];\n    /** The index name for the reverse index. */\n    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n    /** We also need to create the reverse index for these properties. */\n    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n    return DbTargetDocument;\n}());\nexport { DbTargetDocument };\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nvar DbTargetGlobal = /** @class */ (function () {\n    function DbTargetGlobal(\n    /**\n     * The highest numbered target id across all targets.\n     *\n     * See DbTarget.targetId.\n     */\n    highestTargetId, \n    /**\n     * The highest numbered lastListenSequenceNumber across all targets.\n     *\n     * See DbTarget.lastListenSequenceNumber.\n     */\n    highestListenSequenceNumber, \n    /**\n     * A global snapshot version representing the last consistent snapshot we\n     * received from the backend. This is monotonically increasing and any\n     * snapshots received from the backend prior to this version (e.g. for\n     * targets resumed with a resumeToken) should be suppressed (buffered)\n     * until the backend has caught up to this snapshot version again. This\n     * prevents our cache from ever going backwards in time.\n     */\n    lastRemoteSnapshotVersion) {\n        this.highestTargetId = highestTargetId;\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    /**\n     * The key string used for the single object that exists in the\n     * DbTargetGlobal store.\n     */\n    DbTargetGlobal.key = 'targetGlobalKey';\n    DbTargetGlobal.store = 'targetGlobal';\n    return DbTargetGlobal;\n}());\nexport { DbTargetGlobal };\n/**\n * The list of all IndexedDB stored used by the SDK. This is used when creating\n * transactions so that access across all stores is done atomically.\n */\nexport var ALL_STORES = [\n    DbMutationQueue.store,\n    DbMutationBatch.store,\n    DbDocumentMutation.store,\n    DbRemoteDocument.store,\n    DbTarget.store,\n    DbOwner.store,\n    DbTargetGlobal.store,\n    DbTargetDocument.store\n];\n\n//# sourceMappingURL=indexeddb_schema.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_schema.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { PersistencePromise } from './persistence_promise';\nvar LOG_TAG = 'SimpleDb';\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nvar SimpleDb = /** @class */ (function () {\n    function SimpleDb(db) {\n        this.db = db;\n    }\n    /** Opens the specified database, creating or upgrading it if necessary. */\n    SimpleDb.openOrCreate = function (name, version, runUpgrade) {\n        assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');\n        debug(LOG_TAG, 'Opening database:', name);\n        return new PersistencePromise(function (resolve, reject) {\n            // TODO(mikelehen): Investigate browser compatibility.\n            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n            // suggests IE9 and older WebKit browsers handle upgrade\n            // differently.\n            var request = window.indexedDB.open(name, version);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(new SimpleDb(db));\n            };\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onupgradeneeded = function (event) {\n                debug(LOG_TAG, 'Database \"' + name + '\" requires upgrade from version:', event.oldVersion);\n                // TODO(mikelehen): If/when we need to do an actual data\n                // migration, we'll want to wrap db in a SimpleDb and have the\n                // runUpgrade function return a PersistencePromise, since we'll\n                // likely need to do async reads and writes. For now we're\n                // cheating and just passing the raw IndexedDB in, since\n                // createObjectStore(), etc. are synchronous.\n                var db = event.target.result;\n                runUpgrade(db, event.oldVersion);\n            };\n        }).toPromise();\n    };\n    /** Deletes the specified database. */\n    SimpleDb.delete = function (name) {\n        debug(LOG_TAG, 'Removing database:', name);\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n    };\n    /** Returns true if IndexedDB is available in the current environment. */\n    SimpleDb.isAvailable = function () {\n        if (typeof window === 'undefined' || window.indexedDB == null) {\n            return false;\n        }\n        // We extensively use indexed array values and compound keys,\n        // which IE and Edge do not support. However, they still have indexedDB\n        // defined on the window, so we need to check for them here and make sure\n        // to return that persistence is not enabled for those browsers.\n        // For tracking support of this feature, see here:\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n        // Check the UA string to find out the browser.\n        var ua = window.navigator.userAgent;\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        if (ua.indexOf('MSIE ') > 0 ||\n            ua.indexOf('Trident/') > 0 ||\n            ua.indexOf('Edge/') > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {\n        var transaction = new SimpleDbTransaction(this.db, mode, objectStores);\n        var transactionFnResult = transactionFn(transaction)\n            .catch(function (error) {\n            // Abort the transaction if there was an\n            // error.\n            transaction.abort();\n            return PersistencePromise.reject(error);\n        })\n            .toPromise();\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        return transaction.completionPromise.then(function () { return transactionFnResult; });\n    };\n    SimpleDb.prototype.close = function () {\n        this.db.close();\n    };\n    return SimpleDb;\n}());\nexport { SimpleDb };\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nvar IterationController = /** @class */ (function () {\n    function IterationController(dbCursor) {\n        this.dbCursor = dbCursor;\n        this.shouldStop = false;\n        this.nextKey = null;\n    }\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\n        get: function () {\n            return this.shouldStop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n        get: function () {\n            return this.nextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\n        set: function (value) {\n            this.dbCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This function can be called to stop iteration at any point.\n     */\n    IterationController.prototype.done = function () {\n        this.shouldStop = true;\n    };\n    /**\n     * This function can be called to skip to that next key, which could be\n     * an index or a primary key.\n     */\n    IterationController.prototype.skip = function (key) {\n        this.nextKey = key;\n    };\n    /**\n     * Delete the current cursor value from the object store.\n     *\n     * NOTE: You CANNOT do this with a keysOnly query.\n     */\n    IterationController.prototype.delete = function () {\n        return wrapRequest(this.dbCursor.delete());\n    };\n    return IterationController;\n}());\nexport { IterationController };\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nvar SimpleDbTransaction = /** @class */ (function () {\n    function SimpleDbTransaction(db, mode, objectStoresNames) {\n        var _this = this;\n        this.aborted = false;\n        this.transaction = db.transaction(objectStoresNames, mode);\n        this.completionPromise = new Promise(function (resolve, reject) {\n            // We consider aborting to be \"normal\" and just resolve the promise.\n            // May need to revisit if/when we actually need to abort transactions.\n            _this.transaction.onabort = _this.transaction.oncomplete = function (event) {\n                resolve();\n            };\n            _this.transaction.onerror = function (event) {\n                reject(event.target.error);\n            };\n        });\n    }\n    SimpleDbTransaction.prototype.abort = function () {\n        if (!this.aborted) {\n            debug(LOG_TAG, 'Aborting transaction.');\n            this.aborted = true;\n            this.transaction.abort();\n        }\n    };\n    /**\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n     * operations performed on the SimpleDbStore happen within the context of this\n     * transaction and it cannot be used anymore once the transaction is\n     * completed.\n     *\n     * Note that we can't actually enforce that the KeyType and ValueType are\n     * correct, but they allow type safety through the rest of the consuming code.\n     */\n    SimpleDbTransaction.prototype.store = function (storeName) {\n        var store = this.transaction.objectStore(storeName);\n        assert(!!store, 'Object store not part of transaction: ' + storeName);\n        return new SimpleDbStore(store);\n    };\n    return SimpleDbTransaction;\n}());\nexport { SimpleDbTransaction };\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nvar SimpleDbStore = /** @class */ (function () {\n    function SimpleDbStore(store) {\n        this.store = store;\n    }\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\n        var request;\n        if (value !== undefined) {\n            debug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n            request = this.store.put(value, keyOrValue);\n        }\n        else {\n            debug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n            request = this.store.put(keyOrValue);\n        }\n        return wrapRequest(request);\n    };\n    /**\n     * Gets the object with the specified key from the specified store, or null\n     * if no object exists with the specified key.\n     *\n     * @key The key of the object to get.\n     * @return The object with the specified key or null if no object exists.\n     */\n    SimpleDbStore.prototype.get = function (key) {\n        var _this = this;\n        var request = this.store.get(key);\n        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n        return wrapRequest(request).next(function (result) {\n            // Normalize nonexistence to null.\n            if (result === undefined) {\n                result = null;\n            }\n            debug(LOG_TAG, 'GET', _this.store.name, key, result);\n            return result;\n        });\n    };\n    SimpleDbStore.prototype.delete = function (key) {\n        debug(LOG_TAG, 'DELETE', this.store.name, key);\n        var request = this.store.delete(key);\n        return wrapRequest(request);\n    };\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n        var cursor = this.cursor(this.options(indexOrRange, range));\n        var results = [];\n        return this.iterateCursor(cursor, function (key, value) {\n            results.push(value);\n        }).next(function () {\n            return results;\n        });\n    };\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n        debug(LOG_TAG, 'DELETE ALL', this.store.name);\n        var options = this.options(indexOrRange, range);\n        options.keysOnly = false;\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, function (key, value, control) {\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\n            // calling delete() on an object store with a single key\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n            // however, this requires us *not* to use a keysOnly cursor\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n            // may want to compare the performance of each method.\n            return control.delete();\n        });\n    };\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n        var options;\n        if (!callback) {\n            options = {};\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, callback);\n    };\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n        var results = [];\n        return new PersistencePromise(function (resolve, reject) {\n            cursorRequest.onerror = function (event) {\n                reject(event.target.error);\n            };\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                    resolve();\n                    return;\n                }\n                var controller = new IterationController(cursor);\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\n                if (userResult instanceof PersistencePromise) {\n                    results.push(userResult);\n                }\n                if (controller.isDone) {\n                    resolve();\n                }\n                else if (controller.skipToKey === null) {\n                    cursor.continue();\n                }\n                else {\n                    cursor.continue(controller.skipToKey);\n                }\n            };\n        }).next(function () {\n            return PersistencePromise.waitFor(results);\n        });\n    };\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\n        var indexName = undefined;\n        if (indexOrRange !== undefined) {\n            if (typeof indexOrRange === 'string') {\n                indexName = indexOrRange;\n            }\n            else {\n                assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');\n                range = indexOrRange;\n            }\n        }\n        return { index: indexName, range: range };\n    };\n    SimpleDbStore.prototype.cursor = function (options) {\n        var direction = 'next';\n        if (options.reverse) {\n            direction = 'prev';\n        }\n        if (options.index) {\n            var index = this.store.index(options.index);\n            if (options.keysOnly) {\n                return index.openKeyCursor(options.range, direction);\n            }\n            else {\n                return index.openCursor(options.range, direction);\n            }\n        }\n        else {\n            return this.store.openCursor(options.range, direction);\n        }\n    };\n    return SimpleDbStore;\n}());\nexport { SimpleDbStore };\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n    return new PersistencePromise(function (resolve, reject) {\n        request.onsuccess = function (event) {\n            var result = event.target.result;\n            resolve(result);\n        };\n        request.onerror = function (event) {\n            reject(event.target.error);\n        };\n    });\n}\n\n//# sourceMappingURL=simple_db.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/simple_db.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { assert, fail } from '../util/assert';\nimport { immediatePredecessor, primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport * as EncodedResourcePath from './encoded_resource_path';\nimport { DbDocumentMutation, DbMutationBatch, DbMutationQueue } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbTransaction } from './simple_db';\n/** A mutation queue for a specific user, backed by IndexedDB. */\nvar IndexedDbMutationQueue = /** @class */ (function () {\n    function IndexedDbMutationQueue(\n    /**\n     * The normalized userId (e.g. null UID => \"\" userId) used to store /\n     * retrieve mutations.\n     */\n    userId, serializer) {\n        this.userId = userId;\n        this.serializer = serializer;\n        this.garbageCollector = null;\n    }\n    /**\n     * Creates a new mutation queue for the given user.\n     * @param user The user for which to create a mutation queue.\n     * @param serializer The serializer to use when persisting to IndexedDb.\n     */\n    IndexedDbMutationQueue.forUser = function (user, serializer) {\n        // TODO(mcg): Figure out what constraints there are on userIDs\n        // In particular, are there any reserved characters? are empty ids allowed?\n        // For the moment store these together in the same mutations table assuming\n        // that empty userIDs aren't allowed.\n        assert(user.uid !== '', 'UserID must not be an empty string.');\n        var userId = user.isAuthenticated() ? user.uid : '';\n        return new IndexedDbMutationQueue(userId, serializer);\n    };\n    IndexedDbMutationQueue.prototype.start = function (transaction) {\n        var _this = this;\n        return IndexedDbMutationQueue.loadNextBatchIdFromDb(transaction)\n            .next(function (nextBatchId) {\n            _this.nextBatchId = nextBatchId;\n            return mutationQueuesStore(transaction).get(_this.userId);\n        })\n            .next(function (metadata) {\n            if (!metadata) {\n                metadata = new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, \n                /*lastStreamToken=*/ '');\n            }\n            _this.metadata = metadata;\n            // On restart, nextBatchId may end up lower than\n            // lastAcknowledgedBatchId since it's computed from the queue\n            // contents, and there may be no mutations in the queue. In this\n            // case, we need to reset lastAcknowledgedBatchId (which is safe\n            // since the queue must be empty).\n            if (_this.metadata.lastAcknowledgedBatchId >= _this.nextBatchId) {\n                return _this.checkEmpty(transaction).next(function (empty) {\n                    assert(empty, 'Reset nextBatchID is only possible when the queue is empty');\n                    _this.metadata.lastAcknowledgedBatchId = BATCHID_UNKNOWN;\n                    return mutationQueuesStore(transaction).put(_this.metadata);\n                });\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns one larger than the largest batch ID that has been stored. If there\n     * are no mutations returns 0. Note that batch IDs are global.\n     */\n    IndexedDbMutationQueue.loadNextBatchIdFromDb = function (txn) {\n        var maxBatchId = BATCHID_UNKNOWN;\n        return mutationsStore(txn)\n            .iterate({ reverse: true }, function (key, batch, control) {\n            var userId = key[0], batchId = key[1];\n            if (batchId > maxBatchId) {\n                maxBatchId = batch.batchId;\n            }\n            if (userId === '') {\n                // We can't compute a predecessor for the empty string, since it\n                // is lexographically first. That also means that no other\n                // userIds can come before this one, so we can just exit early.\n                control.done();\n            }\n            else {\n                var nextUser = immediatePredecessor(userId);\n                control.skip([nextUser]);\n            }\n        })\n            .next(function () { return maxBatchId + 1; });\n    };\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n        var empty = true;\n        var range = IDBKeyRange.bound(this.keyForBatchId(Number.NEGATIVE_INFINITY), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, value, control) {\n            empty = false;\n            control.done();\n        })\n            .next(function () { return empty; });\n    };\n    IndexedDbMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.nextBatchId);\n    };\n    IndexedDbMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.metadata.lastAcknowledgedBatchId);\n    };\n    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        this.metadata.lastAcknowledgedBatchId = batchId;\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return PersistencePromise.resolve(this.metadata.lastStreamToken);\n    };\n    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        var _this = this;\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        var batch = new MutationBatch(batchId, localWriteTime, mutations);\n        var dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n        return mutationsStore(transaction)\n            .put(dbBatch)\n            .next(function () {\n            var promises = [];\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n                var mutation = mutations_1[_i];\n                var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\n                documentMutationsStore(transaction).put(indexKey, DbDocumentMutation.PLACEHOLDER);\n            }\n            return PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            return batch;\n        });\n    };\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        var _this = this;\n        return mutationsStore(transaction)\n            .get(this.keyForBatchId(batchId))\n            .next(function (dbBatch) {\n            return dbBatch ? _this.serializer.fromDbMutationBatch(dbBatch) : null;\n        });\n    };\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.lowerBound(this.keyForBatchId(batchId + 1));\n        var foundBatch = null;\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, dbBatch, control) {\n            if (dbBatch.userId === _this.userId) {\n                assert(dbBatch.batchId > batchId, 'Should have found mutation after ' + batchId);\n                foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);\n            }\n            control.done();\n        })\n            .next(function () { return foundBatch; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(batchId));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        // Scan the document-mutation index starting with a prefix starting with\n        // the given documentKey.\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        var results = [];\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            // Only consider rows matching exactly the specific key of\n            // interest. Note that because we order by path first, and we\n            // order terminators before path separators, we'll encounter all\n            // the index rows for documentKey contiguously. In particular, all\n            // the rows for documentKey will occur before any rows for\n            // documents nested in a subcollection beneath documentKey so we\n            // can stop as soon as we hit any such row.\n            var path = EncodedResourcePath.decode(encodedPath);\n            if (userID !== _this.userId || !documentKey.path.isEqual(path)) {\n                control.done();\n                return;\n            }\n            var mutationKey = _this.keyForBatchId(batchID);\n            // Look up the mutation batch in the store.\n            // PORTING NOTE: because iteration is callback driven in the web,\n            // we just look up the key instead of keeping an open iterator\n            // like iOS.\n            return mutationsStore(transaction)\n                .get(mutationKey)\n                .next(function (dbBatch) {\n                if (dbBatch === null) {\n                    fail('Dangling document-mutation reference found: ' +\n                        indexKey +\n                        ' which points to ' +\n                        mutationKey);\n                }\n                results.push(_this.serializer.fromDbMutationBatch(dbBatch));\n            });\n        })\n            .next(function () { return results; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        assert(!query.isDocumentQuery(), \"Document queries shouldn't go down this path\");\n        var queryPath = query.path;\n        var immediateChildrenLength = queryPath.length + 1;\n        // TODO(mcg): Actually implement a single-collection query\n        //\n        // This is actually executing an ancestor query, traversing the whole\n        // subtree below the collection which can be horrifically inefficient for\n        // some structures. The right way to solve this is to implement the full\n        // value index, but that's not in the cards in the near future so this is\n        // the best we can do for the moment.\n        //\n        // Since we don't yet index the actual properties in the mutations, our\n        // current approach is to just return all mutation batches that affect\n        // documents in the collection being queried.\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\n        // scan of the main table.\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            var path = EncodedResourcePath.decode(encodedPath);\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n                control.done();\n                return;\n            }\n            // Rows with document keys more than one segment longer than the\n            // query path can't be matches. For example, a query on 'rooms'\n            // can't match the document /rooms/abc/messages/xyx.\n            // TODO(mcg): we'll need a different scanner when we implement\n            // ancestor queries.\n            if (path.length !== immediateChildrenLength) {\n                return;\n            }\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        })\n            .next(function () {\n            var results = [];\n            var promises = [];\n            // TODO(rockwood): Implement this using iterate.\n            uniqueBatchIDs.forEach(function (batchID) {\n                var mutationKey = _this.keyForBatchId(batchID);\n                promises.push(mutationsStore(transaction)\n                    .get(mutationKey)\n                    .next(function (mutation) {\n                    if (mutation === null) {\n                        fail('Dangling document-mutation reference found, ' +\n                            'which points to ' +\n                            mutationKey);\n                    }\n                    results.push(_this.serializer.fromDbMutationBatch(mutation));\n                }));\n            });\n            return PersistencePromise.waitFor(promises).next(function () { return results; });\n        });\n    };\n    IndexedDbMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var txn = mutationsStore(transaction);\n        var indexTxn = documentMutationsStore(transaction);\n        var promises = [];\n        var _loop_1 = function (batch) {\n            var range = IDBKeyRange.only(this_1.keyForBatchId(batch.batchId));\n            var numDeleted = 0;\n            var removePromise = txn.iterate({ range: range }, function (key, value, control) {\n                numDeleted++;\n                return control.delete();\n            });\n            promises.push(removePromise.next(function () {\n                assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +\n                    batch.batchId);\n            }));\n            for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {\n                var mutation = _a[_i];\n                var indexKey = DbDocumentMutation.key(this_1.userId, mutation.key.path, batch.batchId);\n                promises.push(indexTxn.delete(indexKey));\n                if (this_1.garbageCollector !== null) {\n                    this_1.garbageCollector.addPotentialGarbageKey(mutation.key);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            _loop_1(batch);\n        }\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        var _this = this;\n        return this.checkEmpty(txn).next(function (empty) {\n            if (!empty) {\n                return PersistencePromise.resolve();\n            }\n            // Verify that there are no entries in the documentMutations index if\n            // the queue is empty.\n            var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));\n            var danglingMutationReferences = [];\n            return documentMutationsStore(txn)\n                .iterate({ range: startRange }, function (key, _, control) {\n                var userID = key[0];\n                if (userID !== _this.userId) {\n                    control.done();\n                    return;\n                }\n                else {\n                    var path = EncodedResourcePath.decode(key[1]);\n                    danglingMutationReferences.push(path);\n                }\n            })\n                .next(function () {\n                assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. Dangling keys: ' +\n                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));\n            });\n        });\n    };\n    IndexedDbMutationQueue.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n        var _this = this;\n        var indexKey = DbDocumentMutation.prefixForPath(this.userId, key.path);\n        var encodedPath = indexKey[1];\n        var startRange = IDBKeyRange.lowerBound(indexKey);\n        var containsKey = false;\n        return documentMutationsStore(txn)\n            .iterate({ range: startRange, keysOnly: true }, function (key, value, control) {\n            var userID = key[0], keyPath = key[1], /*batchID*/ _ = key[2];\n            if (userID === _this.userId && keyPath === encodedPath) {\n                containsKey = true;\n            }\n            control.done();\n        })\n            .next(function () { return containsKey; });\n    };\n    /**\n     * Creates a [userId, batchId] key for use with the DbMutationQueue object\n     * store.\n     */\n    IndexedDbMutationQueue.prototype.keyForBatchId = function (batchId) {\n        return [this.userId, batchId];\n    };\n    return IndexedDbMutationQueue;\n}());\nexport { IndexedDbMutationQueue };\nfunction validateStreamToken(token) {\n    assert(typeof token === 'string', 'Persisting non-string stream token not supported.');\n    return token;\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n    return getStore(txn, DbMutationBatch.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n    return getStore(txn, DbDocumentMutation.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n    return getStore(txn, DbMutationQueue.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_mutation_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_mutation_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { assert, fail } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport * as EncodedResourcePath from './encoded_resource_path';\nimport { DbTarget, DbTargetDocument, DbTargetGlobal } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbQueryCache = /** @class */ (function () {\n    function IndexedDbQueryCache(serializer) {\n        this.serializer = serializer;\n        /**\n         * The last received snapshot version. We store this seperately from the\n         * metadata to avoid the extra conversion to/from DbTimestamp.\n         */\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n        /**\n         * A cached copy of the metadata for the query cache.\n         */\n        this.metadata = new DbTargetGlobal(\n        /*highestTargetId=*/ 0, \n        /*lastListenSequenceNumber=*/ 0, SnapshotVersion.MIN.toTimestamp());\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n    }\n    IndexedDbQueryCache.prototype.start = function (transaction) {\n        var _this = this;\n        return globalTargetStore(transaction)\n            .get(DbTargetGlobal.key)\n            .next(function (metadata) {\n            if (metadata !== null) {\n                _this.metadata = metadata;\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\n                _this.lastRemoteSnapshotVersion = SnapshotVersion.fromTimestamp(new Timestamp(lastSavedVersion.seconds, lastSavedVersion.nanos));\n            }\n            return PersistencePromise.resolve();\n        });\n    };\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\n        return this.metadata.highestTargetId;\n    };\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, this.metadata);\n    };\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        var _this = this;\n        var targetId = queryData.targetId;\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\n        if (targetId > this.metadata.highestTargetId) {\n            this.metadata.highestTargetId = targetId;\n            return addedQueryPromise.next(function () {\n                return globalTargetStore(transaction).put(DbTargetGlobal.key, _this.metadata);\n            });\n        }\n        else {\n            return addedQueryPromise;\n        }\n    };\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\n            targetsStore(transaction).delete(queryData.targetId);\n        });\n    };\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\n        var _this = this;\n        // Iterating by the canonicalId may yield more than one result because\n        // canonicalId values are not required to be unique per target. This query\n        // depends on the queryTargets index to be efficent.\n        var canonicalId = query.canonicalId();\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n        var result = null;\n        return targetsStore(transaction)\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\n            var found = _this.serializer.fromDbTarget(value);\n            // After finding a potential match, check that the query is\n            // actually equal to the requested query.\n            if (query.isEqual(found.query)) {\n                result = found;\n                control.done();\n            }\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // Indexeddb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = EncodedResourcePath.encode(key.path);\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\n        });\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        var _this = this;\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // IndexedDb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = EncodedResourcePath.encode(key.path);\n            promises.push(store.delete([targetId, path]));\n            if (_this.garbageCollector !== null) {\n                _this.garbageCollector.addPotentialGarbageKey(key);\n            }\n        });\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        var store = documentTargetStore(txn);\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\n            return store.delete(range);\n        });\n    };\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\n        var _this = this;\n        var store = documentTargetStore(txn);\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\n            // In order to generate garbage events properly, we need to read these\n            // keys before deleting.\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\n                var path = EncodedResourcePath.decode(key[1]);\n                var docKey = new DocumentKey(path);\n                // Paranoid assertion in case the the collector is set to null\n                // during the iteration.\n                assert(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\n            });\n        }\n        else {\n            return PersistencePromise.resolve();\n        }\n    };\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var store = documentTargetStore(txn);\n        var result = documentKeySet();\n        return store\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\n            var path = EncodedResourcePath.decode(key[1]);\n            var docKey = new DocumentKey(path);\n            result = result.add(docKey);\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\n        assert(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\n        var path = EncodedResourcePath.encode(key.path);\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var count = 0;\n        return documentTargetStore(txn)\n            .iterate({\n            index: DbTargetDocument.documentTargetsIndex,\n            keysOnly: true,\n            range: range\n        }, function (key, _, control) {\n            count++;\n            control.done();\n        })\n            .next(function () { return count > 0; });\n    };\n    return IndexedDbQueryCache;\n}());\nexport { IndexedDbQueryCache };\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n    return getStore(txn, DbTarget.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n    return getStore(txn, DbTargetGlobal.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n    return getStore(txn, DbTargetDocument.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_query_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_query_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { fail } from '../util/assert';\nimport { DbRemoteDocument } from './indexeddb_schema';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\nexport { IndexedDbRemoteDocumentCache };\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(DbRemoteDocument.store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n//# sourceMappingURL=indexeddb_remote_document_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { assert, fail } from '../util/assert';\nimport { DbMutationBatch, DbNoDocument, DbRemoteDocument, DbTarget, DbTimestamp } from './indexeddb_schema';\nimport { QueryData, QueryPurpose } from './query_data';\n/** Serializer for values stored in the LocalStore. */\nvar LocalSerializer = /** @class */ (function () {\n    function LocalSerializer(remoteSerializer) {\n        this.remoteSerializer = remoteSerializer;\n    }\n    /** Decodes a remote document from storage locally to a Document. */\n    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {\n        if (remoteDoc.document) {\n            return this.remoteSerializer.fromDocument(remoteDoc.document);\n        }\n        else if (remoteDoc.noDocument) {\n            var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n            var readTime = remoteDoc.noDocument.readTime;\n            var timestamp = new Timestamp(readTime.seconds, readTime.nanos);\n            return new NoDocument(key, SnapshotVersion.fromTimestamp(timestamp));\n        }\n        else {\n            return fail('Unexpected DbRemoteDocument');\n        }\n    };\n    /** Encodes a document for storage locally. */\n    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {\n        if (maybeDoc instanceof Document) {\n            var doc = this.remoteSerializer.toDocument(maybeDoc);\n            return new DbRemoteDocument(null, doc);\n        }\n        else {\n            var path = maybeDoc.key.path.toArray();\n            var timestamp = maybeDoc.version.toTimestamp();\n            var readTime = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n            return new DbRemoteDocument(new DbNoDocument(path, readTime), null);\n        }\n    };\n    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {\n        var _this = this;\n        var serializedMutations = batch.mutations.map(function (m) {\n            return _this.remoteSerializer.toMutation(m);\n        });\n        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toEpochMilliseconds(), serializedMutations);\n    };\n    /** Decodes a DbMutationBatch into a MutationBatch */\n    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {\n        var _this = this;\n        var mutations = dbBatch.mutations.map(function (m) {\n            return _this.remoteSerializer.fromMutation(m);\n        });\n        var timestamp = Timestamp.fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n        return new MutationBatch(dbBatch.batchId, timestamp, mutations);\n    };\n    /** Decodes a DbTarget into QueryData */\n    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {\n        var readTime = new Timestamp(dbTarget.readTime.seconds, dbTarget.readTime.nanos);\n        var version = SnapshotVersion.fromTimestamp(readTime);\n        var query;\n        if (isDocumentQuery(dbTarget.query)) {\n            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n        }\n        else {\n            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n        }\n        return new QueryData(query, dbTarget.targetId, QueryPurpose.Listen, version, dbTarget.resumeToken);\n    };\n    /** Encodes QueryData into a DbTarget for storage locally. */\n    LocalSerializer.prototype.toDbTarget = function (queryData) {\n        assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' +\n            QueryPurpose.Listen +\n            ' may be stored, got ' +\n            queryData.purpose);\n        var timestamp = queryData.snapshotVersion.toTimestamp();\n        var dbTimestamp = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n        var queryProto;\n        if (queryData.query.isDocumentQuery()) {\n            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n        }\n        else {\n            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n        }\n        assert(typeof queryData.resumeToken === 'string', 'Persisting non-string resume token not supported.');\n        var resumeToken = queryData.resumeToken;\n        // lastListenSequenceNumber is always 0 until we do real GC.\n        return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, 0, queryProto);\n    };\n    return LocalSerializer;\n}());\nexport { LocalSerializer };\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n    return dbQuery.documents !== undefined;\n}\n\n//# sourceMappingURL=local_serializer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_serializer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { User } from '../auth/user';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nvar OAuthToken = /** @class */ (function () {\n    function OAuthToken(value, user) {\n        this.user = user;\n        this.type = 'OAuth';\n        this.authHeaders = { Authorization: \"Bearer \" + value };\n    }\n    return OAuthToken;\n}());\nexport { OAuthToken };\n/** A CredentialsProvider that always yields an empty token. */\nvar EmptyCredentialsProvider = /** @class */ (function () {\n    function EmptyCredentialsProvider() {\n        /**\n         * Stores the User listener registered with setUserChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.userListener = null;\n    }\n    EmptyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(null);\n    };\n    EmptyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire with initial user.\n        listener(User.UNAUTHENTICATED);\n    };\n    EmptyCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.userListener !== null, 'removeUserChangeListener() when no listener registered');\n        this.userListener = null;\n    };\n    return EmptyCredentialsProvider;\n}());\nexport { EmptyCredentialsProvider };\nvar FirebaseCredentialsProvider = /** @class */ (function () {\n    function FirebaseCredentialsProvider(app) {\n        var _this = this;\n        this.app = app;\n        /**\n         * The auth token listener registered with FirebaseApp, retained here so we\n         * can unregister it.\n         */\n        this.tokenListener = null;\n        /**\n         * Counter used to detect if the user changed while a getToken request was\n         * outstanding.\n         */\n        this.userCounter = 0;\n        /** The User listener registered with setUserChangeListener(). */\n        this.userListener = null;\n        // We listen for token changes but all we really care about is knowing when\n        // the uid may have changed.\n        this.tokenListener = function () {\n            var newUser = _this.getUser();\n            if (!_this.currentUser || !newUser.isEqual(_this.currentUser)) {\n                _this.currentUser = newUser;\n                _this.userCounter++;\n                if (_this.userListener) {\n                    _this.userListener(_this.currentUser);\n                }\n            }\n        };\n        this.userCounter = 0;\n        // Will fire at least once where we set this.currentUser\n        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n    FirebaseCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        assert(this.tokenListener != null, 'getToken cannot be called after listener removed.');\n        // Take note of the current value of the userCounter so that this method can\n        // fail (with an ABORTED error) if there is a user change while the request\n        // is outstanding.\n        var initialUserCounter = this.userCounter;\n        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {\n            // Cancel the request since the user changed while the request was\n            // outstanding so the response is likely for a previous user (which\n            // user, we can't be sure).\n            if (_this.userCounter !== initialUserCounter) {\n                throw new FirestoreError(Code.ABORTED, 'getToken aborted due to uid change.');\n            }\n            else {\n                if (tokenData) {\n                    assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\n                }\n                else {\n                    return null;\n                }\n            }\n        });\n    };\n    FirebaseCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire the initial event, but only if we received the initial user\n        if (this.currentUser) {\n            listener(this.currentUser);\n        }\n    };\n    FirebaseCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.tokenListener != null, 'removeUserChangeListener() called twice');\n        assert(this.userListener !== null, 'removeUserChangeListener() called when no listener registered');\n        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);\n        this.tokenListener = null;\n        this.userListener = null;\n    };\n    FirebaseCredentialsProvider.prototype.getUser = function () {\n        // TODO(mikelehen): Remove this check once we're shipping with firebase.js.\n        if (typeof this.app.INTERNAL.getUid !== 'function') {\n            fail('This version of the Firestore SDK requires at least version' +\n                ' 3.7.0 of firebase.js.');\n        }\n        var currentUid = this.app.INTERNAL.getUid();\n        assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);\n        return new User(currentUid);\n    };\n    return FirebaseCredentialsProvider;\n}());\nexport { FirebaseCredentialsProvider };\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * TODO(b/33147818) this implementation violates the current assumption that\n * tokens are immutable.  We need to either revisit this assumption or come\n * up with some way for FPA to use the listen/unlisten interface.\n */\nvar FirstPartyToken = /** @class */ (function () {\n    function FirstPartyToken(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        this.type = 'FirstParty';\n        this.user = User.FIRST_PARTY;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n        get: function () {\n            return {\n                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),\n                'X-Goog-AuthUser': this.sessionIndex\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirstPartyToken;\n}());\nexport { FirstPartyToken };\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar FirstPartyCredentialsProvider = /** @class */ (function () {\n    function FirstPartyCredentialsProvider(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    FirstPartyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n    };\n    // TODO(33108925): can someone switch users w/o a page refresh?\n    // TODO(33110621): need to understand token/session lifecycle\n    FirstPartyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.FIRST_PARTY);\n    };\n    FirstPartyCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return FirstPartyCredentialsProvider;\n}());\nexport { FirstPartyCredentialsProvider };\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(credentials) {\n    if (!credentials) {\n        return new EmptyCredentialsProvider();\n    }\n    switch (credentials.type) {\n        case 'gapi':\n            return new FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');\n        case 'provider':\n            return credentials.client;\n        default:\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n    }\n}\n\n//# sourceMappingURL=credentials.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/credentials.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function isPartialObserver(obj) {\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    var object = obj;\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in object && typeof object[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=observer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/observer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from '../core/timestamp';\nimport { ObjectValue } from '../model/field_value';\nimport { ArrayValue, BlobValue, BooleanValue, DoubleValue, GeoPointValue, IntegerValue, NullValue, RefValue, StringValue, TimestampValue } from '../model/field_value';\nimport { FieldMask, FieldTransform, PatchMutation, ServerTimestampTransform, SetMutation, TransformMutation } from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { SortedMap } from '../util/sorted_map';\nimport * as typeUtils from '../util/types';\nimport { Blob } from './blob';\nimport { FieldPath as ExternalFieldPath, fromDotSeparatedString } from './field_path';\nimport { DeleteFieldValueImpl, FieldValueImpl, ServerTimestampFieldValueImpl } from './field_value';\nimport { GeoPoint } from './geo_point';\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nvar ParsedSetData = /** @class */ (function () {\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedSetData.prototype.toMutations = function (key, precondition) {\n        var mutations = [];\n        if (this.fieldMask !== null) {\n            mutations.push(new PatchMutation(key, this.data, this.fieldMask, precondition));\n        }\n        else {\n            mutations.push(new SetMutation(key, this.data, precondition));\n        }\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedSetData;\n}());\nexport { ParsedSetData };\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar ParsedUpdateData = /** @class */ (function () {\n    function ParsedUpdateData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedUpdateData.prototype.toMutations = function (key, precondition) {\n        var mutations = [\n            new PatchMutation(key, this.data, this.fieldMask, precondition)\n        ];\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedUpdateData;\n}());\nexport { ParsedUpdateData };\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nvar UserDataSource;\n(function (UserDataSource) {\n    UserDataSource[UserDataSource[\"Set\"] = 0] = \"Set\";\n    UserDataSource[UserDataSource[\"Update\"] = 1] = \"Update\";\n    UserDataSource[UserDataSource[\"MergeSet\"] = 2] = \"MergeSet\";\n    UserDataSource[UserDataSource[\"QueryValue\"] = 3] = \"QueryValue\"; // from a where clause or cursor bound\n})(UserDataSource || (UserDataSource = {}));\nfunction isWrite(dataSource) {\n    switch (dataSource) {\n        case UserDataSource.Set: // fall through\n        case UserDataSource.MergeSet: // fall through\n        case UserDataSource.Update:\n            return true;\n        case UserDataSource.QueryValue:\n            return false;\n        default:\n            throw fail(\"Unexpected case for UserDataSource: \" + dataSource);\n    }\n}\n/** A \"context\" object passed around while parsing user data. */\nvar ParseContext = /** @class */ (function () {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param dataSource Indicates what kind of API method this data came from.\n     * @param methodName The name of the method the user called to create this\n     *     ParseContext.\n     * @param path A path within the object being parsed. This could be an empty\n     *     path (in which case the context represents the root of the data being\n     *     parsed), or a nonempty path (indicating the context represents a nested\n     *     location within the data).\n     * @param arrayElement Whether or not this context corresponds to an element\n     *     of an array.\n     * @param fieldTransforms A mutable list of field transforms encountered while\n     *     parsing the data.\n     * @param fieldMask A mutable list of field paths encountered while parsing\n     *     the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {\n        this.dataSource = dataSource;\n        this.methodName = methodName;\n        this.path = path;\n        this.arrayElement = arrayElement;\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        if (fieldTransforms === undefined) {\n            this.validatePath();\n        }\n        this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n        this.fieldTransforms = fieldTransforms || [];\n        this.fieldMask = fieldMask || [];\n    }\n    ParseContext.prototype.childContextForField = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePathSegment(field);\n        return context;\n    };\n    ParseContext.prototype.childContextForFieldPath = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePath();\n        return context;\n    };\n    ParseContext.prototype.childContextForArray = function (index) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // null.\n        return new ParseContext(this.dataSource, this.methodName, \n        /*path=*/ null, \n        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);\n    };\n    ParseContext.prototype.createError = function (reason) {\n        var fieldDescription = this.path === null || this.path.isEmpty()\n            ? ''\n            : \" (found in field \" + this.path.toString() + \")\";\n        return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + this.methodName + \"() called with invalid data. \" +\n            reason +\n            fieldDescription);\n    };\n    ParseContext.prototype.validatePath = function () {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path === null) {\n            return;\n        }\n        for (var i = 0; i < this.path.length; i++) {\n            this.validatePathSegment(this.path.get(i));\n        }\n    };\n    ParseContext.prototype.validatePathSegment = function (segment) {\n        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n            throw this.createError('Document fields cannot begin and end with __');\n        }\n    };\n    return ParseContext;\n}());\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nvar DocumentKeyReference = /** @class */ (function () {\n    function DocumentKeyReference(databaseId, key) {\n        this.databaseId = databaseId;\n        this.key = key;\n    }\n    return DocumentKeyReference;\n}());\nexport { DocumentKeyReference };\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar UserDataConverter = /** @class */ (function () {\n    function UserDataConverter(preConverter) {\n        this.preConverter = preConverter;\n    }\n    /** Parse document data from a non-merge set() call. */\n    UserDataConverter.prototype.parseSetData = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.Set, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        return new ParsedSetData(updateData, \n        /* fieldMask= */ null, context.fieldTransforms);\n    };\n    /** Parse document data from a set() call with '{merge:true}'. */\n    UserDataConverter.prototype.parseMergeData = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.MergeSet, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        var fieldMask = new FieldMask(context.fieldMask);\n        return new ParsedSetData(updateData, fieldMask, context.fieldTransforms);\n    };\n    /** Parse update data from an update() call. */\n    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {\n        var _this = this;\n        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var fieldMaskPaths = [];\n        var updateData = ObjectValue.EMPTY;\n        objUtils.forEach(input, function (key, value) {\n            var path = fieldPathFromDotSeparatedString(methodName, key);\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            if (value instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = _this.parseData(value, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        });\n        var mask = new FieldMask(fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /** Parse update data from a list of field/value arguments. */\n    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {\n        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);\n        var keys = [fieldPathFromArgument(methodName, field)];\n        var values = [value];\n        if (moreFieldsAndValues.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\n                'of arguments that alternate between field names and values.');\n        }\n        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));\n            values.push(moreFieldsAndValues[i + 1]);\n        }\n        var fieldMaskPaths = [];\n        var updateData = ObjectValue.EMPTY;\n        for (var i = 0; i < keys.length; ++i) {\n            var path = keys[i];\n            var childContext = context.childContextForFieldPath(path);\n            var value_1 = this.runPreConverter(values[i], childContext);\n            if (value_1 instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = this.parseData(value_1, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        }\n        var mask = new FieldMask(fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /**\n     * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n     * bound).\n     */\n    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.QueryValue, methodName, FieldPath.EMPTY_PATH);\n        var parsed = this.parseData(input, context);\n        assert(parsed != null, 'Parsed data should not be null.');\n        assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');\n        return parsed;\n    };\n    /** Sends data through this.preConverter, handling any thrown errors. */\n    UserDataConverter.prototype.runPreConverter = function (input, context) {\n        try {\n            return this.preConverter(input);\n        }\n        catch (e) {\n            var message = errorMessage(e);\n            throw context.createError(message);\n        }\n    };\n    /**\n     * Internal helper for parsing user data.\n     *\n     * @param input Data to be parsed.\n     * @param context A context object representing the current path being parsed,\n     * the source of the data being parsed, etc.\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseData = function (input, context) {\n        input = this.runPreConverter(input, context);\n        if (input instanceof Array) {\n            // TODO(b/34871131): Include the path containing the array in the error\n            // message.\n            if (context.arrayElement) {\n                throw context.createError('Nested arrays are not supported');\n            }\n            // If context.path is null we are already inside an array and we don't\n            // support field mask paths more granular than the top-level array.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseArray(input, context);\n        }\n        else if (looksLikeJsonObject(input)) {\n            validatePlainObject('Unsupported field value:', context, input);\n            return this.parseObject(input, context);\n        }\n        else {\n            // If context.path is null, we are inside an array and we should have\n            // already added the root of the array to the field mask.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseScalarValue(input, context);\n        }\n    };\n    UserDataConverter.prototype.parseArray = function (array, context) {\n        var result = [];\n        var entryIndex = 0;\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n            var entry = array_1[_i];\n            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));\n            if (parsedEntry == null) {\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                parsedEntry = NullValue.INSTANCE;\n            }\n            result.push(parsedEntry);\n            entryIndex++;\n        }\n        return new ArrayValue(result);\n    };\n    UserDataConverter.prototype.parseObject = function (obj, context) {\n        var _this = this;\n        var result = new SortedMap(primitiveComparator);\n        objUtils.forEach(obj, function (key, val) {\n            var parsedValue = _this.parseData(val, context.childContextForField(key));\n            if (parsedValue != null) {\n                result = result.insert(key, parsedValue);\n            }\n        });\n        return new ObjectValue(result);\n    };\n    /**\n     * Helper to parse a scalar value (i.e. not an Object or Array)\n     *\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseScalarValue = function (value, context) {\n        if (value === null) {\n            return NullValue.INSTANCE;\n        }\n        else if (typeof value === 'number') {\n            if (typeUtils.isSafeInteger(value)) {\n                return new IntegerValue(value);\n            }\n            else {\n                return new DoubleValue(value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            return BooleanValue.of(value);\n        }\n        else if (typeof value === 'string') {\n            return new StringValue(value);\n        }\n        else if (value instanceof Date) {\n            return new TimestampValue(Timestamp.fromDate(value));\n        }\n        else if (value instanceof GeoPoint) {\n            return new GeoPointValue(value);\n        }\n        else if (value instanceof Blob) {\n            return new BlobValue(value);\n        }\n        else if (value instanceof DocumentKeyReference) {\n            return new RefValue(value.databaseId, value.key);\n        }\n        else if (value instanceof FieldValueImpl) {\n            if (value instanceof DeleteFieldValueImpl) {\n                if (context.dataSource === UserDataSource.MergeSet) {\n                    return null;\n                }\n                else if (context.dataSource === UserDataSource.Update) {\n                    assert(context.path == null || context.path.length > 0, 'FieldValue.delete() at the top level should have already' +\n                        ' been handled.');\n                    throw context.createError('FieldValue.delete() can only appear at the top level ' +\n                        'of your update data');\n                }\n                else {\n                    // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n                    throw context.createError('FieldValue.delete() can only be used with update() and set() with {merge:true}');\n                }\n            }\n            else if (value instanceof ServerTimestampFieldValueImpl) {\n                if (!isWrite(context.dataSource)) {\n                    throw context.createError('FieldValue.serverTimestamp() can only be used with set()' +\n                        ' and update()');\n                }\n                if (context.path === null) {\n                    throw context.createError('FieldValue.serverTimestamp() is not currently' +\n                        ' supported inside arrays');\n                }\n                context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));\n                // Return null so this value is omitted from the parsed result.\n                return null;\n            }\n            else {\n                return fail('Unknown FieldValue type: ' + value);\n            }\n        }\n        else {\n            throw context.createError(\"Unsupported field value: \" + valueDescription(value));\n        }\n    };\n    return UserDataConverter;\n}());\nexport { UserDataConverter };\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        !(input instanceof Array) &&\n        !(input instanceof Date) &&\n        !(input instanceof GeoPoint) &&\n        !(input instanceof Blob) &&\n        !(input instanceof DocumentKeyReference) &&\n        !(input instanceof FieldValueImpl));\n}\nfunction validatePlainObject(message, context, input) {\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n        var description = valueDescription(input);\n        if (description === 'an object') {\n            // Massage the error if it was an object.\n            throw context.createError(message + ' a custom object');\n        }\n        else {\n            throw context.createError(message + ' ' + description);\n        }\n    }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(methodName, path) {\n    if (path instanceof ExternalFieldPath) {\n        return path._internalPath;\n    }\n    else if (typeof path === 'string') {\n        return fieldPathFromDotSeparatedString(methodName, path);\n    }\n    else {\n        var message = 'Field path arguments must be of type string or FieldPath.';\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path) {\n    try {\n        return fromDotSeparatedString(path)._internalPath;\n    }\n    catch (e) {\n        var message = errorMessage(e);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error) {\n    return error instanceof Error ? error.message : error.toString();\n}\n\n//# sourceMappingURL=user_data_converter.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/user_data_converter.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { FieldPath as ExternalFieldPath } from './field_path';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { FirestoreClient } from '../core/firestore_client';\nimport { Bound, Direction, fieldFilter, OrderBy, Query as InternalQuery, RelationFilter, RelationOp } from '../core/query';\nimport { ChangeType } from '../core/view_snapshot';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ArrayValue, FieldValueOptions, ObjectValue, RefValue } from '../model/field_value';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport { ResourcePath } from '../model/path';\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { assert, fail } from '../util/assert';\nimport { AsyncObserver } from '../util/async_observer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateAtLeastNumberOfArgs, validateBetweenNumberOfArgs, validateDefined, validateExactNumberOfArgs, validateNamedOptionalType, validateNamedOptionalPropertyEquals, validateNamedType, validateOptionalArgType, validateOptionNames, valueDescription } from '../util/input_validation';\nimport * as log from '../util/log';\nimport { LogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { EmptyCredentialsProvider, FirebaseCredentialsProvider, makeCredentialsProvider } from './credentials';\nimport { isPartialObserver } from './observer';\nimport { DocumentKeyReference, fieldPathFromArgument, UserDataConverter } from './user_data_converter';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar FirestoreSettings = /** @class */ (function () {\n    function FirestoreSettings(settings) {\n        if (settings.host === undefined) {\n            if (settings.ssl !== undefined) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n            }\n            this.host = DEFAULT_HOST;\n            this.ssl = DEFAULT_SSL;\n        }\n        else {\n            validateNamedType('settings', 'string', 'host', settings.host);\n            this.host = settings.host;\n            validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n            this.ssl = objUtils.defaulted(settings.ssl, DEFAULT_SSL);\n        }\n        validateOptionNames('settings', settings, ['host', 'ssl', 'credentials']);\n        validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);\n        this.credentials = settings.credentials;\n    }\n    FirestoreSettings.prototype.isEqual = function (other) {\n        return (this.host === other.host &&\n            this.ssl === other.ssl &&\n            this.credentials === other.credentials);\n    };\n    return FirestoreSettings;\n}());\nvar FirestoreConfig = /** @class */ (function () {\n    function FirestoreConfig() {\n    }\n    return FirestoreConfig;\n}());\n/**\n * The root reference to the database.\n */\nvar Firestore = /** @class */ (function () {\n    function Firestore(databaseIdOrApp) {\n        var _this = this;\n        // Public for use in tests.\n        // TODO(mikelehen): Use modularized initialization instead.\n        this._queue = new AsyncQueue();\n        this.INTERNAL = {\n            delete: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    if (this._firestoreClient) {\n                        return [2 /*return*/, this._firestoreClient.shutdown()];\n                    }\n                    return [2 /*return*/];\n                });\n            }); }\n        };\n        var config = new FirestoreConfig();\n        if (typeof databaseIdOrApp.options === 'object') {\n            // This is very likely a Firebase app object\n            // TODO(b/34177605): Can we somehow use instanceof?\n            var app = databaseIdOrApp;\n            config.firebaseApp = app;\n            config.databaseId = Firestore.databaseIdFromApp(app);\n            config.persistenceKey = config.firebaseApp.name;\n            config.credentials = new FirebaseCredentialsProvider(app);\n        }\n        else {\n            var external_1 = databaseIdOrApp;\n            if (!external_1.projectId) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');\n            }\n            config.databaseId = new DatabaseId(external_1.projectId, external_1.database);\n            // Use a default persistenceKey that lines up with FirebaseApp.\n            config.persistenceKey = '[DEFAULT]';\n            config.credentials = new EmptyCredentialsProvider();\n        }\n        config.settings = new FirestoreSettings({});\n        this._config = config;\n        this._databaseId = config.databaseId;\n    }\n    Firestore.prototype.settings = function (settingsLiteral) {\n        validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n        validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n        if (objUtils.contains(settingsLiteral, 'persistence')) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"persistence\" is now specified with a separate call to ' +\n                'firestore.enablePersistence().');\n        }\n        var newSettings = new FirestoreSettings(settingsLiteral);\n        if (this._firestoreClient && !this._config.settings.isEqual(newSettings)) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\n                'be changed. You can only call settings() before calling any other ' +\n                'methods on a Firestore object.');\n        }\n        this._config.settings = newSettings;\n        if (newSettings.credentials !== undefined) {\n            this._config.credentials = makeCredentialsProvider(newSettings.credentials);\n        }\n    };\n    Firestore.prototype.enableNetwork = function () {\n        this.ensureClientConfigured();\n        return this._firestoreClient.enableNetwork();\n    };\n    Firestore.prototype.disableNetwork = function () {\n        this.ensureClientConfigured();\n        return this._firestoreClient.disableNetwork();\n    };\n    Firestore.prototype.enablePersistence = function () {\n        if (this._firestoreClient) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +\n                'be enabled. You can only call enablePersistence() before calling ' +\n                'any other methods on a Firestore object.');\n        }\n        return this.configureClient(/* persistence= */ true);\n    };\n    Firestore.prototype.ensureClientConfigured = function () {\n        if (!this._firestoreClient) {\n            this.configureClient(/* persistence= */ false);\n        }\n        return this._firestoreClient;\n    };\n    Firestore.prototype.configureClient = function (persistence) {\n        var _this = this;\n        assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');\n        assert(!this._firestoreClient, 'configureClient() called multiple times');\n        var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);\n        var preConverter = function (value) {\n            if (value instanceof DocumentReference) {\n                var thisDb = _this._config.databaseId;\n                var otherDb = value.firestore._config.databaseId;\n                if (!otherDb.isEqual(thisDb)) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' +\n                        (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\n                        (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n                }\n                return new DocumentKeyReference(_this._config.databaseId, value._key);\n            }\n            else {\n                return value;\n            }\n        };\n        this._dataConverter = new UserDataConverter(preConverter);\n        this._firestoreClient = new FirestoreClient(PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, this._queue);\n        return this._firestoreClient.start(persistence);\n    };\n    Firestore.databaseIdFromApp = function (app) {\n        var options = app.options;\n        if (!objUtils.contains(options, 'projectId')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreId' once alpha testers have upgraded.\n            if (objUtils.contains(options, 'firestoreId')) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreId\" is now specified as \"projectId\" in ' +\n                    'firebase.initializeApp.');\n            }\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        }\n        if (objUtils.contains(options, 'firestoreOptions')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreOptions' once alpha testers have upgraded.\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreOptions\" values are now specified with ' +\n                'Firestore.settings()');\n        }\n        var projectId = options['projectId'];\n        if (!projectId || typeof projectId !== 'string') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');\n        }\n        return new DatabaseId(projectId);\n    };\n    Object.defineProperty(Firestore.prototype, \"app\", {\n        get: function () {\n            if (!this._config.firebaseApp) {\n                throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n                    'not available');\n            }\n            return this._config.firebaseApp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n        validateArgType('Firestore.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');\n        }\n        this.ensureClientConfigured();\n        return new CollectionReference(ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.doc = function (pathString) {\n        validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n        validateArgType('Firestore.doc', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');\n        }\n        this.ensureClientConfigured();\n        return DocumentReference.forPath(ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.runTransaction = function (updateFunction) {\n        var _this = this;\n        validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n        validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n        return this.ensureClientConfigured().transaction(function (transaction) {\n            return updateFunction(new Transaction(_this, transaction));\n        });\n    };\n    Firestore.prototype.batch = function () {\n        this.ensureClientConfigured();\n        return new WriteBatch(this);\n    };\n    Object.defineProperty(Firestore, \"logLevel\", {\n        get: function () {\n            switch (log.getLogLevel()) {\n                case LogLevel.DEBUG:\n                    return 'debug';\n                case LogLevel.ERROR:\n                    return 'error';\n                case LogLevel.SILENT:\n                    return 'silent';\n                default:\n                    return fail('Unknown log level: ' + log.getLogLevel());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.setLogLevel = function (level) {\n        validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n        validateArgType('Firestore.setLogLevel', 'string', 1, level);\n        switch (level) {\n            case 'debug':\n                log.setLogLevel(log.LogLevel.DEBUG);\n                break;\n            case 'error':\n                log.setLogLevel(log.LogLevel.ERROR);\n                break;\n            case 'silent':\n                log.setLogLevel(log.LogLevel.SILENT);\n                break;\n            default:\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);\n        }\n    };\n    return Firestore;\n}());\nexport { Firestore };\n/**\n * A reference to a transaction.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(_firestore, _transaction) {\n        this._firestore = _firestore;\n        this._transaction = _transaction;\n    }\n    Transaction.prototype.get = function (documentRef) {\n        var _this = this;\n        validateExactNumberOfArgs('Transaction.get', arguments, 1);\n        var ref = validateReference('Transaction.get', documentRef, this._firestore);\n        return this._transaction\n            .lookup([ref._key])\n            .then(function (docs) {\n            if (!docs || docs.length !== 1) {\n                return fail('Mismatch in docs returned from document lookup.');\n            }\n            var doc = docs[0];\n            if (doc instanceof NoDocument) {\n                return new DocumentSnapshot(_this._firestore, ref._key, null, false);\n            }\n            return new DocumentSnapshot(_this._firestore, ref._key, doc, false);\n        });\n    };\n    Transaction.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n        var ref = validateReference('Transaction.set', documentRef, this._firestore);\n        options = validateSetOptions('Transaction.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('Transaction.set', value)\n            : this._firestore._dataConverter.parseSetData('Transaction.set', value);\n        this._transaction.set(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('Transaction.update', arguments, 2);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);\n        }\n        this._transaction.update(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n        var ref = validateReference('Transaction.delete', documentRef, this._firestore);\n        this._transaction.delete(ref._key);\n        return this;\n    };\n    return Transaction;\n}());\nexport { Transaction };\nvar WriteBatch = /** @class */ (function () {\n    function WriteBatch(_firestore) {\n        this._firestore = _firestore;\n        this._mutations = [];\n        this._committed = false;\n    }\n    WriteBatch.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);\n        options = validateSetOptions('WriteBatch.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value)\n            : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        this.verifyNotCommitted();\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);\n        }\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.exists(true)));\n        return this;\n    };\n    WriteBatch.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);\n        this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.commit = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                this.verifyNotCommitted();\n                this._committed = true;\n                if (this._mutations.length > 0) {\n                    return [2 /*return*/, this._firestore.ensureClientConfigured().write(this._mutations)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    WriteBatch.prototype.verifyNotCommitted = function () {\n        if (this._committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\n                'has been called.');\n        }\n    };\n    return WriteBatch;\n}());\nexport { WriteBatch };\n/**\n * A reference to a particular document in a collection in the database.\n */\nvar DocumentReference = /** @class */ (function () {\n    function DocumentReference(_key, firestore) {\n        this._key = _key;\n        this.firestore = firestore;\n        this._firestoreClient = this.firestore.ensureClientConfigured();\n    }\n    DocumentReference.forPath = function (path, firestore) {\n        if (path.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +\n                'references must have an even number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return new DocumentReference(new DocumentKey(path), firestore);\n    };\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\n        get: function () {\n            return new CollectionReference(this._key.path.popLast(), this.firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\n        get: function () {\n            return this._key.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentReference.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n        validateArgType('DocumentReference.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');\n        }\n        var path = ResourcePath.fromString(pathString);\n        return new CollectionReference(this._key.path.child(path), this.firestore);\n    };\n    DocumentReference.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentReference)) {\n            throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n        }\n        return this.firestore === other.firestore && this._key.isEqual(other._key);\n    };\n    DocumentReference.prototype.set = function (value, options) {\n        validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n        options = validateSetOptions('DocumentReference.set', options);\n        var parsed = options.merge\n            ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value)\n            : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);\n        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.NONE));\n    };\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 2] = arguments[_i];\n        }\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);\n        }\n        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.exists(true)));\n    };\n    DocumentReference.prototype.delete = function () {\n        validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n        return this._firestoreClient.write([\n            new DeleteMutation(this._key, Precondition.NONE)\n        ]);\n    };\n    DocumentReference.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);\n        var options = {\n            includeMetadataChanges: false\n        };\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('DocumentReference.onSnapshot', options, [\n                'includeMetadataChanges'\n            ]);\n            validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);\n            currArg++;\n        }\n        var internalOptions = {\n            includeDocumentMetadataChanges: options.includeMetadataChanges,\n            includeQueryMetadataChanges: options.includeMetadataChanges\n        };\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(internalOptions, observer);\n    };\n    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (snapshot) {\n                if (observer.next) {\n                    assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');\n                    var doc = snapshot.docs.get(_this._key);\n                    observer.next(new DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache));\n                }\n            },\n            error: errHandler\n        });\n        var internalListener = this._firestoreClient.listen(InternalQuery.atPath(this._key.path), asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            _this._firestoreClient.unlisten(internalListener);\n        };\n    };\n    DocumentReference.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('DocumentReference.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeQueryMetadataChanges: true,\n                includeDocumentMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (snap) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    if (!snap.exists && snap.metadata.fromCache) {\n                        // TODO(dimond): If we're online and the document doesn't\n                        // exist then we resolve with a doc.exists set to false. If\n                        // we're offline however, we reject the Promise in this\n                        // case. Two options: 1) Cache the negative response from\n                        // the server so we can deliver that even when you're\n                        // offline 2) Actually reject the Promise in the online case\n                        // if the document doesn't exist.\n                        reject(new FirestoreError(Code.ABORTED, 'Failed to get document because the client is ' + 'offline.'));\n                    }\n                    else {\n                        resolve(snap);\n                    }\n                },\n                error: reject\n            });\n        });\n    };\n    return DocumentReference;\n}());\nexport { DocumentReference };\nvar SnapshotMetadata = /** @class */ (function () {\n    function SnapshotMetadata(hasPendingWrites, fromCache) {\n        this.hasPendingWrites = hasPendingWrites;\n        this.fromCache = fromCache;\n    }\n    SnapshotMetadata.prototype.isEqual = function (other) {\n        return (this.hasPendingWrites === other.hasPendingWrites &&\n            this.fromCache === other.fromCache);\n    };\n    return SnapshotMetadata;\n}());\nvar DocumentSnapshot = /** @class */ (function () {\n    function DocumentSnapshot(_firestore, _key, _document, _fromCache) {\n        this._firestore = _firestore;\n        this._key = _key;\n        this._document = _document;\n        this._fromCache = _fromCache;\n    }\n    DocumentSnapshot.prototype.data = function (options) {\n        validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);\n        options = validateSnapshotOptions('DocumentSnapshot.data', options);\n        return !this._document\n            ? undefined\n            : this.convertObject(this._document.data, FieldValueOptions.fromSnapshotOptions(options));\n    };\n    DocumentSnapshot.prototype.get = function (fieldPath, options) {\n        validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);\n        options = validateSnapshotOptions('DocumentSnapshot.get', options);\n        if (this._document) {\n            var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n            if (value !== undefined) {\n                return this.convertValue(value, FieldValueOptions.fromSnapshotOptions(options));\n            }\n        }\n        return undefined;\n    };\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n        get: function () {\n            return new DocumentReference(this._key, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n        get: function () {\n            return this._document !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n        get: function () {\n            return new SnapshotMetadata(this._document !== null && this._document.hasLocalMutations, this._fromCache);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentSnapshot.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentSnapshot)) {\n            throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);\n        }\n        return (this._firestore === other._firestore &&\n            this._fromCache === other._fromCache &&\n            this._key.isEqual(other._key) &&\n            (this._document === null\n                ? other._document === null\n                : this._document.isEqual(other._document)));\n    };\n    DocumentSnapshot.prototype.convertObject = function (data, options) {\n        var _this = this;\n        var result = {};\n        data.forEach(function (key, value) {\n            result[key] = _this.convertValue(value, options);\n        });\n        return result;\n    };\n    DocumentSnapshot.prototype.convertValue = function (value, options) {\n        if (value instanceof ObjectValue) {\n            return this.convertObject(value, options);\n        }\n        else if (value instanceof ArrayValue) {\n            return this.convertArray(value, options);\n        }\n        else if (value instanceof RefValue) {\n            var key = value.value(options);\n            var database = this._firestore.ensureClientConfigured().databaseId();\n            if (!value.databaseId.isEqual(database)) {\n                // TODO(b/64130202): Somehow support foreign references.\n                log.error(\"Document \" + this._key.path + \" contains a document \" +\n                    \"reference within a different database (\" +\n                    (value.databaseId.projectId + \"/\" + value.databaseId.database + \") which is not \") +\n                    \"supported. It will be treated as a reference in the current \" +\n                    (\"database (\" + database.projectId + \"/\" + database.database + \") \") +\n                    \"instead.\");\n            }\n            return new DocumentReference(key, this._firestore);\n        }\n        else {\n            return value.value(options);\n        }\n    };\n    DocumentSnapshot.prototype.convertArray = function (data, options) {\n        var _this = this;\n        return data.internalValue.map(function (value) {\n            return _this.convertValue(value, options);\n        });\n    };\n    return DocumentSnapshot;\n}());\nexport { DocumentSnapshot };\nvar QueryDocumentSnapshot = /** @class */ (function (_super) {\n    tslib_1.__extends(QueryDocumentSnapshot, _super);\n    function QueryDocumentSnapshot(firestore, key, document, fromCache) {\n        return _super.call(this, firestore, key, document, fromCache) || this;\n    }\n    QueryDocumentSnapshot.prototype.data = function (options) {\n        var data = _super.prototype.data.call(this, options);\n        assert(typeof data === 'object', 'Document in a QueryDocumentSnapshot should exist');\n        return data;\n    };\n    return QueryDocumentSnapshot;\n}(DocumentSnapshot));\nexport { QueryDocumentSnapshot };\nvar Query = /** @class */ (function () {\n    function Query(_query, firestore) {\n        this._query = _query;\n        this.firestore = firestore;\n    }\n    Query.prototype.where = function (field, opStr, value) {\n        validateExactNumberOfArgs('Query.where', arguments, 3);\n        validateArgType('Query.where', 'string', 2, opStr);\n        validateDefined('Query.where', 3, value);\n        var fieldValue;\n        var fieldPath = fieldPathFromArgument('Query.where', field);\n        if (fieldPath.isKeyField()) {\n            if (typeof value === 'string') {\n                if (value.indexOf('/') !== -1) {\n                    // TODO(dimond): Allow slashes once ancestor queries are supported\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it contains a slash.');\n                }\n                if (value === '') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it was an empty string.');\n                }\n                var path = this._query.path.child(new ResourcePath([value]));\n                assert(path.length % 2 === 0, 'Path should be a document key');\n                fieldValue = new RefValue(this.firestore._databaseId, new DocumentKey(path));\n            }\n            else if (value instanceof DocumentReference) {\n                var ref = value;\n                fieldValue = new RefValue(this.firestore._databaseId, ref._key);\n            }\n            else {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.where() requires its third parameter to be a \" +\n                    \"string or a DocumentReference if the first parameter is \" +\n                    \"FieldPath.documentId(), but it was: \" +\n                    (valueDescription(value) + \".\"));\n            }\n        }\n        else {\n            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);\n        }\n        var filter = fieldFilter(fieldPath, RelationOp.fromString(opStr), fieldValue);\n        this.validateNewFilter(filter);\n        return new Query(this._query.addFilter(filter), this.firestore);\n    };\n    Query.prototype.orderBy = function (field, directionStr) {\n        validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n        validateOptionalArgType('Query.orderBy', 'string', 2, directionStr);\n        var direction;\n        if (directionStr === undefined || directionStr === 'asc') {\n            direction = Direction.ASCENDING;\n        }\n        else if (directionStr === 'desc') {\n            direction = Direction.DESCENDING;\n        }\n        else {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.orderBy() has unknown direction '\" + directionStr + \"', \" +\n                \"expected 'asc' or 'desc'.\");\n        }\n        if (this._query.startAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +\n                'Query.startAfter() before calling Query.orderBy().');\n        }\n        if (this._query.endAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +\n                'Query.endBefore() before calling Query.orderBy().');\n        }\n        var fieldPath = fieldPathFromArgument('Query.orderBy', field);\n        var orderBy = new OrderBy(fieldPath, direction);\n        this.validateNewOrderBy(orderBy);\n        return new Query(this._query.addOrderBy(orderBy), this.firestore);\n    };\n    Query.prototype.limit = function (n) {\n        validateExactNumberOfArgs('Query.limit', arguments, 1);\n        validateArgType('Query.limit', 'number', 1, n);\n        if (n <= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. Query limit (\" + n + \") is invalid. Limit must be \" +\n                'positive.');\n        }\n        return new Query(this._query.withLimit(n), this.firestore);\n    };\n    Query.prototype.startAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.startAfter = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.endBefore = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.endAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.isEqual = function (other) {\n        if (!(other instanceof Query)) {\n            throw invalidClassError('isEqual', 'Query', 1, other);\n        }\n        return (this.firestore === other.firestore && this._query.isEqual(other._query));\n    };\n    /** Helper function to create a bound from a document or fields */\n    Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {\n        validateDefined(methodName, 1, docOrField);\n        if (docOrField instanceof DocumentSnapshot) {\n            if (fields.length > 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"().\");\n            }\n            var snap = docOrField;\n            if (!snap.exists) {\n                throw new FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\n                    (methodName + \"().\"));\n            }\n            return this.boundFromDocument(methodName, snap._document, before);\n        }\n        else {\n            var allFields = [docOrField].concat(fields);\n            return this.boundFromFields(methodName, allFields, before);\n        }\n    };\n    /**\n     * Create a Bound from a query and a document.\n     *\n     * Note that the Bound will always include the key of the document\n     * and so only the provided document will compare equal to the returned\n     * position.\n     *\n     * Will throw if the document does not contain all fields of the order by\n     * of the query.\n     */\n    Query.prototype.boundFromDocument = function (methodName, doc, before) {\n        var components = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            if (orderBy.field.isKeyField()) {\n                components.push(new RefValue(this.firestore._databaseId, doc.key));\n            }\n            else {\n                var value = doc.field(orderBy.field);\n                if (value !== undefined) {\n                    components.push(value);\n                }\n                else {\n                    var field = orderBy.field.canonicalString();\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\n                        (\"document for which the field '\" + field + \"' (used as the \") +\n                        \"orderBy) does not exist.\");\n                }\n            }\n        }\n        return new Bound(components, before);\n    };\n    /**\n     * Converts a list of field values to a Bound for the given query.\n     */\n    Query.prototype.boundFromFields = function (methodName, values, before) {\n        // Use explicit order by's because it has to match the query the user made\n        var orderBy = this._query.explicitOrderBy;\n        if (values.length > orderBy.length) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\n                \"The number of arguments must be less than or equal to the \" +\n                \"number of Query.orderBy() clauses\");\n        }\n        var components = [];\n        for (var i = 0; i < values.length; i++) {\n            var rawValue = values[i];\n            var orderByComponent = orderBy[i];\n            if (orderByComponent.field.isKeyField()) {\n                if (typeof rawValue !== 'string') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\n                        (methodName + \"(), but got a \" + typeof rawValue));\n                }\n                if (rawValue.indexOf('/') !== -1) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Document ID '\" + rawValue + \"' contains a slash in \" +\n                        (methodName + \"()\"));\n                }\n                var key = new DocumentKey(this._query.path.child(rawValue));\n                components.push(new RefValue(this.firestore._databaseId, key));\n            }\n            else {\n                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);\n                components.push(wrapped);\n            }\n        }\n        return new Bound(components, before);\n    };\n    Query.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n        var options = {};\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('Query.onSnapshot', options, [\n                'includeQueryMetadataChanges',\n                'includeDocumentMetadataChanges'\n            ]);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeDocumentMetadataChanges', options.includeDocumentMetadataChanges);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeQueryMetadataChanges', options.includeQueryMetadataChanges);\n            currArg++;\n        }\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(options, observer);\n    };\n    Query.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (result) {\n                if (observer.next) {\n                    observer.next(new QuerySnapshot(_this.firestore, _this._query, result));\n                }\n            },\n            error: errHandler\n        });\n        var firestoreClient = this.firestore.ensureClientConfigured();\n        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            firestoreClient.unlisten(internalListener);\n        };\n    };\n    Query.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('Query.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeDocumentMetadataChanges: false,\n                includeQueryMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (result) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    resolve(result);\n                },\n                error: reject\n            });\n        });\n    };\n    Query.prototype.validateNewFilter = function (filter) {\n        if (filter instanceof RelationFilter && filter.isInequality()) {\n            var existingField = this._query.getInequalityFilterField();\n            if (existingField !== null && !existingField.isEqual(filter.field)) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\n                    ' (<, <=, >, or >=) must be on the same field. But you have' +\n                    (\" inequality filters on '\" + existingField.toString() + \"'\") +\n                    (\" and '\" + filter.field.toString() + \"'\"));\n            }\n            var firstOrderByField = this._query.getFirstOrderByField();\n            if (firstOrderByField !== null) {\n                this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);\n            }\n        }\n    };\n    Query.prototype.validateNewOrderBy = function (orderBy) {\n        if (this._query.getFirstOrderByField() === null) {\n            // This is the first order by. It must match any inequality.\n            var inequalityField = this._query.getInequalityFilterField();\n            if (inequalityField !== null) {\n                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n            }\n        }\n    };\n    Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {\n        if (!orderBy.isEqual(inequality)) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\n                (\"(<, <=, >, or >=) on field '\" + inequality.toString() + \"' \") +\n                (\"and so you must also use '\" + inequality.toString() + \"' \") +\n                \"as your first Query.orderBy(), but your first Query.orderBy() \" +\n                (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n        }\n    };\n    return Query;\n}());\nexport { Query };\nvar QuerySnapshot = /** @class */ (function () {\n    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {\n        this._firestore = _firestore;\n        this._originalQuery = _originalQuery;\n        this._snapshot = _snapshot;\n        this._cachedChanges = null;\n        this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);\n    }\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n        get: function () {\n            var result = [];\n            this.forEach(function (doc) { return result.push(doc); });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n        get: function () {\n            return this._snapshot.docs.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n        get: function () {\n            return this._snapshot.docs.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n        validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n        this._snapshot.docs.forEach(function (doc) {\n            callback.call(thisArg, _this.convertToDocumentImpl(doc));\n        });\n    };\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n        get: function () {\n            return new Query(this._originalQuery, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"docChanges\", {\n        get: function () {\n            if (!this._cachedChanges) {\n                this._cachedChanges = changesFromSnapshot(this._firestore, this._snapshot);\n            }\n            return this._cachedChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Check the equality. The call can be very expensive. */\n    QuerySnapshot.prototype.isEqual = function (other) {\n        if (!(other instanceof QuerySnapshot)) {\n            throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);\n        }\n        return (this._firestore === other._firestore &&\n            this._originalQuery.isEqual(other._originalQuery) &&\n            this._snapshot.isEqual(other._snapshot));\n    };\n    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {\n        return new QueryDocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache);\n    };\n    return QuerySnapshot;\n}());\nexport { QuerySnapshot };\nvar CollectionReference = /** @class */ (function (_super) {\n    tslib_1.__extends(CollectionReference, _super);\n    function CollectionReference(path, firestore) {\n        var _this = _super.call(this, InternalQuery.atPath(path), firestore) || this;\n        if (path.length % 2 !== 1) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +\n                'references must have an odd number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return _this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\n        get: function () {\n            return this._query.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\n        get: function () {\n            var parentPath = this._query.path.popLast();\n            if (parentPath.isEmpty()) {\n                return null;\n            }\n            else {\n                return new DocumentReference(new DocumentKey(parentPath), this.firestore);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\n        get: function () {\n            return this._query.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (pathString) {\n        validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n        // We allow omission of 'pathString' but explicitly prohibit passing in both\n        // 'undefined' and 'null'.\n        if (arguments.length === 0) {\n            pathString = AutoId.newId();\n        }\n        validateArgType('CollectionReference.doc', 'string', 1, pathString);\n        if (pathString === '') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');\n        }\n        var path = ResourcePath.fromString(pathString);\n        return DocumentReference.forPath(this._query.path.child(path), this.firestore);\n    };\n    CollectionReference.prototype.add = function (value) {\n        validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n        validateArgType('CollectionReference.add', 'object', 1, value);\n        var docRef = this.doc();\n        return docRef.set(value).then(function () { return docRef; });\n    };\n    return CollectionReference;\n}(Query));\nexport { CollectionReference };\nfunction validateSetOptions(methodName, options) {\n    if (options === undefined) {\n        return {\n            merge: false\n        };\n    }\n    validateOptionNames(methodName, options, ['merge']);\n    validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n    return options;\n}\nfunction validateSnapshotOptions(methodName, options) {\n    if (options === undefined) {\n        return {};\n    }\n    validateOptionNames(methodName, options, ['serverTimestamps']);\n    validateNamedOptionalPropertyEquals(methodName, 'options', 'serverTimestamps', options.serverTimestamps, ['estimate', 'previous', 'none']);\n    return options;\n}\nfunction validateReference(methodName, documentRef, firestore) {\n    if (!(documentRef instanceof DocumentReference)) {\n        throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n    }\n    else if (documentRef.firestore !== firestore) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n    }\n    else {\n        return documentRef;\n    }\n}\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nexport function changesFromSnapshot(firestore, snapshot) {\n    if (snapshot.oldDocs.isEmpty()) {\n        // Special case the first snapshot because index calculation is easy and\n        // fast\n        var lastDoc_1;\n        var index_1 = 0;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');\n            assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');\n            lastDoc_1 = change.doc;\n            return {\n                type: 'added',\n                doc: doc,\n                oldIndex: -1,\n                newIndex: index_1++\n            };\n        });\n    }\n    else {\n        // A DocumentSet that is updated incrementally as changes are applied to use\n        // to lookup the index of a document.\n        var indexTracker_1 = snapshot.oldDocs;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            var oldIndex = -1;\n            var newIndex = -1;\n            if (change.type !== ChangeType.Added) {\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\n                assert(oldIndex >= 0, 'Index for document not found');\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\n            }\n            if (change.type !== ChangeType.Removed) {\n                indexTracker_1 = indexTracker_1.add(change.doc);\n                newIndex = indexTracker_1.indexOf(change.doc.key);\n            }\n            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };\n        });\n    }\n}\nfunction resultChangeType(type) {\n    switch (type) {\n        case ChangeType.Added:\n            return 'added';\n        case ChangeType.Modified:\n        case ChangeType.Metadata:\n            return 'modified';\n        case ChangeType.Removed:\n            return 'removed';\n        default:\n            return fail('Unknown change type: ' + type);\n    }\n}\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\n// tslint:disable:variable-name\nexport var PublicFirestore = makeConstructorPrivate(Firestore, 'Use firebase.firestore() instead.');\nexport var PublicTransaction = makeConstructorPrivate(Transaction, 'Use firebase.firestore().runTransaction() instead.');\nexport var PublicWriteBatch = makeConstructorPrivate(WriteBatch, 'Use firebase.firestore().batch() instead.');\nexport var PublicDocumentReference = makeConstructorPrivate(DocumentReference, 'Use firebase.firestore().doc() instead.');\nexport var PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);\nexport var PublicQueryDocumentSnapshot = makeConstructorPrivate(QueryDocumentSnapshot);\nexport var PublicQuery = makeConstructorPrivate(Query);\nexport var PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);\nexport var PublicCollectionReference = makeConstructorPrivate(CollectionReference, 'Use firebase.firestore().collection() instead.');\n// tslint:enable:variable-name\n\n//# sourceMappingURL=database.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/database.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PublicBlob } from '../api/blob';\nimport { Firestore, PublicCollectionReference, PublicDocumentReference, PublicDocumentSnapshot, PublicFirestore, PublicQuery, PublicQueryDocumentSnapshot, PublicQuerySnapshot, PublicTransaction, PublicWriteBatch } from '../api/database';\nimport { FieldPath } from '../api/field_path';\nimport { PublicFieldValue } from '../api/field_value';\nimport { GeoPoint } from '../api/geo_point';\nimport { shallowCopy } from '../util/obj';\nvar firestoreNamespace = {\n    Firestore: PublicFirestore,\n    GeoPoint: GeoPoint,\n    Blob: PublicBlob,\n    Transaction: PublicTransaction,\n    WriteBatch: PublicWriteBatch,\n    DocumentReference: PublicDocumentReference,\n    DocumentSnapshot: PublicDocumentSnapshot,\n    Query: PublicQuery,\n    QueryDocumentSnapshot: PublicQueryDocumentSnapshot,\n    QuerySnapshot: PublicQuerySnapshot,\n    CollectionReference: PublicCollectionReference,\n    FieldPath: FieldPath,\n    FieldValue: PublicFieldValue,\n    setLogLevel: Firestore.setLogLevel\n};\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n */\nexport function configureForFirebase(firebase) {\n    firebase.INTERNAL.registerService('firestore', function (app) { return new Firestore(app); }, shallowCopy(firestoreNamespace));\n}\n/**\n * Exports the Firestore namespace into the provided `exportObject` object under\n * the key 'firestore'. This is used for wrapped binary that exposes Firestore\n * as a goog module.\n */\nexport function configureForStandalone(exportObject) {\n    var copiedNamespace = shallowCopy(firestoreNamespace);\n    // Unlike the use with Firebase, the standalone allows the use of the\n    // constructor, so export it's internal class\n    copiedNamespace['Firestore'] = Firestore;\n    exportObject['firestore'] = copiedNamespace;\n}\n\n//# sourceMappingURL=config.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform/config.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport './src/platform_browser/browser_init';\nimport { configureForFirebase } from './src/platform/config';\nexport function registerFirestore(instance) {\n    configureForFirebase(instance);\n}\nregisterFirestore(firebase);\n\n//# sourceMappingURL=index.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/index.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\n/** The semver (www.semver.org) version of the SDK. */\nexport var SDK_VERSION = firebase.SDK_VERSION;\n\n//# sourceMappingURL=version.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/version.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\n// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.\n//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum\nexport var Code = {\n    // Causes are copied from:\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n    /** Not an error; returned on success. */\n    OK: 'ok',\n    /** The operation was cancelled (typically by the caller). */\n    CANCELLED: 'cancelled',\n    /** Unknown error or an error from a different error domain. */\n    UNKNOWN: 'unknown',\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    INVALID_ARGUMENT: 'invalid-argument',\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    /** Some requested entity (e.g., file or directory) was not found. */\n    NOT_FOUND: 'not-found',\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    ALREADY_EXISTS: 'already-exists',\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    PERMISSION_DENIED: 'permission-denied',\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    UNAUTHENTICATED: 'unauthenticated',\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operation's execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    FAILED_PRECONDITION: 'failed-precondition',\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    ABORTED: 'aborted',\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    OUT_OF_RANGE: 'out-of-range',\n    /** Operation is not implemented or not supported/enabled in this service. */\n    UNIMPLEMENTED: 'unimplemented',\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    INTERNAL: 'internal',\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    UNAVAILABLE: 'unavailable',\n    /** Unrecoverable data loss or corruption. */\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nvar FirestoreError = /** @class */ (function (_super) {\n    tslib_1.__extends(FirestoreError, _super);\n    function FirestoreError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.name = 'FirebaseError';\n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\n        return _this;\n    }\n    return FirestoreError;\n}(Error));\nexport { FirestoreError };\n\n//# sourceMappingURL=error.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/error.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        validateExactNumberOfArgs('GeoPoint', arguments, 2);\n        validateArgType('GeoPoint', 'number', 1, latitude);\n        validateArgType('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GeoPoint.prototype.isEqual = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (primitiveComparator(this._lat, other._lat) ||\n            primitiveComparator(this._long, other._long));\n    };\n    return GeoPoint;\n}());\nexport { GeoPoint };\n\n//# sourceMappingURL=geo_point.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/geo_point.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { primitiveComparator } from '../util/misc';\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\nexport { DatabaseInfo };\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.isEqual = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (primitiveComparator(this.projectId, other.projectId) ||\n            primitiveComparator(this.database, other.database));\n    };\n    return DatabaseId;\n}());\nexport { DatabaseId };\n\n//# sourceMappingURL=database_info.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/database_info.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nexport var DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar Path = /** @class */ (function () {\n    function Path(segments, offset, length) {\n        this.init(segments, offset, length);\n    }\n    /**\n     * An initialization method that can be called from outside the constructor.\n     * We need this so that we can have a non-static construct method that returns\n     * the polymorphic `this` type.\n     */\n    Path.prototype.init = function (segments, offset, length) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n        else if (offset > segments.length) {\n            fail('offset ' + offset + ' out of range ' + segments.length);\n        }\n        if (length === undefined) {\n            length = segments.length - offset;\n        }\n        else if (length > segments.length - offset) {\n            fail('length ' + length + ' out of range ' + (segments.length - offset));\n        }\n        this.segments = segments;\n        this.offset = offset;\n        this.len = length;\n    };\n    /**\n     * Constructs a new instance of Path using the same concrete type as `this`.\n     * We need this instead of using the normal constructor, because polymorphic\n     * `this` doesn't work on static methods.\n     */\n    Path.prototype.construct = function (segments, offset, length) {\n        var path = Object.create(Object.getPrototypeOf(this));\n        path.init(segments, offset, length);\n        return path;\n    };\n    Object.defineProperty(Path.prototype, \"length\", {\n        get: function () {\n            return this.len;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.isEqual = function (other) {\n        return Path.comparator(this, other) === 0;\n    };\n    Path.prototype.child = function (nameOrPath) {\n        var segments = this.segments.slice(this.offset, this.limit());\n        if (nameOrPath instanceof Path) {\n            nameOrPath.forEach(function (segment) {\n                segments.push(segment);\n            });\n        }\n        else if (typeof nameOrPath === 'string') {\n            segments.push(nameOrPath);\n        }\n        else {\n            fail('Unknown parameter type for Path.child(): ' + nameOrPath);\n        }\n        return this.construct(segments);\n    };\n    /** The index of one past the last segment of the path. */\n    Path.prototype.limit = function () {\n        return this.offset + this.length;\n    };\n    Path.prototype.popFirst = function (size) {\n        size = size === undefined ? 1 : size;\n        assert(this.length >= size, \"Can't call popFirst() with less segments\");\n        return this.construct(this.segments, this.offset + size, this.length - size);\n    };\n    Path.prototype.popLast = function () {\n        assert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n        return this.construct(this.segments, this.offset, this.length - 1);\n    };\n    Path.prototype.firstSegment = function () {\n        assert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n        return this.segments[this.offset];\n    };\n    Path.prototype.lastSegment = function () {\n        assert(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n        return this.segments[this.limit() - 1];\n    };\n    Path.prototype.get = function (index) {\n        assert(index < this.length, 'Index out of range');\n        return this.segments[this.offset + index];\n    };\n    Path.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    Path.prototype.isPrefixOf = function (other) {\n        if (other.length < this.length) {\n            return false;\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this.get(i) !== other.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Path.prototype.forEach = function (fn) {\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\n            fn(this.segments[i]);\n        }\n    };\n    Path.prototype.toArray = function () {\n        return this.segments.slice(this.offset, this.limit());\n    };\n    Path.comparator = function (p1, p2) {\n        var len = Math.min(p1.length, p2.length);\n        for (var i = 0; i < len; i++) {\n            var left = p1.get(i);\n            var right = p2.get(i);\n            if (left < right)\n                return -1;\n            if (left > right)\n                return 1;\n        }\n        if (p1.length < p2.length)\n            return -1;\n        if (p1.length > p2.length)\n            return 1;\n        return 0;\n    };\n    return Path;\n}());\nexport { Path };\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nvar ResourcePath = /** @class */ (function (_super) {\n    tslib_1.__extends(ResourcePath, _super);\n    function ResourcePath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourcePath.prototype.canonicalString = function () {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join('/');\n    };\n    ResourcePath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Creates a resource path from the given slash-delimited string.\n     */\n    ResourcePath.fromString = function (path) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        if (path.indexOf('//') >= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid path (\" + path + \"). Paths must not contain // in them.\");\n        }\n        // We may still have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });\n        return new ResourcePath(segments);\n    };\n    ResourcePath.EMPTY_PATH = new ResourcePath([]);\n    return ResourcePath;\n}(Path));\nexport { ResourcePath };\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\nvar FieldPath = /** @class */ (function (_super) {\n    tslib_1.__extends(FieldPath, _super);\n    function FieldPath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n    FieldPath.isValidIdentifier = function (segment) {\n        return identifierRegExp.test(segment);\n    };\n    FieldPath.prototype.canonicalString = function () {\n        return this.toArray()\n            .map(function (str) {\n            str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n            if (!FieldPath.isValidIdentifier(str)) {\n                str = '`' + str + '`';\n            }\n            return str;\n        })\n            .join('.');\n    };\n    FieldPath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Returns true if this field references the key of a document.\n     */\n    FieldPath.prototype.isKeyField = function () {\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n    };\n    /**\n     * The field designating the key of a document.\n     */\n    FieldPath.keyField = function () {\n        return new FieldPath([DOCUMENT_KEY_NAME]);\n    };\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n    FieldPath.fromServerFormat = function (path) {\n        var segments = [];\n        var current = '';\n        var i = 0;\n        var addCurrentSegment = function () {\n            if (current.length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\n                    \"with '.', end with '.', or contain '..'\");\n            }\n            segments.push(current);\n            current = '';\n        };\n        var inBackticks = false;\n        while (i < path.length) {\n            var c = path[i];\n            if (c === '\\\\') {\n                if (i + 1 === path.length) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n                }\n                var next = path[i + 1];\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n                }\n                current += next;\n                i += 2;\n            }\n            else if (c === '`') {\n                inBackticks = !inBackticks;\n                i++;\n            }\n            else if (c === '.' && !inBackticks) {\n                addCurrentSegment();\n                i++;\n            }\n            else {\n                current += c;\n                i++;\n            }\n        }\n        addCurrentSegment();\n        if (inBackticks) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n        }\n        return new FieldPath(segments);\n    };\n    FieldPath.EMPTY_PATH = new FieldPath([]);\n    return FieldPath;\n}(Path));\nexport { FieldPath };\n\n//# sourceMappingURL=path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { ResourcePath } from './path';\nvar DocumentKey = /** @class */ (function () {\n    function DocumentKey(path) {\n        this.path = path;\n        assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +\n            path.toArray().join('/'));\n    }\n    DocumentKey.prototype.isEqual = function (other) {\n        return (other !== null && ResourcePath.comparator(this.path, other.path) === 0);\n    };\n    DocumentKey.prototype.toString = function () {\n        return this.path.toString();\n    };\n    DocumentKey.comparator = function (k1, k2) {\n        return ResourcePath.comparator(k1.path, k2.path);\n    };\n    DocumentKey.isDocumentKey = function (path) {\n        return path.length % 2 === 0;\n    };\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param path The segments of the path to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromSegments = function (segments) {\n        return new DocumentKey(new ResourcePath(segments.slice()));\n    };\n    /**\n     * Creates and returns a new document key using '/' to split the string into\n     * segments.\n     *\n     * @param path The slash-separated path string to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromPathString = function (path) {\n        return new DocumentKey(ResourcePath.fromString(path));\n    };\n    DocumentKey.EMPTY = new DocumentKey(new ResourcePath([]));\n    return DocumentKey;\n}());\nexport { DocumentKey };\n\n//# sourceMappingURL=document_key.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document_key.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { DocumentKey } from './document_key';\nvar Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.isEqual = function (other) {\n        return (other instanceof Document &&\n            this.key.isEqual(other.key) &&\n            this.version.isEqual(other.version) &&\n            this.data.isEqual(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return fail(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\nexport { Document };\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.isEqual = function (other) {\n        return (other &&\n            other.version.isEqual(this.version) &&\n            other.key.isEqual(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\nexport { NoDocument };\n\n//# sourceMappingURL=document.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert, fail } from './assert';\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar SortedMap = /** @class */ (function () {\n    function SortedMap(comparator, root) {\n        this.comparator = comparator;\n        this.root = root ? root : LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator, this.root\n            .insert(key, value, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns a copy of the map, with the specified key removed.\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator, this.root\n            .remove(key, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns the value of the node with the given key, or null.\n    SortedMap.prototype.get = function (key) {\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    SortedMap.prototype.indexOf = function (key) {\n        // Number of nodes that were pruned when descending right\n        var prunedNodes = 0;\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return prunedNodes + node.left.size;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else {\n                // Count all nodes left of the node plus the node itself\n                prunedNodes += node.left.size + 1;\n                node = node.right;\n            }\n        }\n        // Node not found\n        return -1;\n    };\n    SortedMap.prototype.isEmpty = function () {\n        return this.root.isEmpty();\n    };\n    Object.defineProperty(SortedMap.prototype, \"size\", {\n        // Returns the total number of nodes in the map.\n        get: function () {\n            return this.root.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the minimum key in the map.\n    SortedMap.prototype.minKey = function () {\n        return this.root.minKey();\n    };\n    // Returns the maximum key in the map.\n    SortedMap.prototype.maxKey = function () {\n        return this.root.maxKey();\n    };\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root.inorderTraversal(action);\n    };\n    SortedMap.prototype.forEach = function (fn) {\n        this.inorderTraversal(function (k, v) {\n            fn(k, v);\n            return false;\n        });\n    };\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root.reverseTraversal(action);\n    };\n    // Returns an iterator over the SortedMap.\n    SortedMap.prototype.getIterator = function () {\n        return new SortedMapIterator(this.root, null, this.comparator, false);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key) {\n        return new SortedMapIterator(this.root, key, this.comparator, false);\n    };\n    SortedMap.prototype.getReverseIterator = function () {\n        return new SortedMapIterator(this.root, null, this.comparator, true);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key) {\n        return new SortedMapIterator(this.root, key, this.comparator, true);\n    };\n    return SortedMap;\n}()); // end SortedMap\nexport { SortedMap };\n// An iterator over an LLRBNode.\nvar SortedMapIterator = /** @class */ (function () {\n    function SortedMapIterator(node, startKey, comparator, isReverse) {\n        this.isReverse = isReverse;\n        this.nodeStack = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move\n                // to the next one\n                this.nodeStack.push(node);\n                if (this.isReverse) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');\n        var node = this.nodeStack.pop();\n        var result = { key: node.key, value: node.value };\n        if (this.isReverse) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack.length === 0)\n            return null;\n        var node = this.nodeStack[this.nodeStack.length - 1];\n        return { key: node.key, value: node.value };\n    };\n    return SortedMapIterator;\n}()); // end SortedMapIterator\nexport { SortedMapIterator };\n// Represents a node in a Left-leaning Red-Black tree.\nvar LLRBNode = /** @class */ (function () {\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : LLRBNode.EMPTY;\n        this.right = right != null ? right : LLRBNode.EMPTY;\n        this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    // Returns the minimum node in the tree.\n    LLRBNode.prototype.min = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min();\n        }\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.minKey = function () {\n        return this.min().key;\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    // Returns new tree, with the key/value added.\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var n = this;\n        var cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.removeMin = function () {\n        if (this.left.isEmpty()) {\n            return LLRBNode.EMPTY;\n        }\n        var n = this;\n        if (!n.left.isRed() && !n.left.left.isRed())\n            n = n.moveRedLeft();\n        n = n.copy(null, null, null, n.left.removeMin(), null);\n        return n.fixUp();\n    };\n    // Returns new tree, with the specified item removed.\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var smallest;\n        var n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n                n = n.moveRedLeft();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed())\n                n = n.rotateRight();\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n                n = n.moveRedRight();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return LLRBNode.EMPTY;\n                }\n                else {\n                    smallest = n.right.min();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.isRed = function () {\n        return this.color;\n    };\n    // Returns new tree after performing any needed rotations.\n    LLRBNode.prototype.fixUp = function () {\n        var n = this;\n        if (n.right.isRed() && !n.left.isRed())\n            n = n.rotateLeft();\n        if (n.left.isRed() && n.left.left.isRed())\n            n = n.rotateRight();\n        if (n.left.isRed() && n.right.isRed())\n            n = n.colorFlip();\n        return n;\n    };\n    LLRBNode.prototype.moveRedLeft = function () {\n        var n = this.colorFlip();\n        if (n.right.left.isRed()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight());\n            n = n.rotateLeft();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.moveRedRight = function () {\n        var n = this.colorFlip();\n        if (n.left.left.isRed()) {\n            n = n.rotateRight();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.rotateLeft = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    LLRBNode.prototype.rotateRight = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    LLRBNode.prototype.colorFlip = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    // For testing.\n    LLRBNode.prototype.checkMaxDepth = function () {\n        var blackDepth = this.check();\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    LLRBNode.prototype.check = function () {\n        if (this.isRed() && this.left.isRed()) {\n            throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed()) {\n            throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        var blackDepth = this.left.check();\n        if (blackDepth !== this.right.check()) {\n            throw fail('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed() ? 0 : 1);\n        }\n    };\n    // tslint:disable-next-line:no-any Empty node is shared between all LLRB trees.\n    LLRBNode.EMPTY = null;\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}()); // end LLRBNode\nexport { LLRBNode };\n// Represents an empty node (a leaf node in the Red-Black Tree).\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n        this.size = 0;\n    }\n    // Returns a copy of the current node.\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    // Returns a copy of the tree, with the specified key/value added.\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new LLRBNode(key, value);\n    };\n    // Returns a copy of the tree, with the specified key removed.\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.isRed = function () {\n        return false;\n    };\n    // For testing.\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.check = function () {\n        return 0;\n    };\n    return LLRBEmptyNode;\n}()); // end LLRBEmptyNode\nexport { LLRBEmptyNode };\nLLRBNode.EMPTY = new LLRBEmptyNode();\n\n//# sourceMappingURL=sorted_map.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/sorted_map.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { emptyByteString } from '../platform/platform';\n/** An enumeration of the different purposes we have for queries. */\nexport var QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar QueryData = /** @class */ (function () {\n    function QueryData(\n    /** The query being listened to. */\n    query, \n    /**\n     * The target ID to which the query corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    targetId, \n    /** The purpose of the query. */\n    purpose, \n    /** The latest snapshot version seen for this target. */\n    snapshotVersion, \n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the query. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = SnapshotVersion.MIN; }\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.isEqual = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.isEqual(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.isEqual(other.query));\n    };\n    return QueryData;\n}());\nexport { QueryData };\n\n//# sourceMappingURL=query_data.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/query_data.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nvar Timestamp = /** @class */ (function () {\n    function Timestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n        assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n        assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n        assert(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\n        // This will break in the year 10,000.\n        assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n    }\n    Timestamp.now = function () {\n        return Timestamp.fromEpochMilliseconds(Date.now());\n    };\n    Timestamp.fromDate = function (date) {\n        return Timestamp.fromEpochMilliseconds(date.getTime());\n    };\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.fromISOString = function (utc) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        var nanos = 0;\n        var fraction = isoRegExp.exec(utc);\n        assert(!!fraction, 'invalid timestamp: ' + utc);\n        if (fraction[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            var nanoStr = fraction[1];\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\n            nanos = Number(nanoStr);\n        }\n        // Parse the date to get the seconds.\n        var date = new Date(utc);\n        var seconds = Math.floor(date.getTime() / 1000);\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.prototype.toDate = function () {\n        return new Date(this.toEpochMilliseconds());\n    };\n    Timestamp.prototype.toEpochMilliseconds = function () {\n        return this.seconds * 1000 + this.nanos / 1e6;\n    };\n    Timestamp.prototype.compareTo = function (other) {\n        if (this.seconds === other.seconds) {\n            return primitiveComparator(this.nanos, other.nanos);\n        }\n        return primitiveComparator(this.seconds, other.seconds);\n    };\n    Timestamp.prototype.isEqual = function (other) {\n        return other.seconds === this.seconds && other.nanos === this.nanos;\n    };\n    Timestamp.prototype.toString = function () {\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n    };\n    return Timestamp;\n}());\nexport { Timestamp };\n\n//# sourceMappingURL=timestamp.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/timestamp.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from './timestamp';\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar SnapshotVersion = /** @class */ (function () {\n    function SnapshotVersion(timestamp) {\n        this.timestamp = timestamp;\n    }\n    // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n    // delete this constructor and use a timestamp-backed version everywhere.\n    SnapshotVersion.fromMicroseconds = function (value) {\n        var seconds = Math.floor(value / 1e6);\n        var nanos = (value % 1e6) * 1e3;\n        return new SnapshotVersion(new Timestamp(seconds, nanos));\n    };\n    SnapshotVersion.fromTimestamp = function (value) {\n        return new SnapshotVersion(value);\n    };\n    SnapshotVersion.forDeletedDoc = function () {\n        return SnapshotVersion.MIN;\n    };\n    SnapshotVersion.prototype.compareTo = function (other) {\n        return this.timestamp.compareTo(other.timestamp);\n    };\n    SnapshotVersion.prototype.isEqual = function (other) {\n        return this.timestamp.isEqual(other.timestamp);\n    };\n    /** Returns a number representation of the version for use in spec tests. */\n    SnapshotVersion.prototype.toMicroseconds = function () {\n        // Convert to microseconds.\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n    };\n    SnapshotVersion.prototype.toString = function () {\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n    };\n    SnapshotVersion.prototype.toTimestamp = function () {\n        return this.timestamp;\n    };\n    SnapshotVersion.MIN = new SnapshotVersion(new Timestamp(0, 0));\n    return SnapshotVersion;\n}());\nexport { SnapshotVersion };\n\n//# sourceMappingURL=snapshot_version.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/snapshot_version.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { assert, fail } from '../util/assert';\nimport * as misc from '../util/misc';\nimport { Document, NoDocument } from './document';\nimport { ObjectValue, ServerTimestampValue } from './field_value';\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar FieldMask = /** @class */ (function () {\n    function FieldMask(fields) {\n        this.fields = fields;\n        // TODO(dimond): validation of FieldMask\n    }\n    FieldMask.prototype.isEqual = function (other) {\n        return misc.arrayEquals(this.fields, other.fields);\n    };\n    return FieldMask;\n}());\nexport { FieldMask };\n/** Transforms a value into a server-generated timestamp. */\nvar ServerTimestampTransform = /** @class */ (function () {\n    function ServerTimestampTransform() {\n    }\n    ServerTimestampTransform.prototype.isEqual = function (other) {\n        return other instanceof ServerTimestampTransform;\n    };\n    ServerTimestampTransform.instance = new ServerTimestampTransform();\n    return ServerTimestampTransform;\n}());\nexport { ServerTimestampTransform };\n/** A field path and the TransformOperation to perform upon it. */\nvar FieldTransform = /** @class */ (function () {\n    function FieldTransform(field, transform) {\n        this.field = field;\n        this.transform = transform;\n    }\n    FieldTransform.prototype.isEqual = function (other) {\n        return (this.field.isEqual(other.field) && this.transform.isEqual(other.transform));\n    };\n    return FieldTransform;\n}());\nexport { FieldTransform };\n/** The result of successfully applying a mutation to the backend. */\nvar MutationResult = /** @class */ (function () {\n    function MutationResult(\n    /**\n     * The version at which the mutation was committed or null for a delete.\n     */\n    version, \n    /**\n     * The resulting fields returned from the backend after a\n     * TransformMutation has been committed. Contains one FieldValue for each\n     * FieldTransform that was in the mutation.\n     *\n     * Will be null if the mutation was not a TransformMutation.\n     */\n    transformResults) {\n        this.version = version;\n        this.transformResults = transformResults;\n    }\n    return MutationResult;\n}());\nexport { MutationResult };\nexport var MutationType;\n(function (MutationType) {\n    MutationType[MutationType[\"Set\"] = 0] = \"Set\";\n    MutationType[MutationType[\"Patch\"] = 1] = \"Patch\";\n    MutationType[MutationType[\"Transform\"] = 2] = \"Transform\";\n    MutationType[MutationType[\"Delete\"] = 3] = \"Delete\";\n})(MutationType || (MutationType = {}));\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar Precondition = /** @class */ (function () {\n    function Precondition(updateTime, exists) {\n        this.updateTime = updateTime;\n        this.exists = exists;\n        assert(updateTime === undefined || exists === undefined, 'Precondition can specify \"exists\" or \"updateTime\" but not both');\n    }\n    /** Creates a new Precondition with an exists flag. */\n    Precondition.exists = function (exists) {\n        return new Precondition(undefined, exists);\n    };\n    /** Creates a new Precondition based on a version a document exists at. */\n    Precondition.updateTime = function (version) {\n        return new Precondition(version);\n    };\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\n        /** Returns whether this Precondition is empty. */\n        get: function () {\n            return this.updateTime === undefined && this.exists === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns true if the preconditions is valid for the given document\n     * (or null if no document is available).\n     */\n    Precondition.prototype.isValidFor = function (maybeDoc) {\n        if (this.updateTime !== undefined) {\n            return (maybeDoc instanceof Document &&\n                maybeDoc.version.isEqual(this.updateTime));\n        }\n        else if (this.exists !== undefined) {\n            if (this.exists) {\n                return maybeDoc instanceof Document;\n            }\n            else {\n                return maybeDoc === null || maybeDoc instanceof NoDocument;\n            }\n        }\n        else {\n            assert(this.isNone, 'Precondition should be empty');\n            return true;\n        }\n    };\n    Precondition.prototype.isEqual = function (other) {\n        return (misc.equals(this.updateTime, other.updateTime) &&\n            this.exists === other.exists);\n    };\n    Precondition.NONE = new Precondition();\n    return Precondition;\n}());\nexport { Precondition };\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also it version.\n * In the case of Set, Patch, and Transform mutations we preserve the existing\n * version. In the case of Delete mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nvar Mutation = /** @class */ (function () {\n    function Mutation() {\n    }\n    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {\n        if (maybeDoc != null) {\n            assert(maybeDoc.key.isEqual(this.key), 'Can only apply a mutation to a document with the same key');\n        }\n    };\n    /**\n     * Returns the version from the given document for use as the result of a\n     * mutation. Mutations are defined to return the version of the base document\n     * only if it is an existing document. Deleted and unknown documents have a\n     * post-mutation version of SnapshotVersion.MIN.\n     */\n    Mutation.getPostMutationVersion = function (maybeDoc) {\n        if (maybeDoc instanceof Document) {\n            return maybeDoc.version;\n        }\n        else {\n            return SnapshotVersion.MIN;\n        }\n    };\n    return Mutation;\n}());\nexport { Mutation };\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar SetMutation = /** @class */ (function (_super) {\n    tslib_1.__extends(SetMutation, _super);\n    function SetMutation(key, value, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.value = value;\n        _this.precondition = precondition;\n        _this.type = MutationType.Set;\n        return _this;\n    }\n    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new Document(this.key, version, this.value, {\n            hasLocalMutations: false\n        });\n    };\n    SetMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new Document(this.key, version, this.value, {\n            hasLocalMutations: true\n        });\n    };\n    SetMutation.prototype.isEqual = function (other) {\n        return (other instanceof SetMutation &&\n            this.key.isEqual(other.key) &&\n            this.value.isEqual(other.value) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    return SetMutation;\n}(Mutation));\nexport { SetMutation };\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar PatchMutation = /** @class */ (function (_super) {\n    tslib_1.__extends(PatchMutation, _super);\n    function PatchMutation(key, data, fieldMask, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.data = data;\n        _this.fieldMask = fieldMask;\n        _this.precondition = precondition;\n        _this.type = MutationType.Patch;\n        return _this;\n    }\n    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new Document(this.key, version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    PatchMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new Document(this.key, version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    PatchMutation.prototype.isEqual = function (other) {\n        return (other instanceof PatchMutation &&\n            this.key.isEqual(other.key) &&\n            this.fieldMask.isEqual(other.fieldMask) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    /**\n     * Patches the data of document if available or creates a new document. Note\n     * that this does not check whether or not the precondition of this patch\n     * holds.\n     */\n    PatchMutation.prototype.patchDocument = function (maybeDoc) {\n        var data;\n        if (maybeDoc instanceof Document) {\n            data = maybeDoc.data;\n        }\n        else {\n            data = ObjectValue.EMPTY;\n        }\n        return this.patchObject(data);\n    };\n    PatchMutation.prototype.patchObject = function (data) {\n        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {\n            var fieldPath = _a[_i];\n            var newValue = this.data.field(fieldPath);\n            if (newValue !== undefined) {\n                data = data.set(fieldPath, newValue);\n            }\n            else {\n                data = data.delete(fieldPath);\n            }\n        }\n        return data;\n    };\n    return PatchMutation;\n}(Mutation));\nexport { PatchMutation };\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nvar TransformMutation = /** @class */ (function (_super) {\n    tslib_1.__extends(TransformMutation, _super);\n    function TransformMutation(key, fieldTransforms) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.fieldTransforms = fieldTransforms;\n        _this.type = MutationType.Transform;\n        // NOTE: We set a precondition of exists: true as a safety-check, since we\n        // always combine TransformMutations with a SetMutation or PatchMutation which\n        // (if successful) should end up with an existing document.\n        _this.precondition = Precondition.exists(true);\n        return _this;\n    }\n    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');\n        var transformResults = mutationResult.transformResults;\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new Document(this.key, doc.version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    TransformMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var transformResults = this.localTransformResults(localWriteTime, baseDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new Document(this.key, doc.version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    TransformMutation.prototype.isEqual = function (other) {\n        return (other instanceof TransformMutation &&\n            this.key.isEqual(other.key) &&\n            misc.arrayEquals(this.fieldTransforms, other.fieldTransforms) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    /**\n     * Asserts that the given MaybeDocument is actually a Document and verifies\n     * that it matches the key for this mutation. Since we only support\n     * transformations with precondition exists this method is guaranteed to be\n     * safe.\n     */\n    TransformMutation.prototype.requireDocument = function (maybeDoc) {\n        assert(maybeDoc instanceof Document, 'Unknown MaybeDocument type ' + maybeDoc);\n        var doc = maybeDoc;\n        assert(doc.key.isEqual(this.key), 'Can only transform a document with the same key');\n        return doc;\n    };\n    /**\n     * Creates a list of \"transform results\" (a transform result is a field value\n     * representing the result of applying a transform) for use when applying a\n     * TransformMutation locally.\n     *\n     * @param localWriteTime The local time of the transform mutation (used to\n     *     generate ServerTimestampValues).\n     * @param baseDoc The document prior to applying this mutation batch.\n     * @return The transform results list.\n     */\n    TransformMutation.prototype.localTransformResults = function (localWriteTime, baseDoc) {\n        var transformResults = [];\n        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {\n            var fieldTransform = _a[_i];\n            var transform = fieldTransform.transform;\n            if (transform instanceof ServerTimestampTransform) {\n                var previousValue = null;\n                if (baseDoc instanceof Document) {\n                    previousValue = baseDoc.field(fieldTransform.field) || null;\n                }\n                transformResults.push(new ServerTimestampValue(localWriteTime, previousValue));\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return transformResults;\n    };\n    TransformMutation.prototype.transformObject = function (data, transformResults) {\n        assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');\n        for (var i = 0; i < this.fieldTransforms.length; i++) {\n            var fieldTransform = this.fieldTransforms[i];\n            var transform = fieldTransform.transform;\n            var fieldPath = fieldTransform.field;\n            if (transform instanceof ServerTimestampTransform) {\n                data = data.set(fieldPath, transformResults[i]);\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return data;\n    };\n    return TransformMutation;\n}(Mutation));\nexport { TransformMutation };\n/** A mutation that deletes the document at the given key. */\nvar DeleteMutation = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteMutation, _super);\n    function DeleteMutation(key, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.precondition = precondition;\n        _this.type = MutationType.Delete;\n        return _this;\n    }\n    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        return new NoDocument(this.key, SnapshotVersion.MIN);\n    };\n    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(this.key), 'Can only apply mutation to document with same key');\n        }\n        return new NoDocument(this.key, SnapshotVersion.forDeletedDoc());\n    };\n    DeleteMutation.prototype.isEqual = function (other) {\n        return (other instanceof DeleteMutation &&\n            this.key.isEqual(other.key) &&\n            this.precondition.isEqual(other.precondition));\n    };\n    return DeleteMutation;\n}(Mutation));\nexport { DeleteMutation };\n\n//# sourceMappingURL=mutation.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/mutation.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExistenceFilter = /** @class */ (function () {\n    // TODO(b/33078163): just use simplest form of existence filter for now\n    function ExistenceFilter(count) {\n        this.count = count;\n    }\n    ExistenceFilter.prototype.isEqual = function (other) {\n        return other && other.count === this.count;\n    };\n    return ExistenceFilter;\n}());\nexport { ExistenceFilter };\n\n//# sourceMappingURL=existence_filter.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/existence_filter.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from './sorted_map';\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new SortedMap(this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.isEqual = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\nexport { SortedSet };\n\n//# sourceMappingURL=sorted_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/sorted_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nvar RemoteEvent = /** @class */ (function () {\n    function RemoteEvent(\n    /**\n     * The snapshot version this event brings us up to, or MIN if not set.\n     */\n    snapshotVersion, \n    /**\n     * A map from target to changes to the target. See TargetChange.\n     */\n    targetChanges, \n    /**\n     * A set of which documents have changed or been deleted, along with the\n     * doc's new values (if not deleted).\n     */\n    documentUpdates) {\n        this.snapshotVersion = snapshotVersion;\n        this.targetChanges = targetChanges;\n        this.documentUpdates = documentUpdates;\n    }\n    RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n        this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n    };\n    RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n        /*\n         * An existence filter mismatch will reset the query and we need to reset\n         * the mapping to contain no documents and an empty resume token.\n         *\n         * Note:\n         *   * The reset mapping is empty, specifically forcing the consumer of the\n         *     change to forget all keys for this targetID;\n         *   * The resume snapshot for this target must be reset\n         *   * The target must be unacked because unwatching and rewatching\n         *     introduces a race for changes.\n         */\n        this.targetChanges[targetId] = {\n            mapping: new ResetMapping(),\n            snapshotVersion: SnapshotVersion.MIN,\n            currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n            resumeToken: emptyByteString()\n        };\n    };\n    return RemoteEvent;\n}());\nexport { RemoteEvent };\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nexport var CurrentStatusUpdate;\n(function (CurrentStatusUpdate) {\n    /** The current status is not affected and should not be modified. */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n    /** The target must be marked as no longer \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n    /** The target must be marked as \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate || (CurrentStatusUpdate = {}));\nvar EMPTY_KEY_SET = documentKeySet();\nvar ResetMapping = /** @class */ (function () {\n    function ResetMapping() {\n        this.docs = EMPTY_KEY_SET;\n    }\n    Object.defineProperty(ResetMapping.prototype, \"documents\", {\n        get: function () {\n            return this.docs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetMapping.prototype.add = function (key) {\n        this.docs = this.docs.add(key);\n    };\n    ResetMapping.prototype.delete = function (key) {\n        this.docs = this.docs.delete(key);\n    };\n    ResetMapping.prototype.isEqual = function (other) {\n        return other !== null && this.docs.isEqual(other.docs);\n    };\n    return ResetMapping;\n}());\nexport { ResetMapping };\nvar UpdateMapping = /** @class */ (function () {\n    function UpdateMapping() {\n        this.addedDocuments = EMPTY_KEY_SET;\n        this.removedDocuments = EMPTY_KEY_SET;\n    }\n    UpdateMapping.prototype.applyToKeySet = function (keys) {\n        var result = keys;\n        this.addedDocuments.forEach(function (key) { return (result = result.add(key)); });\n        this.removedDocuments.forEach(function (key) { return (result = result.delete(key)); });\n        return result;\n    };\n    UpdateMapping.prototype.add = function (key) {\n        this.addedDocuments = this.addedDocuments.add(key);\n        this.removedDocuments = this.removedDocuments.delete(key);\n    };\n    UpdateMapping.prototype.delete = function (key) {\n        this.addedDocuments = this.addedDocuments.delete(key);\n        this.removedDocuments = this.removedDocuments.add(key);\n    };\n    UpdateMapping.prototype.isEqual = function (other) {\n        return (other !== null &&\n            this.addedDocuments.isEqual(other.addedDocuments) &&\n            this.removedDocuments.isEqual(other.removedDocuments));\n    };\n    return UpdateMapping;\n}());\nexport { UpdateMapping };\n\n//# sourceMappingURL=remote_event.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/remote_event.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        assert(this.wrappedOnOpen !== undefined, 'Cannot call onOpen because no callback was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        assert(this.wrappedOnClose !== undefined, 'Cannot call onClose because no callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        assert(this.wrappedOnMessage !== undefined, 'Cannot call onMessage because no callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\nexport { StreamBridge };\n\n//# sourceMappingURL=stream_bridge.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/stream_bridge.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ErrorCode, EventType, WebChannel, XhrIoPool, createWebChannelTransport } from '@firebase/webchannel-wrapper';\nimport { SDK_VERSION } from '../core/version';\nimport { mapCodeFromHttpStatus, mapCodeFromRpcStatus } from '../remote/rpc_error';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nvar LOG_TAG = 'Connection';\nvar RPC_STREAM_SERVICE = 'google.firestore.v1beta1.Firestore';\nvar RPC_URL_VERSION = 'v1beta1';\n/** Maps RPC names to the corresponding REST endpoint name. */\nvar RPC_NAME_REST_MAPPING = {\n    BatchGetDocuments: 'batchGet',\n    Commit: 'commit'\n};\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nvar X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\nvar XHR_TIMEOUT_SECS = 15;\nvar WebChannelConnection = /** @class */ (function () {\n    function WebChannelConnection(info) {\n        this.databaseId = info.databaseId;\n        this.pool = new XhrIoPool();\n        var proto = info.ssl ? 'https' : 'http';\n        this.baseUrl = proto + '://' + info.host;\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {\n        if (token) {\n            for (var header in token.authHeaders) {\n                if (token.authHeaders.hasOwnProperty(header)) {\n                    headers[header] = token.authHeaders[header];\n                }\n            }\n        }\n        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n        // This header is used to improve routing and project isolation by the\n        // backend.\n        headers['google-cloud-resource-prefix'] =\n            \"projects/\" + this.databaseId.projectId + \"/\" +\n                (\"databases/\" + this.databaseId.database);\n    };\n    WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {\n        var _this = this;\n        var url = this.makeUrl(rpcName);\n        return new Promise(function (resolve, reject) {\n            // tslint:disable-next-line:no-any XhrIoPool doesn't have TS typings.\n            _this.pool.getObject(function (xhr) {\n                xhr.listenOnce(EventType.COMPLETE, function () {\n                    try {\n                        switch (xhr.getLastErrorCode()) {\n                            case ErrorCode.NO_ERROR:\n                                var json = xhr.getResponseJson();\n                                log.debug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n                                resolve(json);\n                                break;\n                            case ErrorCode.TIMEOUT:\n                                log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n                                reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));\n                                break;\n                            case ErrorCode.HTTP_ERROR:\n                                var status_1 = xhr.getStatus();\n                                log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed with status:', status_1, 'response text:', xhr.getResponseText());\n                                if (status_1 > 0) {\n                                    reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));\n                                }\n                                else {\n                                    // If we received an HTTP_ERROR but there's no status code,\n                                    // it's most probably a connection issue\n                                    log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                                    reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));\n                                }\n                                break;\n                            default:\n                                fail('RPC \"' +\n                                    rpcName +\n                                    '\" failed with unanticipated ' +\n                                    'webchannel error ' +\n                                    xhr.getLastErrorCode() +\n                                    ': ' +\n                                    xhr.getLastError() +\n                                    ', giving up.');\n                        }\n                    }\n                    finally {\n                        log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n                        _this.pool.releaseObject(xhr);\n                    }\n                });\n                var requestString = JSON.stringify(request);\n                log.debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n                // Content-Type: text/plain will avoid preflight requests which might\n                // mess with CORS and redirects by proxies. If we add custom headers\n                // we will need to change this code to potentially use the\n                // $httpOverwrite parameter supported by ESF to avoid\n                // triggering preflight requests.\n                var headers = { 'Content-Type': 'text/plain' };\n                _this.modifyHeadersForRequest(headers, token);\n                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n            });\n        });\n    };\n    WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.invokeRPC(rpcName, request, token);\n    };\n    WebChannelConnection.prototype.openStream = function (rpcName, token) {\n        var urlParts = [\n            this.baseUrl,\n            '/',\n            RPC_STREAM_SERVICE,\n            '/',\n            rpcName,\n            '/channel'\n        ];\n        var webchannelTransport = createWebChannelTransport();\n        var request = {\n            // Background channel test avoids the initial two test calls and decreases\n            // initial cold start time.\n            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n            // we should monitor closely for any reports.\n            backgroundChannelTest: true,\n            // Required for backend stickiness, routing behavior is based on this\n            // parameter.\n            httpSessionIdParam: 'gsessionid',\n            initMessageHeaders: {},\n            // Send our custom headers as a '$httpHeaders=' url param to avoid CORS\n            // preflight round-trip. This is formally defined here:\n            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L40\n            httpHeadersOverwriteParam: '$httpHeaders',\n            sendRawJson: true,\n            supportsCrossDomainXhr: true\n        };\n        this.modifyHeadersForRequest(request.initMessageHeaders, token);\n        var url = urlParts.join('');\n        log.debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n        // tslint:disable-next-line:no-any Because listen isn't defined on it.\n        var channel = webchannelTransport.createWebChannel(url, request);\n        // WebChannel supports sending the first message with the handshake - saving\n        // a network round trip. However, it will have to call send in the same\n        // JS event loop as open. In order to enforce this, we delay actually\n        // opening the WebChannel until send is called. Whether we have called\n        // open is tracked with this variable.\n        var opened = false;\n        // A flag to determine whether the stream was closed (by us or through an\n        // error/close event) to avoid delivering multiple close events or sending\n        // on a closed stream\n        var closed = false;\n        var streamBridge = new StreamBridge({\n            sendFn: function (msg) {\n                if (!closed) {\n                    if (!opened) {\n                        log.debug(LOG_TAG, 'Opening WebChannel transport.');\n                        channel.open();\n                        opened = true;\n                    }\n                    log.debug(LOG_TAG, 'WebChannel sending:', msg);\n                    channel.send(msg);\n                }\n                else {\n                    log.debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n                }\n            },\n            closeFn: function () { return channel.close(); }\n        });\n        // Closure events are guarded and exceptions are swallowed, so catch any\n        // exception and rethrow using a setTimeout so they become visible again.\n        // Note that eventually this function could go away if we are confident\n        // enough the code is exception free.\n        var unguardedEventListen = function (type, fn) {\n            // TODO(dimond): closure typing seems broken because WebChannel does\n            // not implement goog.events.Listenable\n            channel.listen(type, function (param) {\n                try {\n                    fn(param);\n                }\n                catch (e) {\n                    setTimeout(function () {\n                        throw e;\n                    }, 0);\n                }\n            });\n        };\n        unguardedEventListen(WebChannel.EventType.OPEN, function () {\n            if (!closed) {\n                log.debug(LOG_TAG, 'WebChannel transport opened.');\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.CLOSE, function () {\n            if (!closed) {\n                closed = true;\n                log.debug(LOG_TAG, 'WebChannel transport closed');\n                streamBridge.callOnClose();\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.ERROR, function (err) {\n            if (!closed) {\n                closed = true;\n                log.debug(LOG_TAG, 'WebChannel transport errored:', err);\n                streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.MESSAGE, function (msg) {\n            if (!closed) {\n                var msgData = msg.data[0];\n                assert(!!msgData, 'Got a webchannel message without data.');\n                // TODO(b/35143891): There is a bug in One Platform that caused errors\n                // (and only errors) to be wrapped in an extra array. To be forward\n                // compatible with the bug we need to check either condition. The latter\n                // can be removed once the fix has been rolled out.\n                var error = \n                // tslint:disable-next-line:no-any msgData.error is not typed.\n                msgData.error || (msgData[0] && msgData[0].error);\n                if (error) {\n                    log.debug(LOG_TAG, 'WebChannel received error:', error);\n                    // error.status will be a string like 'OK' or 'NOT_FOUND'.\n                    var status_2 = error.status;\n                    var code = mapCodeFromRpcStatus(status_2);\n                    var message = error.message;\n                    if (code === undefined) {\n                        code = Code.INTERNAL;\n                        message =\n                            'Unknown error status: ' +\n                                status_2 +\n                                ' with message ' +\n                                error.message;\n                    }\n                    // Mark closed so no further events are propagated\n                    closed = true;\n                    streamBridge.callOnClose(new FirestoreError(code, message));\n                    channel.close();\n                }\n                else {\n                    log.debug(LOG_TAG, 'WebChannel received:', msgData);\n                    streamBridge.callOnMessage(msgData);\n                }\n            }\n        });\n        setTimeout(function () {\n            // Technically we could/should wait for the WebChannel opened event,\n            // but because we want to send the first message with the WebChannel\n            // handshake we pretend the channel opened here (asynchronously), and\n            // then delay the actual open until the first message is sent.\n            streamBridge.callOnOpen();\n        }, 0);\n        return streamBridge;\n    };\n    // visible for testing\n    WebChannelConnection.prototype.makeUrl = function (rpcName) {\n        var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n        assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);\n        var url = [this.baseUrl, '/', RPC_URL_VERSION];\n        url.push('/projects/');\n        url.push(this.databaseId.projectId);\n        url.push('/databases/');\n        url.push(this.databaseId.database);\n        url.push('/documents');\n        url.push(':');\n        url.push(urlRpcName);\n        return url.join('');\n    };\n    return WebChannelConnection;\n}());\nexport { WebChannelConnection };\n\n//# sourceMappingURL=webchannel_connection.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/webchannel_connection.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { WebChannelConnection } from './webchannel_connection';\nvar BrowserPlatform = /** @class */ (function () {\n    function BrowserPlatform() {\n        this.emptyByteString = '';\n        this.base64Available = typeof atob !== 'undefined';\n    }\n    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {\n        return Promise.resolve(new WebChannelConnection(databaseInfo));\n    };\n    BrowserPlatform.prototype.newSerializer = function (databaseId) {\n        return new JsonProtoSerializer(databaseId, { useProto3Json: true });\n    };\n    BrowserPlatform.prototype.formatJSON = function (value) {\n        return JSON.stringify(value);\n    };\n    BrowserPlatform.prototype.atob = function (encoded) {\n        return atob(encoded);\n    };\n    BrowserPlatform.prototype.btoa = function (raw) {\n        return btoa(raw);\n    };\n    return BrowserPlatform;\n}());\nexport { BrowserPlatform };\n\n//# sourceMappingURL=browser_platform.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/browser_platform.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { BrowserPlatform } from './browser_platform';\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nPlatformSupport.setPlatform(new BrowserPlatform());\n\n//# sourceMappingURL=browser_init.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/browser_init.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Describes the online state of the Firestore client. Note that this does not\n * indicate whether or not the remote store is trying to connect or not. This is\n * primarily used by the View / EventManager code to change their behavior while\n * offline (e.g. get() calls shouldn't wait for data from the server and\n * snapshot events should set metadata.isFromCache=true).\n */\nexport var OnlineState;\n(function (OnlineState) {\n    /**\n     * The Firestore client is in an unknown online state. This means the client\n     * is either not actively trying to establish a connection or it is currently\n     * trying to establish a connection, but it has not succeeded or failed yet.\n     * Higher-level components should not operate in offline mode.\n     */\n    OnlineState[OnlineState[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The client is connected and the connections are healthy. This state is\n     * reached after a successful connection and there has been at least one\n     * successful message received from the backends.\n     */\n    OnlineState[OnlineState[\"Healthy\"] = 1] = \"Healthy\";\n    /**\n     * The client is either trying to establish a connection but failing, or it\n     * has been explicitly marked offline via a call to disableNetwork().\n     * Higher-level components should operate in offline mode.\n     */\n    OnlineState[OnlineState[\"Failed\"] = 2] = \"Failed\";\n})(OnlineState || (OnlineState = {}));\n\n//# sourceMappingURL=types.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/types.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nexport var ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType || (ChangeType = {}));\nexport var SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new SortedMap(DocumentKey.comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            fail('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\nexport { DocumentChangeSet };\nvar ViewSnapshot = /** @class */ (function () {\n    function ViewSnapshot(query, docs, oldDocs, docChanges, fromCache, hasPendingWrites, syncStateChanged) {\n        this.query = query;\n        this.docs = docs;\n        this.oldDocs = oldDocs;\n        this.docChanges = docChanges;\n        this.fromCache = fromCache;\n        this.hasPendingWrites = hasPendingWrites;\n        this.syncStateChanged = syncStateChanged;\n    }\n    ViewSnapshot.prototype.isEqual = function (other) {\n        if (this.fromCache !== other.fromCache ||\n            this.hasPendingWrites !== other.hasPendingWrites ||\n            this.syncStateChanged !== other.syncStateChanged ||\n            !this.query.isEqual(other.query) ||\n            !this.docs.isEqual(other.docs) ||\n            !this.oldDocs.isEqual(other.oldDocs)) {\n            return false;\n        }\n        var changes = this.docChanges;\n        var otherChanges = other.docChanges;\n        if (changes.length !== otherChanges.length) {\n            return false;\n        }\n        for (var i = 0; i < changes.length; i++) {\n            if (changes[i].type !== otherChanges[i].type ||\n                !changes[i].doc.isEqual(otherChanges[i].doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return ViewSnapshot;\n}());\nexport { ViewSnapshot };\n\n//# sourceMappingURL=view_snapshot.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/view_snapshot.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\nexport { TargetIdGenerator };\n\n//# sourceMappingURL=target_id_generator.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/target_id_generator.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from '../util/sorted_map';\nimport { documentMap } from './collections';\nimport { DocumentKey } from './document_key';\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nvar DocumentSet = /** @class */ (function () {\n    /** The default ordering is by key if the comparator is omitted */\n    function DocumentSet(comp) {\n        // We are adding document key comparator to the end as it's the only\n        // guaranteed unique property of a document.\n        if (comp) {\n            this.comparator = function (d1, d2) {\n                return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        else {\n            this.comparator = function (d1, d2) {\n                return DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        this.keyedMap = documentMap();\n        this.sortedSet = new SortedMap(this.comparator);\n    }\n    /**\n     * Returns an empty copy of the existing DocumentSet, using the same\n     * comparator.\n     */\n    DocumentSet.emptySet = function (oldSet) {\n        return new DocumentSet(oldSet.comparator);\n    };\n    DocumentSet.prototype.has = function (key) {\n        return this.keyedMap.get(key) != null;\n    };\n    DocumentSet.prototype.get = function (key) {\n        return this.keyedMap.get(key);\n    };\n    DocumentSet.prototype.first = function () {\n        return this.sortedSet.minKey();\n    };\n    DocumentSet.prototype.last = function () {\n        return this.sortedSet.maxKey();\n    };\n    DocumentSet.prototype.isEmpty = function () {\n        return this.sortedSet.isEmpty();\n    };\n    /**\n     * Returns the index of the provided key in the document set, or -1 if the\n     * document key is not present in the set;\n     */\n    DocumentSet.prototype.indexOf = function (key) {\n        var doc = this.keyedMap.get(key);\n        return doc ? this.sortedSet.indexOf(doc) : -1;\n    };\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\n        get: function () {\n            return this.sortedSet.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Iterates documents in order defined by \"comparator\" */\n    DocumentSet.prototype.forEach = function (cb) {\n        this.sortedSet.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Inserts or updates a document with the same key */\n    DocumentSet.prototype.add = function (doc) {\n        // First remove the element if we have it.\n        var set = this.delete(doc.key);\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n    };\n    /** Deletes a document with a given key */\n    DocumentSet.prototype.delete = function (key) {\n        var doc = this.get(key);\n        if (!doc) {\n            return this;\n        }\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n    };\n    DocumentSet.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.sortedSet.getIterator();\n        var otherIt = other.sortedSet.getIterator();\n        while (thisIt.hasNext()) {\n            var thisDoc = thisIt.getNext().key;\n            var otherDoc = otherIt.getNext().key;\n            if (!thisDoc.isEqual(otherDoc))\n                return false;\n        }\n        return true;\n    };\n    DocumentSet.prototype.toString = function () {\n        var docStrings = [];\n        this.forEach(function (doc) {\n            docStrings.push(doc.toString());\n        });\n        if (docStrings.length === 0) {\n            return 'DocumentSet ()';\n        }\n        else {\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n        }\n    };\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n        var newSet = new DocumentSet();\n        newSet.comparator = this.comparator;\n        newSet.keyedMap = keyedMap;\n        newSet.sortedSet = sortedSet;\n        return newSet;\n    };\n    return DocumentSet;\n}());\nexport { DocumentSet };\n\n//# sourceMappingURL=document_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as objUtil from './obj';\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nvar ObjectMap = /** @class */ (function () {\n    function ObjectMap(mapKeyFn) {\n        this.mapKeyFn = mapKeyFn;\n        /**\n         * The inner map for a key -> value pair. Due to the possibility of\n         * collisions we keep a list of entries that we do a linear search through\n         * to find an actual match. Note that collisions should be rare, so we still\n         * expect near constant time lookups in practice.\n         */\n        this.inner = {};\n    }\n    /** Get a value for this key, or undefined if it does not exist. */\n    ObjectMap.prototype.get = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return undefined;\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];\n            if (otherKey.isEqual(key)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    ObjectMap.prototype.has = function (key) {\n        return this.get(key) !== undefined;\n    };\n    /** Put this key and value in the map. */\n    ObjectMap.prototype.set = function (key, value) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            this.inner[id] = [[key, value]];\n            return;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].isEqual(key)) {\n                matches[i] = [key, value];\n                return;\n            }\n        }\n        matches.push([key, value]);\n    };\n    /**\n     * Remove this key from the map. Returns a boolean if anything was deleted.\n     */\n    ObjectMap.prototype.delete = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return false;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].isEqual(key)) {\n                if (matches.length === 1) {\n                    delete this.inner[id];\n                }\n                else {\n                    matches.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    ObjectMap.prototype.forEach = function (fn) {\n        objUtil.forEach(this.inner, function (_, entries) {\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                fn(k, v);\n            }\n        });\n    };\n    ObjectMap.prototype.isEmpty = function () {\n        return objUtil.isEmpty(this.inner);\n    };\n    return ObjectMap;\n}());\nexport { ObjectMap };\n\n//# sourceMappingURL=obj_map.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/obj_map.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { OnlineState } from './types';\nimport { ChangeType, ViewSnapshot } from './view_snapshot';\nimport { DocumentSet } from '../model/document_set';\nimport { assert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nvar QueryListenersInfo = /** @class */ (function () {\n    function QueryListenersInfo() {\n        this.listeners = [];\n    }\n    return QueryListenersInfo;\n}());\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager(syncEngine) {\n        this.syncEngine = syncEngine;\n        this.queries = new ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.onlineState = OnlineState.Unknown;\n        this.syncEngine.subscribe(this.onChange.bind(this), this.onError.bind(this));\n    }\n    EventManager.prototype.listen = function (listener) {\n        var query = listener.query;\n        var firstListen = false;\n        var queryInfo = this.queries.get(query);\n        if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n            this.queries.set(query, queryInfo);\n        }\n        queryInfo.listeners.push(listener);\n        listener.applyOnlineStateChange(this.onlineState);\n        if (queryInfo.viewSnap)\n            listener.onViewSnapshot(queryInfo.viewSnap);\n        if (firstListen) {\n            return this.syncEngine.listen(query).then(function (targetId) {\n                queryInfo.targetId = targetId;\n                return targetId;\n            });\n        }\n        else {\n            return Promise.resolve(queryInfo.targetId);\n        }\n    };\n    EventManager.prototype.unlisten = function (listener) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var query, lastListen, queryInfo, i;\n            return tslib_1.__generator(this, function (_a) {\n                query = listener.query;\n                lastListen = false;\n                queryInfo = this.queries.get(query);\n                if (queryInfo) {\n                    i = queryInfo.listeners.indexOf(listener);\n                    if (i >= 0) {\n                        queryInfo.listeners.splice(i, 1);\n                        lastListen = queryInfo.listeners.length === 0;\n                    }\n                }\n                if (lastListen) {\n                    this.queries.delete(query);\n                    return [2 /*return*/, this.syncEngine.unlisten(query)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    EventManager.prototype.onChange = function (viewSnaps) {\n        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n            var viewSnap = viewSnaps_1[_i];\n            var query = viewSnap.query;\n            var queryInfo = this.queries.get(query);\n            if (queryInfo) {\n                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {\n                    var listener = _b[_a];\n                    listener.onViewSnapshot(viewSnap);\n                }\n                queryInfo.viewSnap = viewSnap;\n            }\n        }\n    };\n    EventManager.prototype.onError = function (query, error) {\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onError(error);\n            }\n        }\n        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n        // after an error.\n        this.queries.delete(query);\n    };\n    EventManager.prototype.applyOnlineStateChange = function (onlineState) {\n        this.onlineState = onlineState;\n        this.queries.forEach(function (_, queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.applyOnlineStateChange(onlineState);\n            }\n        });\n    };\n    return EventManager;\n}());\nexport { EventManager };\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nvar QueryListener = /** @class */ (function () {\n    function QueryListener(query, queryObserver, options) {\n        this.query = query;\n        this.queryObserver = queryObserver;\n        /**\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n         * observer. This flag is set to true once we've actually raised an event.\n         */\n        this.raisedInitialEvent = false;\n        this.onlineState = OnlineState.Unknown;\n        this.options = options || {};\n    }\n    QueryListener.prototype.onViewSnapshot = function (snap) {\n        assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');\n        if (!this.options.includeDocumentMetadataChanges) {\n            // Remove the metadata only changes.\n            var docChanges = [];\n            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {\n                var docChange = _a[_i];\n                if (docChange.type !== ChangeType.Metadata) {\n                    docChanges.push(docChange);\n                }\n            }\n            snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.fromCache, snap.hasPendingWrites, snap.syncStateChanged);\n        }\n        if (!this.raisedInitialEvent) {\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n                this.raiseInitialEvent(snap);\n            }\n        }\n        else if (this.shouldRaiseEvent(snap)) {\n            this.queryObserver.next(snap);\n        }\n        this.snap = snap;\n    };\n    QueryListener.prototype.onError = function (error) {\n        this.queryObserver.error(error);\n    };\n    QueryListener.prototype.applyOnlineStateChange = function (onlineState) {\n        this.onlineState = onlineState;\n        if (this.snap &&\n            !this.raisedInitialEvent &&\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n            this.raiseInitialEvent(this.snap);\n        }\n    };\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n        assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');\n        // Always raise the first event when we're synced\n        if (!snap.fromCache) {\n            return true;\n        }\n        // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n        // or Online if we wait long enough).\n        var maybeOnline = onlineState !== OnlineState.Failed;\n        // Don't raise the event if we're online, aren't synced yet (checked\n        // above) and are waiting for a sync.\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\n            assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');\n            return false;\n        }\n        // Raise data from cache if we have any documents or we are offline\n        return !snap.docs.isEmpty() || onlineState === OnlineState.Failed;\n    };\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\n        // We don't need to handle includeDocumentMetadataChanges here because\n        // the Metadata only changes have already been stripped out if needed.\n        // At this point the only changes we will see are the ones we should\n        // propagate.\n        if (snap.docChanges.length > 0) {\n            return true;\n        }\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\n            return this.options.includeQueryMetadataChanges === true;\n        }\n        // Generally we should have hit one of the cases above, but it's possible\n        // to get here if there were only metadata docChanges and they got\n        // stripped out.\n        return false;\n    };\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\n        assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');\n        snap = new ViewSnapshot(snap.query, snap.docs, DocumentSet.emptySet(snap.docs), QueryListener.getInitialViewChanges(snap), snap.fromCache, snap.hasPendingWrites, true);\n        this.raisedInitialEvent = true;\n        this.queryObserver.next(snap);\n    };\n    /** Returns changes as if all documents in the snap were added. */\n    QueryListener.getInitialViewChanges = function (snap) {\n        var result = [];\n        snap.docs.forEach(function (doc) {\n            result.push({ type: ChangeType.Added, doc: doc });\n        });\n        return result;\n    };\n    return QueryListener;\n}());\nexport { QueryListener };\n\n//# sourceMappingURL=event_manager.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/event_manager.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nvar PersistencePromise = /** @class */ (function () {\n    function PersistencePromise(callback) {\n        var _this = this;\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\n        // not the user's raw next() or catch() callbacks.\n        // tslint:disable-next-line:no-any Accept any result type for the next call in the Promise chain.\n        this.nextCallback = null;\n        // tslint:disable-next-line:no-any Accept any result type for the error handler.\n        this.catchCallback = null;\n        // When the operation resolves, we'll set result or error and mark isDone.\n        this.result = undefined;\n        this.error = undefined;\n        this.isDone = false;\n        // Set to true when .then() or .catch() are called and prevents additional\n        // chaining.\n        this.callbackAttached = false;\n        callback(function (value) {\n            _this.isDone = true;\n            _this.result = value;\n            if (_this.nextCallback) {\n                // value should be defined unless T is Void, but we can't express\n                // that in the type system.\n                _this.nextCallback(value);\n            }\n        }, function (error) {\n            _this.isDone = true;\n            _this.error = error;\n            if (_this.catchCallback) {\n                _this.catchCallback(error);\n            }\n        });\n    }\n    PersistencePromise.prototype.catch = function (fn) {\n        return this.next(undefined, fn);\n    };\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\n        var _this = this;\n        if (this.callbackAttached) {\n            fail('Called next() or catch() twice for PersistencePromise');\n        }\n        this.callbackAttached = true;\n        if (this.isDone) {\n            if (!this.error) {\n                return this.wrapSuccess(nextFn, this.result);\n            }\n            else {\n                return this.wrapFailure(catchFn, this.error);\n            }\n        }\n        else {\n            return new PersistencePromise(function (resolve, reject) {\n                _this.nextCallback = function (value) {\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\n                };\n                _this.catchCallback = function (error) {\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\n                };\n            });\n        }\n    };\n    PersistencePromise.prototype.toPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.next(resolve, reject);\n        });\n    };\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\n        try {\n            var result = fn();\n            if (result instanceof PersistencePromise) {\n                return result;\n            }\n            else {\n                return PersistencePromise.resolve(result);\n            }\n        }\n        catch (e) {\n            return PersistencePromise.reject(e);\n        }\n    };\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n        if (nextFn) {\n            return this.wrapUserFunction(function () { return nextFn(value); });\n        }\n        else {\n            // If there's no nextFn, then R must be the same as T but we\n            // can't express that in the type system.\n            // tslint:disable-next-line:no-any\n            return PersistencePromise.resolve(value);\n        }\n    };\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n        if (catchFn) {\n            return this.wrapUserFunction(function () { return catchFn(error); });\n        }\n        else {\n            return PersistencePromise.reject(error);\n        }\n    };\n    PersistencePromise.resolve = function (result) {\n        return new PersistencePromise(function (resolve, reject) {\n            resolve(result);\n        });\n    };\n    PersistencePromise.reject = function (error) {\n        return new PersistencePromise(function (resolve, reject) {\n            reject(error);\n        });\n    };\n    PersistencePromise.waitFor = function (\n    // tslint:disable-next-line:no-any Accept all Promise types in waitFor().\n    all) {\n        return all.reduce(function (promise, nextPromise, idx) {\n            return promise.next(function () {\n                return nextPromise;\n            });\n        }, PersistencePromise.resolve());\n    };\n    PersistencePromise.map = function (all) {\n        var results = [];\n        var first = true;\n        // initial is ignored, so we can cheat on the type.\n        // tslint:disable-next-line:no-any\n        var initial = PersistencePromise.resolve(null);\n        return all\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (!first) {\n                    results.push(result);\n                }\n                first = false;\n                return nextPromise;\n            });\n        }, initial)\n            .next(function (result) {\n            results.push(result);\n            return results;\n        });\n    };\n    return PersistencePromise;\n}());\nexport { PersistencePromise };\n\n//# sourceMappingURL=persistence_promise.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/persistence_promise.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nvar EagerGarbageCollector = /** @class */ (function () {\n    function EagerGarbageCollector() {\n        this.isEager = true;\n        /**\n         * The garbage collectible sources to double-check during garbage collection.\n         */\n        this.sources = [];\n        /**\n         * A set of potentially garbage keys.\n         * PORTING NOTE: This would be a mutable set if Javascript had one.\n         */\n        this.potentialGarbage = documentKeySet();\n    }\n    EagerGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        this.sources.push(garbageSource);\n        garbageSource.setGarbageCollector(this);\n    };\n    EagerGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        this.sources.splice(this.sources.indexOf(garbageSource), 1);\n        garbageSource.setGarbageCollector(null);\n    };\n    EagerGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        this.potentialGarbage = this.potentialGarbage.add(key);\n    };\n    EagerGarbageCollector.prototype.collectGarbage = function (txn) {\n        var _this = this;\n        var promises = [];\n        var garbageKeys = documentKeySet();\n        this.potentialGarbage.forEach(function (key) {\n            var hasRefsPromise = _this.documentHasAnyReferences(txn, key);\n            promises.push(hasRefsPromise.next(function (hasRefs) {\n                // If there are no references, get the key.\n                if (!hasRefs) {\n                    garbageKeys = garbageKeys.add(key);\n                }\n                return PersistencePromise.resolve();\n            }));\n        });\n        // Clear locally retained potential keys and returned confirmed garbage.\n        this.potentialGarbage = documentKeySet();\n        return PersistencePromise.waitFor(promises).next(function () { return garbageKeys; });\n    };\n    EagerGarbageCollector.prototype.documentHasAnyReferences = function (txn, key) {\n        var initial = PersistencePromise.resolve(false);\n        return this.sources\n            .map(function (source) { return function () { return source.containsKey(txn, key); }; })\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (result) {\n                    return PersistencePromise.resolve(true);\n                }\n                else {\n                    return nextPromise();\n                }\n            });\n        }, initial);\n    };\n    return EagerGarbageCollector;\n}());\nexport { EagerGarbageCollector };\n\n//# sourceMappingURL=eager_garbage_collector.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/eager_garbage_collector.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ChangeType } from '../core/view_snapshot';\nimport { documentKeySet } from '../model/collections';\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nvar LocalViewChanges = /** @class */ (function () {\n    function LocalViewChanges(query, addedKeys, removedKeys) {\n        this.query = query;\n        this.addedKeys = addedKeys;\n        this.removedKeys = removedKeys;\n    }\n    LocalViewChanges.fromSnapshot = function (viewSnapshot) {\n        var addedKeys = documentKeySet();\n        var removedKeys = documentKeySet();\n        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {\n            var docChange = _a[_i];\n            switch (docChange.type) {\n                case ChangeType.Added:\n                    addedKeys = addedKeys.add(docChange.doc.key);\n                    break;\n                case ChangeType.Removed:\n                    removedKeys = removedKeys.add(docChange.doc.key);\n                    break;\n                default:\n            }\n        }\n        return new LocalViewChanges(viewSnapshot.query, addedKeys, removedKeys);\n    };\n    return LocalViewChanges;\n}());\nexport { LocalViewChanges };\n\n//# sourceMappingURL=local_view_changes.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_view_changes.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nvar ReferenceSet = /** @class */ (function () {\n    function ReferenceSet() {\n        // A set of outstanding references to a document sorted by key.\n        this.refsByKey = new SortedSet(DocReference.compareByKey);\n        // A set of outstanding references to a document sorted by target id.\n        this.refsByTarget = new SortedSet(DocReference.compareByTargetId);\n        /** Keeps track of keys that have references */\n        this.garbageCollector = null;\n    }\n    /** Returns true if the reference set contains no references. */\n    ReferenceSet.prototype.isEmpty = function () {\n        return this.refsByKey.isEmpty();\n    };\n    /** Adds a reference to the given document key for the given ID. */\n    ReferenceSet.prototype.addReference = function (key, id) {\n        var ref = new DocReference(key, id);\n        this.refsByKey = this.refsByKey.add(ref);\n        this.refsByTarget = this.refsByTarget.add(ref);\n    };\n    /** Add references to the given document keys for the given ID. */\n    ReferenceSet.prototype.addReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.addReference(key, id); });\n    };\n    /**\n     * Removes a reference to the given document key for the given\n     * ID.\n     */\n    ReferenceSet.prototype.removeReference = function (key, id) {\n        this.removeRef(new DocReference(key, id));\n    };\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\n    };\n    /**\n     * Clears all references with a given ID. Calls removeRef() for each key\n     * removed.\n     */\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\n        var _this = this;\n        var emptyKey = DocumentKey.EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            _this.removeRef(ref);\n        });\n    };\n    ReferenceSet.prototype.removeAllReferences = function () {\n        var _this = this;\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\n    };\n    ReferenceSet.prototype.removeRef = function (ref) {\n        this.refsByKey = this.refsByKey.delete(ref);\n        this.refsByTarget = this.refsByTarget.delete(ref);\n        if (this.garbageCollector !== null) {\n            this.garbageCollector.addPotentialGarbageKey(ref.key);\n        }\n    };\n    ReferenceSet.prototype.referencesForId = function (id) {\n        var emptyKey = DocumentKey.EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        var keys = documentKeySet();\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            keys = keys.add(ref.key);\n        });\n        return keys;\n    };\n    ReferenceSet.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    ReferenceSet.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n        return PersistencePromise.resolve(firstRef !== null && key.isEqual(firstRef.key));\n    };\n    return ReferenceSet;\n}());\nexport { ReferenceSet };\nvar DocReference = /** @class */ (function () {\n    function DocReference(key, targetOrBatchId) {\n        this.key = key;\n        this.targetOrBatchId = targetOrBatchId;\n    }\n    /** Compare by key then by ID */\n    DocReference.compareByKey = function (left, right) {\n        return (DocumentKey.comparator(left.key, right.key) ||\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\n    };\n    /** Compare by ID then by key */\n    DocReference.compareByTargetId = function (left, right) {\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n            DocumentKey.comparator(left.key, right.key));\n    };\n    return DocReference;\n}());\nexport { DocReference };\n\n//# sourceMappingURL=reference_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/reference_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert, fail } from './assert';\nimport * as log from './log';\nimport { Deferred } from './promise';\nimport { Code, FirestoreError } from './error';\n/**\n * Wellknown \"timer\" IDs used when scheduling delayed operations on the\n * AsyncQueue. These IDs can then be used from tests to check for the presence\n * of operations or to run them early.\n */\nexport var TimerId;\n(function (TimerId) {\n    TimerId[TimerId[\"ListenStreamIdle\"] = 0] = \"ListenStreamIdle\";\n    TimerId[TimerId[\"ListenStreamConnection\"] = 1] = \"ListenStreamConnection\";\n    TimerId[TimerId[\"WriteStreamIdle\"] = 2] = \"WriteStreamIdle\";\n    TimerId[TimerId[\"WriteStreamConnection\"] = 3] = \"WriteStreamConnection\";\n})(TimerId || (TimerId = {}));\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n */\nvar DelayedOperation = /** @class */ (function () {\n    function DelayedOperation(asyncQueue, timerId, targetTimeMs, op, removalCallback) {\n        this.asyncQueue = asyncQueue;\n        this.timerId = timerId;\n        this.targetTimeMs = targetTimeMs;\n        this.op = op;\n        this.removalCallback = removalCallback;\n        this.deferred = new Deferred();\n        this.then = this.deferred.promise.then.bind(this.deferred.promise);\n        this.catch = this.deferred.promise.catch.bind(this.deferred.promise);\n    }\n    /**\n     * Creates and returns a DelayedOperation that has been scheduled to be\n     * executed on the provided asyncQueue after the provided delayMs.\n     *\n     * @param asyncQueue The queue to schedule the operation on.\n     * @param id A Timer ID identifying the type of operation this is.\n     * @param delayMs The delay (ms) before the operation should be scheduled.\n     * @param op The operation to run.\n     * @param removalCallback A callback to be called synchronously once the\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\n     *   from its delayedOperations list.\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n     *   the DelayedOperation class public.\n     */\n    DelayedOperation.createAndSchedule = function (asyncQueue, timerId, delayMs, op, removalCallback) {\n        var targetTime = Date.now() + delayMs;\n        var delayedOp = new DelayedOperation(asyncQueue, timerId, targetTime, op, removalCallback);\n        delayedOp.start(delayMs);\n        return delayedOp;\n    };\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */\n    DelayedOperation.prototype.start = function (delayMs) {\n        var _this = this;\n        this.timerHandle = setTimeout(function () { return _this.handleDelayElapsed(); }, delayMs);\n    };\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */\n    DelayedOperation.prototype.skipDelay = function () {\n        return this.handleDelayElapsed();\n    };\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */\n    DelayedOperation.prototype.cancel = function (reason) {\n        if (this.timerHandle !== null) {\n            this.clearTimeout();\n            this.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled' + (reason ? ': ' + reason : '')));\n        }\n    };\n    DelayedOperation.prototype.handleDelayElapsed = function () {\n        var _this = this;\n        this.asyncQueue.enqueue(function () {\n            if (_this.timerHandle !== null) {\n                _this.clearTimeout();\n                return _this.op().then(function (result) {\n                    return _this.deferred.resolve(result);\n                });\n            }\n            else {\n                return Promise.resolve();\n            }\n        });\n    };\n    DelayedOperation.prototype.clearTimeout = function () {\n        if (this.timerHandle !== null) {\n            this.removalCallback(this);\n            clearTimeout(this.timerHandle);\n            this.timerHandle = null;\n        }\n    };\n    return DelayedOperation;\n}());\nvar AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        // The last promise in the queue.\n        this.tail = Promise.resolve();\n        // Operations scheduled to be queued in the future. Operations are\n        // automatically removed after they are run or canceled.\n        this.delayedOperations = [];\n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.operationInProgress = false;\n    }\n    /**\n     * Adds a new operation to the queue. Returns a promise that will be resolved\n     * when the promise returned by the new operation is (with its value).\n     */\n    AsyncQueue.prototype.enqueue = function (op) {\n        var _this = this;\n        this.verifyNotFailed();\n        var newTail = this.tail.then(function () {\n            _this.operationInProgress = true;\n            return op()\n                .catch(function (error) {\n                _this.failure = error;\n                _this.operationInProgress = false;\n                var message = error.stack || error.message || '';\n                log.error('INTERNAL UNHANDLED ERROR: ', message);\n                // Escape the promise chain and throw the error globally so that\n                // e.g. any global crash reporting library detects and reports it.\n                // (but not for simulated errors in our tests since this breaks mocha)\n                if (message.indexOf('Firestore Test Simulated Error') < 0) {\n                    setTimeout(function () {\n                        throw error;\n                    }, 0);\n                }\n                // Re-throw the error so that this.tail becomes a rejected Promise and\n                // all further attempts to chain (via .then) will just short-circuit\n                // and return the rejected Promise.\n                throw error;\n            })\n                .then(function (result) {\n                _this.operationInProgress = false;\n                return result;\n            });\n        });\n        this.tail = newTail;\n        return newTail;\n    };\n    /**\n     * Schedules an operation to be queued on the AsyncQueue once the specified\n     * `delayMs` has elapsed. The returned CancelablePromise can be used to cancel\n     * the operation prior to its running.\n     */\n    AsyncQueue.prototype.enqueueAfterDelay = function (timerId, delayMs, op) {\n        var _this = this;\n        this.verifyNotFailed();\n        // While not necessarily harmful, we currently don't expect to have multiple\n        // ops with the same timer id in the queue, so defensively reject them.\n        assert(!this.containsDelayedOperation(timerId), \"Attempted to schedule multiple operations with timer id \" + TimerId[timerId] + \".\");\n        var delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, function (op) { return _this.removeDelayedOperation(op); });\n        this.delayedOperations.push(delayedOp);\n        return delayedOp;\n    };\n    AsyncQueue.prototype.verifyNotFailed = function () {\n        if (this.failure) {\n            fail('AsyncQueue is already failed: ' +\n                (this.failure.stack || this.failure.message));\n        }\n    };\n    /**\n     * Verifies there's an operation currently in-progress on the AsyncQueue.\n     * Unfortunately we can't verify that the running code is in the promise chain\n     * of that operation, so this isn't a foolproof check, but it should be enough\n     * to catch some bugs.\n     */\n    AsyncQueue.prototype.verifyOperationInProgress = function () {\n        assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');\n    };\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */\n    AsyncQueue.prototype.drain = function () {\n        return this.enqueue(function () { return Promise.resolve(); });\n    };\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */\n    AsyncQueue.prototype.containsDelayedOperation = function (timerId) {\n        return this.delayedOperations.findIndex(function (op) { return op.timerId === timerId; }) >= 0;\n    };\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId If specified, only delayed operations up to and\n     *   including this TimerId will be drained. Throws if no such operation\n     *   exists.\n     * @returns a Promise that resolves once all operations have been run.\n     */\n    AsyncQueue.prototype.runDelayedOperationsEarly = function (lastTimerId) {\n        var _this = this;\n        // Note that draining may generate more delayed ops, so we do that first.\n        return this.drain().then(function () {\n            assert(lastTimerId === undefined || _this.containsDelayedOperation(lastTimerId), \"Attempted to drain to missing operation \" + lastTimerId);\n            // Run ops in the same order they'd run if they ran naturally.\n            _this.delayedOperations.sort(function (a, b) { return a.targetTimeMs - b.targetTimeMs; });\n            for (var _i = 0, _a = _this.delayedOperations; _i < _a.length; _i++) {\n                var op = _a[_i];\n                op.skipDelay();\n                if (lastTimerId !== undefined && op.timerId === lastTimerId) {\n                    break;\n                }\n            }\n            return _this.drain();\n        });\n    };\n    /** Called once a DelayedOperation is run or canceled. */\n    AsyncQueue.prototype.removeDelayedOperation = function (op) {\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n        var index = this.delayedOperations.indexOf(op);\n        assert(index >= 0, 'Delayed operation not found.');\n        this.delayedOperations.splice(index, 1);\n    };\n    return AsyncQueue;\n}());\nexport { AsyncQueue };\n\n//# sourceMappingURL=async_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/async_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { ReferenceSet } from '../local/reference_set';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { CurrentStatusUpdate, RemoteEvent } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport * as log from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\nimport { isNullOrUndefined } from '../util/types';\nimport { Query } from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { TargetIdGenerator } from './target_id_generator';\nimport { AddedLimboDocument, RemovedLimboDocument, View } from './view';\nvar LOG_TAG = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nvar QueryView = /** @class */ (function () {\n    function QueryView(\n    /**\n     * The query itself.\n     */\n    query, \n    /**\n     * The target number created by the client that is used in the watch\n     * stream to identify this query.\n     */\n    targetId, \n    /**\n     * An identifier from the datastore backend that indicates the last state\n     * of the results that was received. This can be used to indicate where\n     * to continue receiving new doc changes for the query.\n     */\n    resumeToken, \n    /**\n     * The view is responsible for computing the final merged truth of what\n     * docs are in the query. It gets notified of local and remote changes,\n     * and applies the query filters and limits to determine the most correct\n     * possible results.\n     */\n    view) {\n        this.query = query;\n        this.targetId = targetId;\n        this.resumeToken = resumeToken;\n        this.view = view;\n    }\n    return QueryView;\n}());\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nvar SyncEngine = /** @class */ (function () {\n    function SyncEngine(localStore, remoteStore, currentUser) {\n        this.localStore = localStore;\n        this.remoteStore = remoteStore;\n        this.currentUser = currentUser;\n        this.viewHandler = null;\n        this.errorHandler = null;\n        this.queryViewsByQuery = new ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.queryViewsByTarget = {};\n        this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);\n        this.limboKeysByTarget = {};\n        this.limboDocumentRefs = new ReferenceSet();\n        this.limboCollector = new EagerGarbageCollector();\n        /** Stores user completion handlers, indexed by User and BatchId. */\n        this.mutationUserCallbacks = {};\n        this.targetIdGenerator = TargetIdGenerator.forSyncEngine();\n    }\n    /** Subscribes view and error handler. Can be called only once. */\n    SyncEngine.prototype.subscribe = function (viewHandler, errorHandler) {\n        assert(viewHandler !== null && errorHandler !== null, 'View and error handlers cannot be null');\n        assert(this.viewHandler === null && this.errorHandler === null, 'SyncEngine already has a subscriber.');\n        this.viewHandler = viewHandler;\n        this.errorHandler = errorHandler;\n        this.limboCollector.addGarbageSource(this.limboDocumentRefs);\n    };\n    /**\n     * Initiates the new listen, resolves promise when listen enqueued to the\n     * server. All the subsequent view snapshots or errors are sent to the\n     * subscribed handlers. Returns the targetId of the query.\n     */\n    SyncEngine.prototype.listen = function (query) {\n        var _this = this;\n        this.assertSubscribed('listen()');\n        assert(!this.queryViewsByQuery.has(query), 'We already listen to the query: ' + query);\n        return this.localStore.allocateQuery(query).then(function (queryData) {\n            return _this.localStore\n                .executeQuery(query)\n                .then(function (docs) {\n                return _this.localStore\n                    .remoteDocumentKeys(queryData.targetId)\n                    .then(function (remoteKeys) {\n                    var view = new View(query, remoteKeys);\n                    var viewDocChanges = view.computeDocChanges(docs);\n                    var viewChange = view.applyChanges(viewDocChanges);\n                    assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');\n                    assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');\n                    var data = new QueryView(query, queryData.targetId, queryData.resumeToken, view);\n                    _this.queryViewsByQuery.set(query, data);\n                    _this.queryViewsByTarget[queryData.targetId] = data;\n                    _this.viewHandler([viewChange.snapshot]);\n                    _this.remoteStore.listen(queryData);\n                });\n            })\n                .then(function () {\n                return queryData.targetId;\n            });\n        });\n    };\n    /** Stops listening to the query. */\n    SyncEngine.prototype.unlisten = function (query) {\n        var _this = this;\n        this.assertSubscribed('unlisten()');\n        var queryView = this.queryViewsByQuery.get(query);\n        assert(!!queryView, 'Trying to unlisten on query not found:' + query);\n        return this.localStore.releaseQuery(query).then(function () {\n            _this.remoteStore.unlisten(queryView.targetId);\n            return _this.removeAndCleanupQuery(queryView).then(function () {\n                return _this.localStore.collectGarbage();\n            });\n        });\n    };\n    /**\n     * Initiates the write of local mutation batch which involves adding the\n     * writes to the mutation queue, notifying the remote store about new\n     * mutations and raising events for any changes this write caused.\n     *\n     * The promise returned by this call is resolved when the above steps\n     * have completed, *not* when the write was acked by the backend. The\n     * userCallback is resolved once the write was acked/rejected by the\n     * backend (or failed locally for any other reason).\n     */\n    SyncEngine.prototype.write = function (batch, userCallback) {\n        var _this = this;\n        this.assertSubscribed('write()');\n        return this.localStore\n            .localWrite(batch)\n            .then(function (result) {\n            _this.addMutationCallback(result.batchId, userCallback);\n            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);\n        })\n            .then(function () {\n            return _this.remoteStore.fillWritePipeline();\n        });\n    };\n    // TODO(klimt): Wrap the given error in a standard Firestore error object.\n    SyncEngine.prototype.wrapUpdateFunctionError = function (error) {\n        return error;\n    };\n    /**\n     * Takes an updateFunction in which a set of reads and writes can be performed\n     * atomically. In the updateFunction, the client can read and write values\n     * using the supplied transaction object. After the updateFunction, all\n     * changes will be committed. If some other client has changed any of the data\n     * referenced, then the updateFunction will be called again. If the\n     * updateFunction still fails after the given number of retries, then the\n     * transaction will be rejection.\n     *\n     * The transaction object passed to the updateFunction contains methods for\n     * accessing documents and collections. Unlike other datastore access, data\n     * accessed with the transaction will not reflect local changes that have not\n     * been committed. For this reason, it is required that all reads are\n     * performed before any writes. Transactions must be performed while online.\n     *\n     * The promise returned is resolved when the transaction is fully committed.\n     */\n    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {\n        var _this = this;\n        if (retries === void 0) { retries = 5; }\n        assert(retries >= 0, 'Got negative number of retries for transaction.');\n        var transaction = this.remoteStore.createTransaction();\n        var wrappedUpdateFunction = function () {\n            try {\n                var userPromise = updateFunction(transaction);\n                if (isNullOrUndefined(userPromise) ||\n                    !userPromise.catch ||\n                    !userPromise.then) {\n                    return Promise.reject(Error('Transaction callback must return a Promise'));\n                }\n                return userPromise.catch(function (e) {\n                    return Promise.reject(_this.wrapUpdateFunctionError(e));\n                });\n            }\n            catch (e) {\n                return Promise.reject(_this.wrapUpdateFunctionError(e));\n            }\n        };\n        return wrappedUpdateFunction().then(function (result) {\n            return transaction\n                .commit()\n                .then(function () {\n                return result;\n            })\n                .catch(function (error) {\n                if (retries === 0) {\n                    return Promise.reject(error);\n                }\n                // TODO(klimt): Put in a retry delay?\n                return _this.runTransaction(updateFunction, retries - 1);\n            });\n        });\n    };\n    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        this.assertSubscribed('applyRemoteEvent()');\n        // Make sure limbo documents are deleted if there were no results\n        objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, targetChange) {\n            var limboKey = _this.limboKeysByTarget[targetId];\n            if (limboKey &&\n                targetChange.currentStatusUpdate ===\n                    CurrentStatusUpdate.MarkCurrent &&\n                !remoteEvent.documentUpdates.get(limboKey)) {\n                // When listening to a query the server responds with a snapshot\n                // containing documents matching the query and a current marker\n                // telling us we're now in sync. It's possible for these to arrive\n                // as separate remote events or as a single remote event.\n                // For a document query, there will be no documents sent in the\n                // response if the document doesn't exist.\n                //\n                // If the snapshot arrives separately from the current marker,\n                // we handle it normally and updateTrackedLimbos will resolve the\n                // limbo status of the document, removing it from limboDocumentRefs.\n                // This works because clients only initiate limbo resolution when\n                // a target is current and because all current targets are\n                // always at a consistent snapshot.\n                //\n                // However, if the document doesn't exist and the current marker\n                // arrives, the document is not present in the snapshot and our\n                // normal view handling would consider the document to remain in\n                // limbo indefinitely because there are no updates to the document.\n                // To avoid this, we specially handle this just this case here:\n                // synthesizing a delete.\n                //\n                // TODO(dimond): Ideally we would have an explicit lookup query\n                // instead resulting in an explicit delete message and we could\n                // remove this special logic.\n                remoteEvent.addDocumentUpdate(new NoDocument(limboKey, remoteEvent.snapshotVersion));\n            }\n        });\n        return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n        });\n    };\n    /**\n     * Applies an OnlineState change to the sync engine and notifies any views of\n     * the change.\n     */\n    SyncEngine.prototype.applyOnlineStateChange = function (onlineState) {\n        var newViewSnapshots = [];\n        this.queryViewsByQuery.forEach(function (query, queryView) {\n            var viewChange = queryView.view.applyOnlineStateChange(onlineState);\n            assert(viewChange.limboChanges.length === 0, 'OnlineState should not affect limbo documents.');\n            if (viewChange.snapshot) {\n                newViewSnapshots.push(viewChange.snapshot);\n            }\n        });\n        this.viewHandler(newViewSnapshots);\n    };\n    SyncEngine.prototype.rejectListen = function (targetId, err) {\n        var _this = this;\n        this.assertSubscribed('rejectListens()');\n        var limboKey = this.limboKeysByTarget[targetId];\n        if (limboKey) {\n            // Since this query failed, we won't want to manually unlisten to it.\n            // So go ahead and remove it from bookkeeping.\n            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);\n            delete this.limboKeysByTarget[targetId];\n            // TODO(klimt): We really only should do the following on permission\n            // denied errors, but we don't have the cause code here.\n            // It's a limbo doc. Create a synthetic event saying it was deleted.\n            // This is kind of a hack. Ideally, we would have a method in the local\n            // store to purge a document. However, it would be tricky to keep all of\n            // the local store's invariants with another method.\n            var docMap = new SortedMap(DocumentKey.comparator);\n            docMap = docMap.insert(limboKey, new NoDocument(limboKey, SnapshotVersion.forDeletedDoc()));\n            var event_1 = new RemoteEvent(SnapshotVersion.MIN, {}, docMap);\n            return this.applyRemoteEvent(event_1);\n        }\n        else {\n            var queryView_1 = this.queryViewsByTarget[targetId];\n            assert(!!queryView_1, 'Unknown targetId: ' + targetId);\n            return this.localStore.releaseQuery(queryView_1.query).then(function () {\n                return _this.removeAndCleanupQuery(queryView_1).then(function () {\n                    _this.errorHandler(queryView_1.query, err);\n                });\n            });\n        }\n    };\n    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {\n        var _this = this;\n        this.assertSubscribed('applySuccessfulWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught\n        // up), so we raise user callbacks first so that they consistently happen\n        // before listen events.\n        this.processUserCallback(mutationBatchResult.batch.batchId, \n        /*error=*/ null);\n        return this.localStore\n            .acknowledgeBatch(mutationBatchResult)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {\n        var _this = this;\n        this.assertSubscribed('rejectFailedWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught up),\n        // so we raise user callbacks first so that they consistently happen before\n        // listen events.\n        this.processUserCallback(batchId, error);\n        return this.localStore.rejectBatch(batchId).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        if (!newCallbacks) {\n            newCallbacks = new SortedMap(primitiveComparator);\n        }\n        newCallbacks = newCallbacks.insert(batchId, callback);\n        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    };\n    /**\n     * Resolves or rejects the user callback for the given batch and then discards\n     * it.\n     */\n    SyncEngine.prototype.processUserCallback = function (batchId, error) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        // NOTE: Mutations restored from persistence won't have callbacks, so it's\n        // okay for there to be no callback for this ID.\n        if (newCallbacks) {\n            var callback = newCallbacks.get(batchId);\n            if (callback) {\n                assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');\n                if (error) {\n                    callback.reject(error);\n                }\n                else {\n                    callback.resolve();\n                }\n                newCallbacks = newCallbacks.remove(batchId);\n            }\n            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n        }\n    };\n    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {\n        this.queryViewsByQuery.delete(queryView.query);\n        delete this.queryViewsByTarget[queryView.targetId];\n        this.limboDocumentRefs.removeReferencesForId(queryView.targetId);\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {\n        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n            var limboChange = limboChanges_1[_i];\n            if (limboChange instanceof AddedLimboDocument) {\n                this.limboDocumentRefs.addReference(limboChange.key, targetId);\n                this.trackLimboChange(limboChange);\n            }\n            else if (limboChange instanceof RemovedLimboDocument) {\n                log.debug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n                this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n            }\n            else {\n                fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n            }\n        }\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.trackLimboChange = function (limboChange) {\n        var key = limboChange.key;\n        if (!this.limboTargetsByKey.get(key)) {\n            log.debug(LOG_TAG, 'New document in limbo: ' + key);\n            var limboTargetId = this.targetIdGenerator.next();\n            var query = Query.atPath(key.path);\n            this.limboKeysByTarget[limboTargetId] = key;\n            this.remoteStore.listen(new QueryData(query, limboTargetId, QueryPurpose.Listen));\n            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);\n        }\n    };\n    SyncEngine.prototype.gcLimboDocuments = function () {\n        var _this = this;\n        // HACK: We can use a null transaction here, because we know that the\n        // reference set is entirely within memory and doesn't need a store engine.\n        return this.limboCollector\n            .collectGarbage(null)\n            .next(function (keys) {\n            keys.forEach(function (key) {\n                var limboTargetId = _this.limboTargetsByKey.get(key);\n                if (limboTargetId === null) {\n                    // This target already got removed, because the query failed.\n                    return;\n                }\n                _this.remoteStore.unlisten(limboTargetId);\n                _this.limboTargetsByKey = _this.limboTargetsByKey.remove(key);\n                delete _this.limboKeysByTarget[limboTargetId];\n            });\n        })\n            .toPromise();\n    };\n    // Visible for testing\n    SyncEngine.prototype.currentLimboDocs = function () {\n        return this.limboTargetsByKey;\n    };\n    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {\n        var _this = this;\n        var newSnaps = [];\n        var docChangesInAllViews = [];\n        var queriesProcessed = [];\n        this.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(Promise.resolve()\n                .then(function () {\n                var viewDocChanges = queryView.view.computeDocChanges(changes);\n                if (!viewDocChanges.needsRefill) {\n                    return viewDocChanges;\n                }\n                // The query has a limit and some docs were removed, so we need\n                // to re-run the query against the local store to make sure we\n                // didn't lose any good docs that had been past the limit.\n                return _this.localStore.executeQuery(queryView.query).then(function (docs) {\n                    return queryView.view.computeDocChanges(docs, viewDocChanges);\n                });\n            })\n                .then(function (viewDocChanges) {\n                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];\n                var viewChange = queryView.view.applyChanges(viewDocChanges, targetChange);\n                return _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges).then(function () {\n                    if (viewChange.snapshot) {\n                        newSnaps.push(viewChange.snapshot);\n                        var docChanges = LocalViewChanges.fromSnapshot(viewChange.snapshot);\n                        docChangesInAllViews.push(docChanges);\n                    }\n                });\n            }));\n        });\n        return Promise.all(queriesProcessed)\n            .then(function () {\n            _this.viewHandler(newSnaps);\n            return _this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n        })\n            .then(function () {\n            return _this.localStore.collectGarbage();\n        });\n    };\n    SyncEngine.prototype.assertSubscribed = function (fnName) {\n        assert(this.viewHandler !== null && this.errorHandler !== null, 'Trying to call ' + fnName + ' before calling subscribe().');\n    };\n    SyncEngine.prototype.handleUserChange = function (user) {\n        var _this = this;\n        this.currentUser = user;\n        return this.localStore\n            .handleUserChange(user)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        })\n            .then(function () {\n            return _this.remoteStore.handleUserChange(user);\n        });\n    };\n    return SyncEngine;\n}());\nexport { SyncEngine };\n\n//# sourceMappingURL=sync_engine.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/sync_engine.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet, documentVersionMap } from './collections';\nimport { assert } from '../util/assert';\nimport * as misc from '../util/misc';\nexport var BATCHID_UNKNOWN = -1;\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nvar MutationBatch = /** @class */ (function () {\n    function MutationBatch(batchId, localWriteTime, mutations) {\n        this.batchId = batchId;\n        this.localWriteTime = localWriteTime;\n        this.mutations = mutations;\n    }\n    /**\n     * Applies all the mutations in this MutationBatch to the specified document\n     * to create a new remote document\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     * @param batchResult The result of applying the MutationBatch to the\n     * backend.\n     */\n    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(docKey), \"applyToRemoteDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var mutationResults = batchResult.mutationResults;\n        assert(mutationResults.length === this.mutations.length, \"Mismatch between mutations length\\n      (\" + this.mutations.length + \") and mutation results length\\n      (\" + mutationResults.length + \").\");\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.isEqual(docKey)) {\n                var mutationResult = mutationResults[i];\n                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n            }\n        }\n        return maybeDoc;\n    };\n    /**\n     * Computes the local view of a document given all the mutations in this\n     * batch.\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     */\n    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.isEqual(docKey), \"applyToLocalDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var baseDoc = maybeDoc;\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.isEqual(docKey)) {\n                maybeDoc = mutation.applyToLocalView(maybeDoc, baseDoc, this.localWriteTime);\n            }\n        }\n        return maybeDoc;\n    };\n    MutationBatch.prototype.keys = function () {\n        var keySet = documentKeySet();\n        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {\n            var mutation = _a[_i];\n            keySet = keySet.add(mutation.key);\n        }\n        return keySet;\n    };\n    MutationBatch.prototype.isEqual = function (other) {\n        return (this.batchId === other.batchId &&\n            misc.arrayEquals(this.mutations, other.mutations));\n    };\n    /**\n     * Returns true if this mutation batch has already been removed from the\n     * mutation queue.\n     *\n     * Note that not all implementations of the MutationQueue necessarily use\n     * tombstones as part of their implementation and generally speaking no code\n     * outside the mutation queues should really care about this.\n     */\n    MutationBatch.prototype.isTombstone = function () {\n        return this.mutations.length === 0;\n    };\n    /** Converts this batch into a tombstone */\n    MutationBatch.prototype.toTombstone = function () {\n        return new MutationBatch(this.batchId, this.localWriteTime, []);\n    };\n    return MutationBatch;\n}());\nexport { MutationBatch };\n/** The result of applying a mutation batch to the backend. */\nvar MutationBatchResult = /** @class */ (function () {\n    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, \n    /**\n     * A pre-computed mapping from each mutated document to the resulting\n     * version.\n     */\n    docVersions) {\n        this.batch = batch;\n        this.commitVersion = commitVersion;\n        this.mutationResults = mutationResults;\n        this.streamToken = streamToken;\n        this.docVersions = docVersions;\n    }\n    /**\n     * Creates a new MutationBatchResult for the given batch and results. There\n     * must be one result for each mutation in the batch. This static factory\n     * caches a document=>version mapping (docVersions).\n     */\n    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {\n        assert(batch.mutations.length === results.length, 'Mutations sent ' +\n            batch.mutations.length +\n            ' must equal results received ' +\n            results.length);\n        var versionMap = documentVersionMap();\n        var mutations = batch.mutations;\n        for (var i = 0; i < mutations.length; i++) {\n            var version = results[i].version;\n            if (version === null) {\n                // deletes don't have a version, so we substitute the commitVersion\n                // of the entire batch.\n                version = commitVersion;\n            }\n            versionMap = versionMap.insert(mutations[i].key, version);\n        }\n        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);\n    };\n    return MutationBatchResult;\n}());\nexport { MutationBatchResult };\n\n//# sourceMappingURL=mutation_batch.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/mutation_batch.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbQueryCache } from './indexeddb_query_cache';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { ALL_STORES, DbOwner } from './indexeddb_schema';\nimport { createOrUpgradeDb, SCHEMA_VERSION } from './indexeddb_schema';\nimport { LocalSerializer } from './local_serializer';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDb } from './simple_db';\nvar LOG_TAG = 'IndexedDbPersistence';\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nvar OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nvar OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nvar ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nvar EXISTING_OWNER_ERROR_MSG = 'There is another tab open with offline' +\n    ' persistence enabled. Only one such tab is allowed at a time. The' +\n    ' other tab must be closed or persistence must be disabled.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +\n    ' IndexedDB or is known to have an incomplete implementation. Offline' +\n    ' persistence has been disabled.';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nvar IndexedDbPersistence = /** @class */ (function () {\n    function IndexedDbPersistence(prefix, serializer) {\n        this.ownerId = this.generateOwnerId();\n        this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n        this.serializer = new LocalSerializer(serializer);\n        this.localStoragePrefix = prefix;\n    }\n    IndexedDbPersistence.prototype.start = function () {\n        var _this = this;\n        if (!IndexedDbPersistence.isAvailable()) {\n            this.persistenceError = new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n            return Promise.reject(this.persistenceError);\n        }\n        assert(!this.started, 'IndexedDbPersistence double-started!');\n        this.started = true;\n        return SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, createOrUpgradeDb)\n            .then(function (db) {\n            _this.simpleDb = db;\n        })\n            .then(function () { return _this.tryAcquireOwnerLease(); })\n            .then(function () {\n            _this.scheduleOwnerLeaseRefreshes();\n            _this.attachWindowUnloadHook();\n        });\n    };\n    IndexedDbPersistence.prototype.shutdown = function () {\n        var _this = this;\n        assert(this.started, 'IndexedDbPersistence shutdown without start!');\n        this.started = false;\n        this.detachWindowUnloadHook();\n        this.stopOwnerLeaseRefreshes();\n        return this.releaseOwnerLease().then(function () {\n            _this.simpleDb.close();\n        });\n    };\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n        return IndexedDbMutationQueue.forUser(user, this.serializer);\n    };\n    IndexedDbPersistence.prototype.getQueryCache = function () {\n        return new IndexedDbQueryCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n        return new IndexedDbRemoteDocumentCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.runTransaction = function (action, operation) {\n        var _this = this;\n        if (this.persistenceError) {\n            return Promise.reject(this.persistenceError);\n        }\n        log.debug(LOG_TAG, 'Starting transaction:', action);\n        // Do all transactions as readwrite against all object stores, since we\n        // are the only reader/writer.\n        return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {\n            // Verify that we still have the owner lease as part of every transaction.\n            return _this.ensureOwnerLease(txn).next(function () { return operation(txn); });\n        });\n    };\n    IndexedDbPersistence.isAvailable = function () {\n        return SimpleDb.isAvailable();\n    };\n    /**\n     * Generates a string used as a prefix when storing data in IndexedDB and\n     * LocalStorage.\n     */\n    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {\n        // Use two different prefix formats:\n        //\n        //   * firestore / persistenceKey / projectID . databaseID / ...\n        //   * firestore / persistenceKey / projectID / ...\n        //\n        // projectIDs are DNS-compatible names and cannot contain dots\n        // so there's no danger of collisions.\n        var database = databaseInfo.databaseId.projectId;\n        if (!databaseInfo.databaseId.isDefaultDatabase) {\n            database += '.' + databaseInfo.databaseId.database;\n        }\n        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n    };\n    /**\n     * Acquires the owner lease if there's no valid owner. Else returns a rejected\n     * promise.\n     */\n    IndexedDbPersistence.prototype.tryAcquireOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (!_this.validOwner(dbOwner)) {\n                    var newDbOwner = new DbOwner(_this.ownerId, Date.now());\n                    log.debug(LOG_TAG, 'No valid owner. Acquiring owner lease. Current owner:', dbOwner, 'New owner:', newDbOwner);\n                    return store.put('owner', newDbOwner);\n                }\n                else {\n                    log.debug(LOG_TAG, 'Valid owner already. Failing. Current owner:', dbOwner);\n                    _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                    return PersistencePromise.reject(_this.persistenceError);\n                }\n            });\n        });\n    };\n    /** Checks the owner lease and deletes it if we are the current owner. */\n    IndexedDbPersistence.prototype.releaseOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (dbOwner !== null && dbOwner.ownerId === _this.ownerId) {\n                    log.debug(LOG_TAG, 'Releasing owner lease.');\n                    return store.delete('owner');\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Checks the owner lease and returns a rejected promise if we are not the\n     * current owner. This should be included in every transaction to guard\n     * against losing the owner lease.\n     */\n    IndexedDbPersistence.prototype.ensureOwnerLease = function (txn) {\n        var _this = this;\n        var store = txn.store(DbOwner.store);\n        return store.get('owner').next(function (dbOwner) {\n            if (dbOwner === null || dbOwner.ownerId !== _this.ownerId) {\n                _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                return PersistencePromise.reject(_this.persistenceError);\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns true if the provided owner exists, has a recent timestamp, and\n     * isn't zombied.\n     *\n     * NOTE: To determine if the owner is zombied, this method reads from\n     * LocalStorage which could be mildly expensive.\n     */\n    IndexedDbPersistence.prototype.validOwner = function (dbOwner) {\n        var now = Date.now();\n        var minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n        var maxAcceptable = now;\n        if (dbOwner === null) {\n            return false; // no owner.\n        }\n        else if (dbOwner.leaseTimestampMs < minAcceptable) {\n            return false; // owner lease has expired.\n        }\n        else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n            log.error('Persistence owner-lease is in the future. Discarding.', dbOwner);\n            return false;\n        }\n        else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n            return false; // owner's tab closed.\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Schedules a recurring timer to update the owner lease timestamp to prevent\n     * other tabs from taking the lease.\n     */\n    IndexedDbPersistence.prototype.scheduleOwnerLeaseRefreshes = function () {\n        var _this = this;\n        // NOTE: This doesn't need to be scheduled on the async queue and doing so\n        // would increase the chances of us not refreshing on time if the queue is\n        // backed up for some reason.\n        this.ownerLeaseRefreshHandle = setInterval(function () {\n            var txResult = _this.runTransaction('Refresh owner timestamp', function (txn) {\n                // NOTE: We don't need to validate the current owner contents, since\n                // runTransaction does that automatically.\n                var store = txn.store(DbOwner.store);\n                return store.put('owner', new DbOwner(_this.ownerId, Date.now()));\n            });\n            txResult.catch(function (reason) {\n                // Probably means we lost the lease. Report the error and stop trying to\n                // refresh the lease.\n                log.error(reason);\n                _this.stopOwnerLeaseRefreshes();\n            });\n        }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n    };\n    IndexedDbPersistence.prototype.stopOwnerLeaseRefreshes = function () {\n        if (this.ownerLeaseRefreshHandle) {\n            clearInterval(this.ownerLeaseRefreshHandle);\n            this.ownerLeaseRefreshHandle = null;\n        }\n    };\n    /**\n     * Attaches a window.unload handler that will synchronously write our\n     * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n     * by tabs trying to acquire the lease to determine that the lease should be\n     * acquired immediately even if the timestamp is recent. This is particularly\n     * important for the refresh case (so the tab correctly re-acquires the owner\n     * lease). LocalStorage is used for this rather than IndexedDb because it is\n     * a synchronous API and so can be used reliably from an unload handler.\n     */\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n        var _this = this;\n        this.windowUnloadHandler = function () {\n            // Record that we're zombied.\n            _this.setZombiedOwnerId(_this.ownerId);\n            // Attempt graceful shutdown (including releasing our owner lease), but\n            // there's no guarantee it will complete.\n            _this.shutdown();\n        };\n        window.addEventListener('unload', this.windowUnloadHandler);\n    };\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n        if (this.windowUnloadHandler) {\n            window.removeEventListener('unload', this.windowUnloadHandler);\n            this.windowUnloadHandler = null;\n        }\n    };\n    /**\n     * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n     * zombied due to their tab closing) from LocalStorage, or null if no such\n     * record exists.\n     */\n    IndexedDbPersistence.prototype.getZombiedOwnerId = function () {\n        try {\n            var zombiedOwnerId = window.localStorage.getItem(this.zombiedOwnerLocalStorageKey());\n            log.debug(LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n            return zombiedOwnerId;\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log.error('Failed to get zombie owner id.', e);\n            return null;\n        }\n    };\n    /**\n     * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n     * or, if passed null, deletes any recorded zombied owner.\n     */\n    IndexedDbPersistence.prototype.setZombiedOwnerId = function (zombieOwnerId) {\n        try {\n            if (zombieOwnerId === null) {\n                window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n            }\n            else {\n                window.localStorage.setItem(this.zombiedOwnerLocalStorageKey(), zombieOwnerId);\n            }\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log.error('Failed to set zombie owner id.', e);\n        }\n    };\n    IndexedDbPersistence.prototype.zombiedOwnerLocalStorageKey = function () {\n        return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n    };\n    IndexedDbPersistence.prototype.generateOwnerId = function () {\n        // For convenience, just use an AutoId.\n        return AutoId.newId();\n    };\n    /**\n     * The name of the main (and currently only) IndexedDB database. this name is\n     * appended to the prefix provided to the IndexedDbPersistence constructor.\n     */\n    IndexedDbPersistence.MAIN_DATABASE = 'main';\n    return IndexedDbPersistence;\n}());\nexport { IndexedDbPersistence };\n\n//# sourceMappingURL=indexeddb_persistence.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_persistence.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet, documentMap, maybeDocumentMap } from '../model/collections';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nvar LocalDocumentsView = /** @class */ (function () {\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.mutationQueue = mutationQueue;\n    }\n    /**\n     * Get the local view of the document identified by `key`.\n     *\n     * @return Local view of the document or null if we don't have any cached\n     * state for it.\n     */\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n        var _this = this;\n        return this.remoteDocumentCache\n            .getEntry(transaction, key)\n            .next(function (remoteDoc) {\n            return _this.computeLocalDocument(transaction, key, remoteDoc);\n        });\n    };\n    /**\n     * Gets the local view of the documents identified by `keys`.\n     *\n     * If we don't have cached state for a document in `keys`, a NoDocument will\n     * be stored for that key in the resulting set.\n     */\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n        var _this = this;\n        var promises = [];\n        var results = maybeDocumentMap();\n        keys.forEach(function (key) {\n            promises.push(_this.getDocument(transaction, key).next(function (maybeDoc) {\n                // TODO(http://b/32275378): Don't conflate missing / deleted.\n                if (!maybeDoc) {\n                    maybeDoc = new NoDocument(key, SnapshotVersion.forDeletedDoc());\n                }\n                results = results.insert(key, maybeDoc);\n            }));\n        });\n        return PersistencePromise.waitFor(promises).next(function () { return results; });\n    };\n    /** Performs a query against the local view of all documents. */\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        if (DocumentKey.isDocumentKey(query.path)) {\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n        }\n        else {\n            return this.getDocumentsMatchingCollectionQuery(transaction, query);\n        }\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n        // Just do a simple document lookup.\n        return this.getDocument(transaction, new DocumentKey(docPath)).next(function (maybeDoc) {\n            var result = documentMap();\n            if (maybeDoc instanceof Document) {\n                result = result.insert(maybeDoc.key, maybeDoc);\n            }\n            return result;\n        });\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {\n        var _this = this;\n        // Query the remote documents and overlay mutations.\n        // TODO(mikelehen): There may be significant overlap between the mutations\n        // affecting these remote documents and the\n        // getAllMutationBatchesAffectingQuery() mutations. Consider optimizing.\n        var results;\n        return this.remoteDocumentCache\n            .getDocumentsMatchingQuery(transaction, query)\n            .next(function (queryResults) {\n            return _this.computeLocalDocuments(transaction, queryResults);\n        })\n            .next(function (promisedResults) {\n            results = promisedResults;\n            // Now use the mutation queue to discover any other documents that may\n            // match the query after applying mutations.\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n        })\n            .next(function (matchingMutationBatches) {\n            var matchingKeys = documentKeySet();\n            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n                var batch = matchingMutationBatches_1[_i];\n                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                    var mutation = _b[_a];\n                    // TODO(mikelehen): PERF: Check if this mutation actually\n                    // affects the query to reduce work.\n                    if (!results.get(mutation.key)) {\n                        matchingKeys = matchingKeys.add(mutation.key);\n                    }\n                }\n            }\n            // Now add in the results for the matchingKeys.\n            var promises = [];\n            matchingKeys.forEach(function (key) {\n                promises.push(_this.getDocument(transaction, key).next(function (doc) {\n                    if (doc instanceof Document) {\n                        results = results.insert(doc.key, doc);\n                    }\n                }));\n            });\n            return PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            // Finally, filter out any documents that don't actually match\n            // the query.\n            results.forEach(function (key, doc) {\n                if (!query.matches(doc)) {\n                    results = results.remove(key);\n                }\n            });\n            return results;\n        });\n    };\n    /**\n     * Takes a remote document and applies local mutations to generate the local\n     * view of the document.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the document (necessary when remoteDocument\n     *     is null).\n     * @param document The base remote document to apply mutations to or null.\n     */\n    LocalDocumentsView.prototype.computeLocalDocument = function (transaction, documentKey, document) {\n        return this.mutationQueue\n            .getAllMutationBatchesAffectingDocumentKey(transaction, documentKey)\n            .next(function (batches) {\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n                var batch = batches_1[_i];\n                document = batch.applyToLocalView(documentKey, document);\n            }\n            return document;\n        });\n    };\n    /**\n     * Takes a set of remote documents and applies local mutations to generate the\n     * local view of the documents.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documents The base remote documents to apply mutations to.\n     * @return The local view of the documents.\n     */\n    LocalDocumentsView.prototype.computeLocalDocuments = function (transaction, documents) {\n        var _this = this;\n        var promises = [];\n        documents.forEach(function (key, doc) {\n            promises.push(_this.computeLocalDocument(transaction, key, doc).next(function (mutatedDoc) {\n                if (mutatedDoc instanceof Document) {\n                    documents = documents.insert(mutatedDoc.key, mutatedDoc);\n                }\n                else if (mutatedDoc instanceof NoDocument) {\n                    documents = documents.remove(mutatedDoc.key);\n                }\n                else {\n                    fail('Unknown MaybeDocument: ' + mutatedDoc);\n                }\n            }));\n        });\n        return PersistencePromise.waitFor(promises).next(function () { return documents; });\n    };\n    return LocalDocumentsView;\n}());\nexport { LocalDocumentsView };\n\n//# sourceMappingURL=local_documents_view.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_documents_view.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { assert } from '../util/assert';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nvar RemoteDocumentChangeBuffer = /** @class */ (function () {\n    function RemoteDocumentChangeBuffer(remoteDocumentCache) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.changes = maybeDocumentMap();\n    }\n    /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {\n        var changes = this.assertChanges();\n        this.changes = changes.insert(maybeDocument.key, maybeDocument);\n    };\n    // NOTE: removeEntry() is not presently necessary and so is omitted.\n    /**\n     * Looks up an entry in the cache. The buffered changes will first be checked,\n     * and if no buffered change applies, this will forward to\n     * `RemoteDocumentCache.getEntry()`.\n     *\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the entry to look up.\n     * @return The cached Document or NoDocument entry, or null if we have nothing\n     * cached.\n     */\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n        var changes = this.assertChanges();\n        var bufferedEntry = changes.get(documentKey);\n        if (bufferedEntry) {\n            return PersistencePromise.resolve(bufferedEntry);\n        }\n        else {\n            return this.remoteDocumentCache.getEntry(transaction, documentKey);\n        }\n    };\n    /**\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\n     * the provided transaction.\n     */\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n        var _this = this;\n        var changes = this.assertChanges();\n        var promises = [];\n        changes.forEach(function (key, maybeDoc) {\n            promises.push(_this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n        });\n        // We should not be used to buffer any more changes.\n        this.changes = null;\n        return PersistencePromise.waitFor(promises);\n    };\n    /** Helper to assert this.changes is not null and return it. */\n    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {\n        assert(this.changes !== null, 'Changes have already been applied.');\n        return this.changes;\n    };\n    return RemoteDocumentChangeBuffer;\n}());\nexport { RemoteDocumentChangeBuffer };\n\n//# sourceMappingURL=remote_document_change_buffer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/remote_document_change_buffer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { Timestamp } from '../core/timestamp';\nimport { documentKeySet } from '../model/collections';\nimport { BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { ResetMapping, UpdateMapping } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport * as log from '../util/log';\nimport * as objUtils from '../util/obj';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistencePromise } from './persistence_promise';\nimport { QueryData, QueryPurpose } from './query_data';\nimport { ReferenceSet } from './reference_set';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nvar LOG_TAG = 'LocalStore';\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nvar LocalStore = /** @class */ (function () {\n    function LocalStore(\n    /** Manages our in-memory or durable persistence. */\n    persistence, initialUser, \n    /**\n     * The garbage collector collects documents that should no longer be\n     * cached (e.g. if they are no longer retained by the above reference sets\n     * and the garbage collector is performing eager collection).\n     */\n    garbageCollector) {\n        this.persistence = persistence;\n        this.garbageCollector = garbageCollector;\n        /**\n         * The set of document references maintained by any local views.\n         */\n        this.localViewReferences = new ReferenceSet();\n        /** Maps a targetID to data about its query. */\n        this.targetIds = {};\n        /** Used to generate targetIDs for queries tracked locally. */\n        this.targetIdGenerator = TargetIdGenerator.forLocalStore();\n        /**\n         * A heldBatchResult is a mutation batch result (from a write acknowledgement)\n         * that arrived before the watch stream got notified of a snapshot that\n         * includes the write. So we \"hold\" it until the watch stream catches up. It\n         * ensures that the local write remains visible (latency compensation) and\n         * doesn't temporarily appear reverted because the watch stream is slower than\n         * the write stream and so wasn't reflecting it.\n         *\n         * NOTE: Eventually we want to move this functionality into the remote store.\n         */\n        this.heldBatchResults = [];\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\n        this.queryCache = persistence.getQueryCache();\n        this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue);\n        this.garbageCollector.addGarbageSource(this.localViewReferences);\n        this.garbageCollector.addGarbageSource(this.queryCache);\n        this.garbageCollector.addGarbageSource(this.mutationQueue);\n    }\n    /** Performs any initial startup actions required by the local store. */\n    LocalStore.prototype.start = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Start LocalStore', function (txn) {\n            return _this.startMutationQueue(txn).next(function () { return _this.startQueryCache(txn); });\n        });\n    };\n    /**\n     * Tells the LocalStore that the currently authenticated user has changed.\n     *\n     * In response the local store switches the mutation queue to the new user and\n     * returns any resulting document changes.\n     */\n    LocalStore.prototype.handleUserChange = function (user) {\n        var _this = this;\n        return this.persistence.runTransaction('Handle user change', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return _this.mutationQueue\n                .getAllMutationBatches(txn)\n                .next(function (promisedOldBatches) {\n                oldBatches = promisedOldBatches;\n                _this.garbageCollector.removeGarbageSource(_this.mutationQueue);\n                _this.mutationQueue = _this.persistence.getMutationQueue(user);\n                _this.garbageCollector.addGarbageSource(_this.mutationQueue);\n                return _this.startMutationQueue(txn);\n            })\n                .next(function () {\n                // Recreate our LocalDocumentsView using the new\n                // MutationQueue.\n                _this.localDocuments = new LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue);\n                return _this.mutationQueue.getAllMutationBatches(txn);\n            })\n                .next(function (newBatches) {\n                // Union the old/new changed keys.\n                var changedKeys = documentKeySet();\n                for (var _i = 0, _a = [oldBatches, newBatches]; _i < _a.length; _i++) {\n                    var batches = _a[_i];\n                    for (var _b = 0, batches_1 = batches; _b < batches_1.length; _b++) {\n                        var batch = batches_1[_b];\n                        for (var _c = 0, _d = batch.mutations; _c < _d.length; _c++) {\n                            var mutation = _d[_c];\n                            changedKeys = changedKeys.add(mutation.key);\n                        }\n                    }\n                }\n                // Return the set of all (potentially) changed documents as the\n                // result of the user change.\n                return _this.localDocuments.getDocuments(txn, changedKeys);\n            });\n        });\n    };\n    LocalStore.prototype.startQueryCache = function (txn) {\n        var _this = this;\n        return this.queryCache.start(txn).next(function () {\n            var targetId = _this.queryCache.getHighestTargetId();\n            _this.targetIdGenerator = TargetIdGenerator.forLocalStore(targetId);\n        });\n    };\n    LocalStore.prototype.startMutationQueue = function (txn) {\n        var _this = this;\n        return this.mutationQueue\n            .start(txn)\n            .next(function () {\n            // If we have any leftover mutation batch results from a prior run,\n            // just drop them.\n            // TODO(http://b/33446471): We probably need to repopulate\n            // heldBatchResults or similar instead, but that is not\n            // straightforward since we're not persisting the write ack versions.\n            _this.heldBatchResults = [];\n            return _this.mutationQueue.getHighestAcknowledgedBatchId(txn);\n        })\n            .next(function (highestAck) {\n            // TODO(mikelehen): This is the only usage of\n            // getAllMutationBatchesThroughBatchId(). Consider removing it in\n            // favor of a getAcknowledgedBatches() method.\n            if (highestAck !== BATCHID_UNKNOWN) {\n                return _this.mutationQueue.getAllMutationBatchesThroughBatchId(txn, highestAck);\n            }\n            else {\n                return PersistencePromise.resolve([]);\n            }\n        })\n            .next(function (ackedBatches) {\n            if (ackedBatches.length > 0) {\n                return _this.mutationQueue.removeMutationBatches(txn, ackedBatches);\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /* Accept locally generated Mutations and commit them to storage. */\n    LocalStore.prototype.localWrite = function (mutations) {\n        var _this = this;\n        return this.persistence.runTransaction('Locally write mutations', function (txn) {\n            var batch;\n            var localWriteTime = Timestamp.now();\n            return _this.mutationQueue\n                .addMutationBatch(txn, localWriteTime, mutations)\n                .next(function (promisedBatch) {\n                batch = promisedBatch;\n                // TODO(koss): This is doing an N^2 update by replaying ALL the\n                // mutations on each document (instead of just the ones added) in\n                // this batch.\n                var keys = batch.keys();\n                return _this.localDocuments.getDocuments(txn, keys);\n            })\n                .next(function (changedDocuments) {\n                return { batchId: batch.batchId, changes: changedDocuments };\n            });\n        });\n    };\n    /**\n     * Acknowledge the given batch.\n     *\n     * On the happy path when a batch is acknowledged, the local store will\n     *\n     *  + remove the batch from the mutation queue;\n     *  + apply the changes to the remote document cache;\n     *  + recalculate the latency compensated view implied by those changes (there\n     *    may be mutations in the queue that affect the documents but haven't been\n     *    acknowledged yet); and\n     *  + give the changed documents back the sync engine\n     *\n     * @returns The resulting (modified) documents.\n     */\n    LocalStore.prototype.acknowledgeBatch = function (batchResult) {\n        var _this = this;\n        return this.persistence.runTransaction('Acknowledge batch', function (txn) {\n            var affected;\n            return _this.mutationQueue\n                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n                .next(function () {\n                if (_this.shouldHoldBatchResult(batchResult.commitVersion)) {\n                    _this.heldBatchResults.push(batchResult);\n                    affected = documentKeySet();\n                    return PersistencePromise.resolve();\n                }\n                else {\n                    var documentBuffer_1 = new RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseBatchResults(txn, [batchResult], documentBuffer_1).next(function (promisedAffectedKeys) {\n                        affected = promisedAffectedKeys;\n                        return documentBuffer_1.apply(txn);\n                    });\n                }\n            })\n                .next(function () {\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affected);\n            });\n        });\n    };\n    /**\n     * Remove mutations from the MutationQueue for the specified batch;\n     * LocalDocuments will be recalculated.\n     *\n     * @returns The resulting modified documents.\n     */\n    LocalStore.prototype.rejectBatch = function (batchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Reject batch', function (txn) {\n            var toReject;\n            var affectedKeys;\n            return _this.mutationQueue\n                .lookupMutationBatch(txn, batchId)\n                .next(function (promisedToReject) {\n                assert(promisedToReject != null, 'Attempt to reject nonexistent batch!');\n                toReject = promisedToReject;\n                return _this.mutationQueue\n                    .getHighestAcknowledgedBatchId(txn)\n                    .next(function (lastAcked) {\n                    assert(batchId > lastAcked, \"Acknowledged batches can't be rejected.\");\n                    return toReject;\n                });\n            })\n                .next(function () {\n                return _this.removeMutationBatch(txn, toReject);\n            })\n                .next(function (promisedAffectedKeys) {\n                affectedKeys = promisedAffectedKeys;\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affectedKeys);\n            });\n        });\n    };\n    /** Returns the last recorded stream token for the current user. */\n    LocalStore.prototype.getLastStreamToken = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Get last stream token', function (txn) {\n            return _this.mutationQueue.getLastStreamToken(txn);\n        });\n    };\n    /**\n     * Sets the stream token for the current user without acknowledging any\n     * mutation batch. This is usually only useful after a stream handshake or in\n     * response to an error that requires clearing the stream token.\n     */\n    LocalStore.prototype.setLastStreamToken = function (streamToken) {\n        var _this = this;\n        return this.persistence.runTransaction('Set last stream token', function (txn) {\n            return _this.mutationQueue.setLastStreamToken(txn, streamToken);\n        });\n    };\n    /**\n     * Returns the last consistent snapshot processed (used by the RemoteStore to\n     * determine whether to buffer incoming snapshots from the backend).\n     */\n    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.queryCache.getLastRemoteSnapshotVersion();\n    };\n    /**\n     * Update the \"ground-state\" (remote) documents. We assume that the remote\n     * event reflects any write batches that have been acknowledged or rejected\n     * (i.e. we do not re-apply local mutations to updates from this event).\n     *\n     * LocalDocuments are re-calculated if there are remaining mutations in the\n     * queue.\n     */\n    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        var documentBuffer = new RemoteDocumentChangeBuffer(this.remoteDocuments);\n        return this.persistence.runTransaction('Apply remote event', function (txn) {\n            var promises = [];\n            objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                // Do not ref/unref unassigned targetIds - it may lead to leaks.\n                var queryData = _this.targetIds[targetId];\n                if (!queryData)\n                    return;\n                var mapping = change.mapping;\n                if (mapping) {\n                    // First make sure that all references are deleted\n                    if (mapping instanceof ResetMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeysForTargetId(txn, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.documents, targetId);\n                        }));\n                    }\n                    else if (mapping instanceof UpdateMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeys(txn, mapping.removedDocuments, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.addedDocuments, targetId);\n                        }));\n                    }\n                    else {\n                        return fail('Unknown mapping type: ' + JSON.stringify(mapping));\n                    }\n                }\n                // Update the resume token if the change includes one. Don't clear\n                // any preexisting value.\n                var resumeToken = change.resumeToken;\n                if (resumeToken.length > 0) {\n                    queryData = queryData.update({\n                        resumeToken: resumeToken,\n                        snapshotVersion: change.snapshotVersion\n                    });\n                    _this.targetIds[targetId] = queryData;\n                    promises.push(_this.queryCache.addQueryData(txn, queryData));\n                }\n            });\n            var changedDocKeys = documentKeySet();\n            remoteEvent.documentUpdates.forEach(function (key, doc) {\n                changedDocKeys = changedDocKeys.add(key);\n                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {\n                    // Make sure we don't apply an old document version to the remote\n                    // cache, though we make an exception for SnapshotVersion.MIN which\n                    // can happen for manufactured events (e.g. in the case of a limbo\n                    // document resolution failing).\n                    if (existingDoc == null ||\n                        doc.version.isEqual(SnapshotVersion.MIN) ||\n                        doc.version.compareTo(existingDoc.version) >= 0) {\n                        documentBuffer.addEntry(doc);\n                    }\n                    else {\n                        log.debug(LOG_TAG, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n                    }\n                    // The document might be garbage because it was unreferenced by\n                    // everything. Make sure to mark it as garbage if it is...\n                    _this.garbageCollector.addPotentialGarbageKey(key);\n                }));\n            });\n            // HACK: The only reason we allow a null snapshot version is so that we\n            // can synthesize remote events when we get permission denied errors while\n            // trying to resolve the state of a locally cached document that is in\n            // limbo.\n            var lastRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion();\n            var remoteVersion = remoteEvent.snapshotVersion;\n            if (!remoteVersion.isEqual(SnapshotVersion.MIN)) {\n                assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +\n                    remoteVersion +\n                    ' < ' +\n                    lastRemoteVersion);\n                promises.push(_this.queryCache.setLastRemoteSnapshotVersion(txn, remoteVersion));\n            }\n            var releasedWriteKeys;\n            return PersistencePromise.waitFor(promises)\n                .next(function () { return _this.releaseHeldBatchResults(txn, documentBuffer); })\n                .next(function (promisedReleasedWriteKeys) {\n                releasedWriteKeys = promisedReleasedWriteKeys;\n                return documentBuffer.apply(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, changedDocKeys.unionWith(releasedWriteKeys));\n            });\n        });\n    };\n    /**\n     * Notify local store of the changed views to locally pin documents.\n     */\n    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {\n        var _this = this;\n        return this.persistence.runTransaction('Notify local view changes', function (txn) {\n            var promises = [];\n            var _loop_1 = function (view) {\n                promises.push(_this.queryCache\n                    .getQueryData(txn, view.query)\n                    .next(function (queryData) {\n                    assert(queryData !== null, 'Local view changes contain unallocated query.');\n                    var targetId = queryData.targetId;\n                    _this.localViewReferences.addReferences(view.addedKeys, targetId);\n                    _this.localViewReferences.removeReferences(view.removedKeys, targetId);\n                }));\n            };\n            for (var _i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n                var view = viewChanges_1[_i];\n                _loop_1(view);\n            }\n            return PersistencePromise.waitFor(promises);\n        });\n    };\n    /**\n     * Gets the mutation batch after the passed in batchId in the mutation queue\n     * or null if empty.\n     * @param afterBatchId If provided, the batch to search after.\n     * @returns The next mutation or null if there wasn't one.\n     */\n    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Get next mutation batch', function (txn) {\n            if (afterBatchId === undefined) {\n                afterBatchId = BATCHID_UNKNOWN;\n            }\n            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n        });\n    };\n    /**\n     * Read the current value of a Document with a given key or null if not\n     * found - used for testing.\n     */\n    LocalStore.prototype.readDocument = function (key) {\n        var _this = this;\n        return this.persistence.runTransaction('read document', function (txn) {\n            return _this.localDocuments.getDocument(txn, key);\n        });\n    };\n    /**\n     * Assigns the given query an internal ID so that its results can be pinned so\n     * they don't get GC'd. A query must be allocated in the local store before\n     * the store can be used to manage its view.\n     */\n    LocalStore.prototype.allocateQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Allocate query', function (txn) {\n            var queryData;\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (cached) {\n                if (cached) {\n                    // This query has been listened to previously, so reuse the\n                    // previous targetID.\n                    // TODO(mcg): freshen last accessed date?\n                    queryData = cached;\n                    return PersistencePromise.resolve();\n                }\n                else {\n                    var targetId = _this.targetIdGenerator.next();\n                    queryData = new QueryData(query, targetId, QueryPurpose.Listen);\n                    return _this.queryCache.addQueryData(txn, queryData);\n                }\n            })\n                .next(function () {\n                assert(!_this.targetIds[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);\n                _this.targetIds[queryData.targetId] = queryData;\n                return queryData;\n            });\n        });\n    };\n    /** Unpin all the documents associated with the given query. */\n    LocalStore.prototype.releaseQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Release query', function (txn) {\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (queryData) {\n                assert(queryData != null, 'Tried to release nonexistent query: ' + query);\n                _this.localViewReferences.removeReferencesForId(queryData.targetId);\n                delete _this.targetIds[queryData.targetId];\n                if (_this.garbageCollector.isEager) {\n                    return _this.queryCache.removeQueryData(txn, queryData);\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            })\n                .next(function () {\n                // If this was the last watch target, then we won't get any more\n                // watch snapshots, so we should release any held batch results.\n                if (objUtils.isEmpty(_this.targetIds)) {\n                    var documentBuffer_2 = new RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseHeldBatchResults(txn, documentBuffer_2).next(function () {\n                        documentBuffer_2.apply(txn);\n                    });\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Runs the specified query against all the documents in the local store and\n     * returns the results.\n     */\n    LocalStore.prototype.executeQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Execute query', function (txn) {\n            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);\n        });\n    };\n    /**\n     * Returns the keys of the documents that are associated with the given\n     * target id in the remote table.\n     */\n    LocalStore.prototype.remoteDocumentKeys = function (targetId) {\n        var _this = this;\n        return this.persistence.runTransaction('Remote document keys', function (txn) {\n            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);\n        });\n    };\n    /**\n     * Collect garbage if necessary.\n     * Should be called periodically by Sync Engine to recover resources. The\n     * implementation must guarantee that GC won't happen in other places than\n     * this method call.\n     */\n    LocalStore.prototype.collectGarbage = function () {\n        var _this = this;\n        // Call collectGarbage regardless of whether isGCEnabled so the referenceSet\n        // doesn't continue to accumulate the garbage keys.\n        return this.persistence.runTransaction('Garbage collection', function (txn) {\n            return _this.garbageCollector.collectGarbage(txn).next(function (garbage) {\n                var promises = [];\n                garbage.forEach(function (key) {\n                    promises.push(_this.remoteDocuments.removeEntry(txn, key));\n                });\n                return PersistencePromise.waitFor(promises);\n            });\n        });\n    };\n    LocalStore.prototype.releaseHeldBatchResults = function (txn, documentBuffer) {\n        var toRelease = [];\n        for (var _i = 0, _a = this.heldBatchResults; _i < _a.length; _i++) {\n            var batchResult = _a[_i];\n            if (!this.isRemoteUpToVersion(batchResult.commitVersion)) {\n                break;\n            }\n            toRelease.push(batchResult);\n        }\n        if (toRelease.length === 0) {\n            return PersistencePromise.resolve(documentKeySet());\n        }\n        else {\n            this.heldBatchResults.splice(0, toRelease.length);\n            return this.releaseBatchResults(txn, toRelease, documentBuffer);\n        }\n    };\n    LocalStore.prototype.isRemoteUpToVersion = function (version) {\n        // If there are no watch targets, then we won't get remote snapshots, and\n        // we are always \"up-to-date.\"\n        var lastRemoteVersion = this.queryCache.getLastRemoteSnapshotVersion();\n        return (version.compareTo(lastRemoteVersion) <= 0 ||\n            objUtils.isEmpty(this.targetIds));\n    };\n    LocalStore.prototype.shouldHoldBatchResult = function (version) {\n        // Check if watcher isn't up to date or prior results are already held.\n        return (!this.isRemoteUpToVersion(version) || this.heldBatchResults.length > 0);\n    };\n    LocalStore.prototype.releaseBatchResults = function (txn, batchResults, documentBuffer) {\n        var _this = this;\n        var promiseChain = PersistencePromise.resolve();\n        var _loop_2 = function (batchResult) {\n            promiseChain = promiseChain.next(function () {\n                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);\n            });\n        };\n        for (var _i = 0, batchResults_1 = batchResults; _i < batchResults_1.length; _i++) {\n            var batchResult = batchResults_1[_i];\n            _loop_2(batchResult);\n        }\n        return promiseChain.next(function () {\n            return _this.removeMutationBatches(txn, batchResults.map(function (result) { return result.batch; }));\n        });\n    };\n    LocalStore.prototype.removeMutationBatch = function (txn, batch) {\n        return this.removeMutationBatches(txn, [batch]);\n    };\n    /** Removes all the mutation batches named in the given array. */\n    LocalStore.prototype.removeMutationBatches = function (txn, batches) {\n        var affectedDocs = documentKeySet();\n        for (var _i = 0, batches_2 = batches; _i < batches_2.length; _i++) {\n            var batch = batches_2[_i];\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                affectedDocs = affectedDocs.add(key);\n            }\n        }\n        return this.mutationQueue\n            .removeMutationBatches(txn, batches)\n            .next(function () { return affectedDocs; });\n    };\n    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {\n        var batch = batchResult.batch;\n        var docKeys = batch.keys();\n        var promiseChain = PersistencePromise.resolve();\n        docKeys.forEach(function (docKey) {\n            promiseChain = promiseChain\n                .next(function () {\n                return documentBuffer.getEntry(txn, docKey);\n            })\n                .next(function (remoteDoc) {\n                var doc = remoteDoc;\n                var ackVersion = batchResult.docVersions.get(docKey);\n                assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');\n                if (!doc || doc.version.compareTo(ackVersion) < 0) {\n                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n                    if (!doc) {\n                        assert(!remoteDoc, 'Mutation batch ' +\n                            batch +\n                            ' applied to document ' +\n                            remoteDoc +\n                            ' resulted in null');\n                    }\n                    else {\n                        documentBuffer.addEntry(doc);\n                    }\n                }\n            });\n        });\n        return promiseChain;\n    };\n    return LocalStore;\n}());\nexport { LocalStore };\n\n//# sourceMappingURL=local_store.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_store.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { emptyByteString } from '../platform/platform';\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\nvar MemoryMutationQueue = /** @class */ (function () {\n    function MemoryMutationQueue() {\n        /**\n         * The set of all mutations that have been sent but not yet been applied to\n         * the backend.\n         */\n        this.mutationQueue = [];\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\n        this.nextBatchId = 1;\n        /** The highest acknowledged mutation in the queue. */\n        this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        /** The last received stream token from the server, used to acknowledge which\n         * responses the client has processed. Stream tokens are opaque checkpoint\n         * markers whose only real value is their inclusion in the next request.\n         */\n        this.lastStreamToken = emptyByteString();\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n        /** An ordered mapping between documents and the mutations batch IDs. */\n        this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n    }\n    MemoryMutationQueue.prototype.start = function (transaction) {\n        // NOTE: The queue may be shutdown / started multiple times, since we\n        // maintain the queue for the duration of the app session in case a user\n        // logs out / back in. To behave like the LevelDB-backed MutationQueue (and\n        // accommodate tests that expect as much), we reset nextBatchId and\n        // highestAcknowledgedBatchId if the queue is empty.\n        if (this.mutationQueue.length === 0) {\n            this.nextBatchId = 1;\n            this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        }\n        assert(this.highestAcknowledgedBatchId < this.nextBatchId, 'highestAcknowledgedBatchId must be less than the nextBatchId');\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n        return PersistencePromise.resolve(this.mutationQueue.length === 0);\n    };\n    MemoryMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.nextBatchId);\n    };\n    MemoryMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.highestAcknowledgedBatchId);\n    };\n    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n        // Verify that the batch in the queue is the one to be acknowledged.\n        var check = this.mutationQueue[batchIndex];\n        assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' +\n            batchId +\n            ', got batch ' +\n            check.batchId);\n        assert(!check.isTombstone(), \"Can't acknowledge a previously removed batch\");\n        this.highestAcknowledgedBatchId = batchId;\n        this.lastStreamToken = streamToken;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return PersistencePromise.resolve(this.lastStreamToken);\n    };\n    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.lastStreamToken = streamToken;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        assert(mutations.length !== 0, 'Mutation batches should not be empty');\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        if (this.mutationQueue.length > 0) {\n            var prior = this.mutationQueue[this.mutationQueue.length - 1];\n            assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');\n        }\n        var batch = new MutationBatch(batchId, localWriteTime, mutations);\n        this.mutationQueue.push(batch);\n        // Track references by document key.\n        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n            var mutation = mutations_1[_i];\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));\n        }\n        return PersistencePromise.resolve(batch);\n    };\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        return PersistencePromise.resolve(this.findMutationBatch(batchId));\n    };\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var size = this.mutationQueue.length;\n        // All batches with batchId <= this.highestAcknowledgedBatchId have been\n        // acknowledged so the first unacknowledged batch after batchID will have a\n        // batchID larger than both of these values.\n        batchId = Math.max(batchId + 1, this.highestAcknowledgedBatchId);\n        // The requested batchId may still be out of range so normalize it to the\n        // start of the queue.\n        var rawIndex = this.indexOfBatchId(batchId);\n        var index = rawIndex < 0 ? 0 : rawIndex;\n        // Finally return the first non-tombstone batch.\n        for (; index < size; index++) {\n            var batch = this.mutationQueue[index];\n            if (!batch.isTombstone()) {\n                return PersistencePromise.resolve(batch);\n            }\n        }\n        return PersistencePromise.resolve(null);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        return PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var count = this.mutationQueue.length;\n        var endIndex = this.indexOfBatchId(batchId);\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        else if (endIndex >= count) {\n            endIndex = count;\n        }\n        else {\n            // The endIndex is in the queue so increment to pull everything in the\n            // queue including it.\n            endIndex++;\n        }\n        return PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(endIndex));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        var start = new DocReference(documentKey, 0);\n        var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n        var result = [];\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n            assert(documentKey.isEqual(ref.key), \"Should only iterate over a single key's batches\");\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\n            assert(batch !== null, 'Batches in the index must exist in the main table');\n            result.push(batch);\n        });\n        return PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        // Use the query path as a prefix for testing if a document matches the\n        // query.\n        var prefix = query.path;\n        var immediateChildrenPathLength = prefix.length + 1;\n        // Construct a document reference for actually scanning the index. Unlike\n        // the prefix the document key in this reference must have an even number of\n        // segments. The empty segment can be used a suffix of the query path\n        // because it precedes all other segments in an ordered traversal.\n        var startPath = prefix;\n        if (!DocumentKey.isDocumentKey(startPath)) {\n            startPath = startPath.child('');\n        }\n        var start = new DocReference(new DocumentKey(startPath), 0);\n        // Find unique batchIDs referenced by all documents potentially matching the\n        // query.\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\n            var rowKeyPath = ref.key.path;\n            if (!prefix.isPrefixOf(rowKeyPath)) {\n                return false;\n            }\n            else {\n                // Rows with document keys more than one segment longer than the query\n                // path can't be matches. For example, a query on 'rooms' can't match\n                // the document /rooms/abc/messages/xyx.\n                // TODO(mcg): we'll need a different scanner when we implement\n                // ancestor queries.\n                if (rowKeyPath.length === immediateChildrenPathLength) {\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n                }\n                return true;\n            }\n        }, start);\n        // Construct an array of matching batches, sorted by batchID to ensure that\n        // multiple mutations affecting the same document key are applied in order.\n        var result = [];\n        uniqueBatchIDs.forEach(function (batchId) {\n            var batch = _this.findMutationBatch(batchId);\n            if (batch !== null) {\n                result.push(batch);\n            }\n        });\n        return PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var batchCount = batches.length;\n        assert(batchCount > 0, 'Should not remove mutations when none exist.');\n        var firstBatchId = batches[0].batchId;\n        var queueCount = this.mutationQueue.length;\n        // Find the position of the first batch for removal. This need not be the\n        // first entry in the queue.\n        var startIndex = this.indexOfExistingBatchId(firstBatchId, 'removed');\n        assert(this.mutationQueue[startIndex].batchId === firstBatchId, 'Removed batches must exist in the queue');\n        // Check that removed batches are contiguous (while excluding tombstones).\n        var batchIndex = 1;\n        var queueIndex = startIndex + 1;\n        while (batchIndex < batchCount && queueIndex < queueCount) {\n            var batch = this.mutationQueue[queueIndex];\n            if (batch.isTombstone()) {\n                queueIndex++;\n                continue;\n            }\n            assert(batch.batchId === batches[batchIndex].batchId, 'Removed batches must be contiguous in the queue');\n            batchIndex++;\n            queueIndex++;\n        }\n        // Only actually remove batches if removing at the front of the queue.\n        // Previously rejected batches may have left tombstones in the queue, so\n        // expand the removal range to include any tombstones.\n        if (startIndex === 0) {\n            for (; queueIndex < queueCount; queueIndex++) {\n                var batch = this.mutationQueue[queueIndex];\n                if (!batch.isTombstone()) {\n                    break;\n                }\n            }\n            var length_1 = queueIndex - startIndex;\n            this.mutationQueue.splice(startIndex, length_1);\n        }\n        else {\n            // Mark the tombstones\n            for (var i = startIndex; i < queueIndex; i++) {\n                this.mutationQueue[i] = this.mutationQueue[i].toTombstone();\n            }\n        }\n        var references = this.batchesByDocumentKey;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            var batchId = batch.batchId;\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                if (this.garbageCollector !== null) {\n                    this.garbageCollector.addPotentialGarbageKey(key);\n                }\n                var ref = new DocReference(key, batchId);\n                references = references.delete(ref);\n            }\n        }\n        this.batchesByDocumentKey = references;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n        return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n    };\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        if (this.mutationQueue.length === 0) {\n            assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');\n        }\n        return PersistencePromise.resolve();\n    };\n    /**\n     * A private helper that collects all the mutations batches in the queue up to\n     * but not including the given endIndex. All tombstones in the queue are\n     * excluded.\n     */\n    MemoryMutationQueue.prototype.getAllLiveMutationBatchesBeforeIndex = function (endIndex) {\n        var result = [];\n        for (var i = 0; i < endIndex; i++) {\n            var batch = this.mutationQueue[i];\n            if (!batch.isTombstone()) {\n                result.push(batch);\n            }\n        }\n        return result;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue and asserts that\n     * the resulting index is within the bounds of the queue.\n     *\n     * @param batchId The batchId to search for\n     * @param action A description of what the caller is doing, phrased in passive\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n     */\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n        var index = this.indexOfBatchId(batchId);\n        assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);\n        return index;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue. This operation\n     * is O(1).\n     *\n     * @return The computed index of the batch with the given batchId, based on\n     * the state of the queue. Note this index can be negative if the requested\n     * batchId has already been remvoed from the queue or past the end of the\n     * queue if the batchId is larger than the last added batch.\n     */\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n        if (this.mutationQueue.length === 0) {\n            // As an index this is past the end of the queue\n            return 0;\n        }\n        // Examine the front of the queue to figure out the difference between the\n        // batchId and indexes in the array. Note that since the queue is ordered\n        // by batchId, if the first batch has a larger batchId then the requested\n        // batchId doesn't exist in the queue.\n        var firstBatchId = this.mutationQueue[0].batchId;\n        return batchId - firstBatchId;\n    };\n    /**\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\n     * other functions that uses this code easier to read and more efficent.\n     */\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n        var index = this.indexOfBatchId(batchId);\n        if (index < 0 || index >= this.mutationQueue.length) {\n            return null;\n        }\n        var batch = this.mutationQueue[index];\n        assert(batch.batchId === batchId, 'If found batch must match');\n        return batch.isTombstone() ? null : batch;\n    };\n    return MemoryMutationQueue;\n}());\nexport { MemoryMutationQueue };\n\n//# sourceMappingURL=memory_mutation_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_mutation_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ObjectMap } from '../util/obj_map';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nvar MemoryQueryCache = /** @class */ (function () {\n    function MemoryQueryCache() {\n        /**\n         * Maps a query to the data about that query\n         */\n        this.queries = new ObjectMap(function (q) { return q.canonicalId(); });\n        /** The last received snapshot version. */\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n        /** The highest numbered target ID encountered. */\n        this.highestTargetId = 0;\n        /**\n         * A ordered bidirectional mapping between documents and the remote target\n         * IDs.\n         */\n        this.references = new ReferenceSet();\n    }\n    MemoryQueryCache.prototype.start = function (transaction) {\n        // Nothing to do.\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    MemoryQueryCache.prototype.getHighestTargetId = function () {\n        return this.highestTargetId;\n    };\n    MemoryQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        this.queries.set(queryData.query, queryData);\n        var targetId = queryData.targetId;\n        if (targetId > this.highestTargetId) {\n            this.highestTargetId = targetId;\n        }\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        this.queries.delete(queryData.query);\n        this.references.removeReferencesForId(queryData.targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {\n        var queryData = this.queries.get(query) || null;\n        return PersistencePromise.resolve(queryData);\n    };\n    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        this.references.addReferences(keys, targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        this.references.removeReferences(keys, targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        this.references.removeReferencesForId(targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var matchingKeys = this.references.referencesForId(targetId);\n        return PersistencePromise.resolve(matchingKeys);\n    };\n    MemoryQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.references.setGarbageCollector(gc);\n    };\n    MemoryQueryCache.prototype.containsKey = function (txn, key) {\n        return this.references.containsKey(txn, key);\n    };\n    return MemoryQueryCache;\n}());\nexport { MemoryQueryCache };\n\n//# sourceMappingURL=memory_query_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_query_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap, maybeDocumentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { PersistencePromise } from './persistence_promise';\nvar MemoryRemoteDocumentCache = /** @class */ (function () {\n    function MemoryRemoteDocumentCache() {\n        this.docs = maybeDocumentMap();\n    }\n    MemoryRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        this.docs = this.docs.insert(maybeDocument.key, maybeDocument);\n        return PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        this.docs = this.docs.remove(documentKey);\n        return PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        return PersistencePromise.resolve(this.docs.get(documentKey));\n    };\n    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var prefix = new DocumentKey(query.path.child(''));\n        var iterator = this.docs.getIteratorFrom(prefix);\n        while (iterator.hasNext()) {\n            var _a = iterator.getNext(), key = _a.key, maybeDoc = _a.value;\n            if (!query.path.isPrefixOf(key.path)) {\n                break;\n            }\n            if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        }\n        return PersistencePromise.resolve(results);\n    };\n    return MemoryRemoteDocumentCache;\n}());\nexport { MemoryRemoteDocumentCache };\n\n//# sourceMappingURL=memory_remote_document_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_remote_document_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryQueryCache } from './memory_query_cache';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nvar LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new MemoryRemoteDocumentCache();\n        this.queryCache = new MemoryQueryCache();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                // No durable state to read on startup.\n                assert(!this.started, 'MemoryPersistence double-started!');\n                this.started = true;\n                return [2 /*return*/];\n            });\n        });\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                // No durable state to ensure is closed on shutdown.\n                assert(this.started, 'MemoryPersistence shutdown without start!');\n                this.started = false;\n                return [2 /*return*/];\n            });\n        });\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new MemoryMutationQueue();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        debug(LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\nexport { MemoryPersistence };\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n//# sourceMappingURL=memory_persistence.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_persistence.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return PersistencePromise.resolve(documentKeySet());\n    };\n    return NoOpGarbageCollector;\n}());\nexport { NoOpGarbageCollector };\n\n//# sourceMappingURL=no_op_garbage_collector.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/no_op_garbage_collector.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\nexport { Deferred };\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nexport function sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n//# sourceMappingURL=promise.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/promise.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { assert } from '../util/assert';\nimport { TimerId } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { ExponentialBackoff } from './backoff';\nimport { isNullOrUndefined } from '../util/types';\nvar LOG_TAG = 'PersistentStream';\nvar PersistentStreamState;\n(function (PersistentStreamState) {\n    /**\n     * The streaming RPC is not running and there's no error condition.\n     * Calling `start` will start the stream immediately without backoff.\n     * While in this state isStarted will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Initial\"] = 0] = \"Initial\";\n    /**\n     * The stream is starting, and is waiting for an auth token to attach to\n     * the initial request. While in this state, isStarted will return\n     * true but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Auth\"] = 1] = \"Auth\";\n    /**\n     * The streaming RPC is up and running. Requests and responses can flow\n     * freely. Both isStarted and isOpen will return true.\n     */\n    PersistentStreamState[PersistentStreamState[\"Open\"] = 2] = \"Open\";\n    /**\n     * The stream encountered an error. The next start attempt will back off.\n     * While in this state isStarted() will return false.\n     *\n     */\n    PersistentStreamState[PersistentStreamState[\"Error\"] = 3] = \"Error\";\n    /**\n     * An in-between state after an error where the stream is waiting before\n     * re-starting. After\n     * waiting is complete, the stream will try to open. While in this\n     * state isStarted() will return YES but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Backoff\"] = 4] = \"Backoff\";\n    /**\n     * The stream has been explicitly stopped; no further events will be emitted.\n     */\n    PersistentStreamState[PersistentStreamState[\"Stopped\"] = 5] = \"Stopped\";\n})(PersistentStreamState || (PersistentStreamState = {}));\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nvar BACKOFF_INITIAL_DELAY_MS = 1000;\n/** Maximum backoff time in milliseconds */\nvar BACKOFF_MAX_DELAY_MS = 60 * 1000;\nvar BACKOFF_FACTOR = 1.5;\n/** The time a stream stays open after it is marked idle. */\nvar IDLE_TIMEOUT_MS = 60 * 1000;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be `start`ed before messages can\n * be sent and received. The PersistentStream will call the onOpen function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a `start` fail, PersistentStream will call the registered\n * onClose with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nvar PersistentStream = /** @class */ (function () {\n    function PersistentStream(queue, connectionTimerId, idleTimerId, connection, credentialsProvider) {\n        this.queue = queue;\n        this.idleTimerId = idleTimerId;\n        this.connection = connection;\n        this.credentialsProvider = credentialsProvider;\n        this.inactivityTimerPromise = null;\n        this.stream = null;\n        this.listener = null;\n        this.backoff = new ExponentialBackoff(queue, connectionTimerId, BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);\n        this.state = PersistentStreamState.Initial;\n    }\n    /**\n     * Returns true if `start` has been called and no error has occurred. True\n     * indicates the stream is open or in the process of opening (which\n     * encompasses respecting backoff, getting auth tokens, and starting the\n     * actual RPC). Use `isOpen` to determine if the stream is open and ready for\n     * outbound requests.\n     */\n    PersistentStream.prototype.isStarted = function () {\n        return (this.state === PersistentStreamState.Backoff ||\n            this.state === PersistentStreamState.Auth ||\n            this.state === PersistentStreamState.Open);\n    };\n    /**\n     * Returns true if the underlying RPC is open (the openHandler has been\n     * called) and the stream is ready for outbound requests.\n     */\n    PersistentStream.prototype.isOpen = function () {\n        return this.state === PersistentStreamState.Open;\n    };\n    /**\n     * Starts the RPC. Only allowed if isStarted returns false. The stream is\n     * not immediately ready for use: onOpen will be invoked when the RPC is ready\n     * for outbound requests, at which point isOpen will return true.\n     *\n     *  When start returns, isStarted will return true.\n     */\n    PersistentStream.prototype.start = function (listener) {\n        if (this.state === PersistentStreamState.Error) {\n            this.performBackoff(listener);\n            return;\n        }\n        assert(this.state === PersistentStreamState.Initial, 'Already started');\n        this.listener = listener;\n        this.auth();\n    };\n    /**\n     * Stops the RPC. This call is idempotent and allowed regardless of the\n     * current isStarted state.\n     *\n     * When stop returns, isStarted and isOpen will both return false.\n     */\n    PersistentStream.prototype.stop = function () {\n        if (this.isStarted()) {\n            this.close(PersistentStreamState.Stopped);\n        }\n    };\n    /**\n     * After an error the stream will usually back off on the next attempt to\n     * start it. If the error warrants an immediate restart of the stream, the\n     * sender can use this to indicate that the receiver should not back off.\n     *\n     * Each error will call the onClose function. That function can decide to\n     * inhibit backoff if required.\n     */\n    PersistentStream.prototype.inhibitBackoff = function () {\n        assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');\n        this.state = PersistentStreamState.Initial;\n        this.backoff.reset();\n    };\n    /**\n     * Marks this stream as idle. If no further actions are performed on the\n     * stream for one minute, the stream will automatically close itself and\n     * notify the stream's onClose() handler with Status.OK. The stream will then\n     * be in a !isStarted() state, requiring the caller to start the stream again\n     * before further use.\n     *\n     * Only streams that are in state 'Open' can be marked idle, as all other\n     * states imply pending network operations.\n     */\n    PersistentStream.prototype.markIdle = function () {\n        var _this = this;\n        // Starts the idle time if we are in state 'Open' and are not yet already\n        // running a timer (in which case the previous idle timeout still applies).\n        if (this.isOpen() && this.inactivityTimerPromise === null) {\n            this.inactivityTimerPromise = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, function () { return _this.handleIdleCloseTimer(); });\n            this.inactivityTimerPromise.catch(function (err) {\n                // When the AsyncQueue gets drained during testing, pending Promises\n                // (including these idle checks) will get rejected. We special-case\n                // these cancelled idle checks to make sure that these specific Promise\n                // rejections are not considered unhandled.\n                assert(err.code === Code.CANCELLED, \"Received unexpected error in idle timeout closure. Expected CANCELLED, but was: \" + err);\n            });\n        }\n    };\n    /** Sends a message to the underlying stream. */\n    PersistentStream.prototype.sendRequest = function (msg) {\n        this.cancelIdleCheck();\n        this.stream.send(msg);\n    };\n    /** Called by the idle timer when the stream should close due to inactivity. */\n    PersistentStream.prototype.handleIdleCloseTimer = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (this.isOpen()) {\n                    // When timing out an idle stream there's no reason to force the stream into backoff when\n                    // it restarts so set the stream state to Initial instead of Error.\n                    return [2 /*return*/, this.close(PersistentStreamState.Initial)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /** Marks the stream as active again. */\n    PersistentStream.prototype.cancelIdleCheck = function () {\n        if (this.inactivityTimerPromise) {\n            this.inactivityTimerPromise.cancel();\n            this.inactivityTimerPromise = null;\n        }\n    };\n    /**\n     * Closes the stream and cleans up as necessary:\n     *\n     * * closes the underlying GRPC stream;\n     * * calls the onClose handler with the given 'error';\n     * * sets internal stream state to 'finalState';\n     * * adjusts the backoff timer based on the error\n     *\n     * A new stream can be opened by calling `start` unless `finalState` is set to\n     * `PersistentStreamState.Stopped`.\n     *\n     * @param finalState the intended state of the stream after closing.\n     * @param error the error the connection was closed with.\n     */\n    PersistentStream.prototype.close = function (finalState, error) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var listener;\n            return tslib_1.__generator(this, function (_a) {\n                assert(finalState === PersistentStreamState.Error || isNullOrUndefined(error), \"Can't provide an error when not in an error state.\");\n                this.cancelIdleCheck();\n                if (finalState !== PersistentStreamState.Error) {\n                    // If this is an intentional close ensure we don't delay our next connection attempt.\n                    this.backoff.reset();\n                }\n                else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n                    // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n                    log.error(error.toString());\n                    log.error('Using maximum backoff delay to prevent overloading the backend.');\n                    this.backoff.resetToMax();\n                }\n                // Clean up the underlying stream because we are no longer interested in events.\n                if (this.stream !== null) {\n                    this.tearDown();\n                    this.stream.close();\n                    this.stream = null;\n                }\n                // This state must be assigned before calling onClose() to allow the callback to\n                // inhibit backoff or otherwise manipulate the state in its non-started state.\n                this.state = finalState;\n                listener = this.listener;\n                // Clear the listener to avoid bleeding of events from the underlying streams.\n                this.listener = null;\n                // If the caller explicitly requested a stream stop, don't notify them of a closing stream (it\n                // could trigger undesirable recovery logic, etc.).\n                if (finalState !== PersistentStreamState.Stopped) {\n                    return [2 /*return*/, listener.onClose(error)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Can be overridden to perform additional cleanup before the stream is closed.\n     * Calling super.tearDown() is not required.\n     */\n    PersistentStream.prototype.tearDown = function () { };\n    PersistentStream.prototype.auth = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');\n        this.state = PersistentStreamState.Auth;\n        this.credentialsProvider.getToken(/*forceRefresh=*/ false).then(function (token) {\n            // Normally we'd have to schedule the callback on the AsyncQueue.\n            // However, the following calls are safe to be called outside the\n            // AsyncQueue since they don't chain asynchronous calls\n            _this.startStream(token);\n        }, function (error) {\n            _this.queue.enqueue(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var rpcError;\n                return tslib_1.__generator(this, function (_a) {\n                    if (this.state !== PersistentStreamState.Stopped) {\n                        rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n                        return [2 /*return*/, this.handleStreamClose(rpcError)];\n                    }\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n    };\n    PersistentStream.prototype.startStream = function (token) {\n        var _this = this;\n        if (this.state === PersistentStreamState.Stopped) {\n            // Stream can be stopped while waiting for authorization.\n            return;\n        }\n        assert(this.state === PersistentStreamState.Auth, 'Trying to start stream in a non-auth state');\n        // Helper function to dispatch to AsyncQueue and make sure that any\n        // close will seem instantaneous and events are prevented from being\n        // raised after the close call\n        var dispatchIfStillActive = function (stream, fn) {\n            _this.queue.enqueue(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    // Only raise events if the stream instance has not changed\n                    if (this.stream === stream) {\n                        return [2 /*return*/, fn()];\n                    }\n                    return [2 /*return*/];\n                });\n            }); });\n        };\n        // Only start stream if listener has not changed\n        if (this.listener !== null) {\n            var currentStream_1 = this.startRpc(token);\n            this.stream = currentStream_1;\n            this.stream.onOpen(function () {\n                dispatchIfStillActive(currentStream_1, function () {\n                    assert(_this.state === PersistentStreamState.Auth, 'Expected stream to be in state auth, but was ' + _this.state);\n                    _this.state = PersistentStreamState.Open;\n                    return _this.listener.onOpen();\n                });\n            });\n            this.stream.onClose(function (error) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.handleStreamClose(error);\n                });\n            });\n            this.stream.onMessage(function (msg) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.onMessage(msg);\n                });\n            });\n        }\n    };\n    PersistentStream.prototype.performBackoff = function (listener) {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Error, 'Should only perform backoff in an error case');\n        this.state = PersistentStreamState.Backoff;\n        this.backoff.backoffAndRun(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (this.state === PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for backoff to complete.\n                    return [2 /*return*/];\n                }\n                this.state = PersistentStreamState.Initial;\n                this.start(listener);\n                assert(this.isStarted(), 'PersistentStream should have started');\n                return [2 /*return*/];\n            });\n        }); });\n    };\n    PersistentStream.prototype.handleStreamClose = function (error) {\n        assert(this.isStarted(), \"Can't handle server close on non-started stream\");\n        log.debug(LOG_TAG, \"close with error: \" + error);\n        this.stream = null;\n        // In theory the stream could close cleanly, however, in our current model\n        // we never expect this to happen because if we stop a stream ourselves,\n        // this callback will never be called. To prevent cases where we retry\n        // without a backoff accidentally, we set the stream to error in all cases.\n        return this.close(PersistentStreamState.Error, error);\n    };\n    return PersistentStream;\n}());\nexport { PersistentStream };\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the openHandler, any number of listen and\n * unlisten calls calls can be sent to control what changes will be sent from\n * the server for ListenResponses.\n */\nvar PersistentListenStream = /** @class */ (function (_super) {\n    tslib_1.__extends(PersistentListenStream, _super);\n    function PersistentListenStream(queue, connection, credentials, serializer) {\n        var _this = _super.call(this, queue, TimerId.ListenStreamConnection, TimerId.ListenStreamIdle, connection, credentials) || this;\n        _this.serializer = serializer;\n        return _this;\n    }\n    PersistentListenStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Listen', token);\n    };\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n        // A successful response means the stream is healthy\n        this.backoff.reset();\n        var watchChange = this.serializer.fromWatchChange(watchChangeProto);\n        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);\n        return this.listener.onWatchChange(watchChange, snapshot);\n    };\n    /**\n     * Registers interest in the results of the given query. If the query\n     * includes a resumeToken it will be included in the request. Results that\n     * affect the query will be streamed back as WatchChange messages that\n     * reference the targetId.\n     */\n    PersistentListenStream.prototype.watch = function (queryData) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.addTarget = this.serializer.toTarget(queryData);\n        var labels = this.serializer.toListenRequestLabels(queryData);\n        if (labels) {\n            request.labels = labels;\n        }\n        this.sendRequest(request);\n    };\n    /**\n     * Unregisters interest in the results of the query associated with the\n     * given targetId.\n     */\n    PersistentListenStream.prototype.unwatch = function (targetId) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.removeTarget = targetId;\n        this.sendRequest(request);\n    };\n    return PersistentListenStream;\n}(PersistentStream));\nexport { PersistentListenStream };\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nvar PersistentWriteStream = /** @class */ (function (_super) {\n    tslib_1.__extends(PersistentWriteStream, _super);\n    function PersistentWriteStream(queue, connection, credentials, serializer) {\n        var _this = _super.call(this, queue, TimerId.WriteStreamConnection, TimerId.WriteStreamIdle, connection, credentials) || this;\n        _this.serializer = serializer;\n        _this.handshakeComplete_ = false;\n        return _this;\n    }\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n        /**\n         * Tracks whether or not a handshake has been successfully exchanged and\n         * the stream is ready to accept mutations.\n         */\n        get: function () {\n            return this.handshakeComplete_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Override of PersistentStream.start\n    PersistentWriteStream.prototype.start = function (listener) {\n        this.handshakeComplete_ = false;\n        _super.prototype.start.call(this, listener);\n    };\n    PersistentWriteStream.prototype.tearDown = function () {\n        if (this.handshakeComplete_) {\n            this.writeMutations([]);\n        }\n    };\n    PersistentWriteStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Write', token);\n    };\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\n        // Always capture the last stream token.\n        assert(!!responseProto.streamToken, 'Got a write response without a stream token');\n        this.lastStreamToken = responseProto.streamToken;\n        if (!this.handshakeComplete_) {\n            // The first response is always the handshake response\n            assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');\n            this.handshakeComplete_ = true;\n            return this.listener.onHandshakeComplete();\n        }\n        else {\n            // A successful first write response means the stream is healthy,\n            // Note, that we could consider a successful handshake healthy, however,\n            // the write itself might be causing an error we want to back off from.\n            this.backoff.reset();\n            var results = this.serializer.fromWriteResults(responseProto.writeResults);\n            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);\n            return this.listener.onMutationResult(commitVersion, results);\n        }\n    };\n    /**\n     * Sends an initial streamToken to the server, performing the handshake\n     * required to make the StreamingWrite RPC work. Subsequent\n     * calls should wait until onHandshakeComplete was called.\n     */\n    PersistentWriteStream.prototype.writeHandshake = function () {\n        assert(this.isOpen(), 'Writing handshake requires an opened stream');\n        assert(!this.handshakeComplete_, 'Handshake already completed');\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\n        // stream token on the handshake, ignoring any stream token we might have.\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        this.sendRequest(request);\n    };\n    /** Sends a group of mutations to the Firestore backend to apply. */\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\n        var _this = this;\n        assert(this.isOpen(), 'Writing mutations requires an opened stream');\n        assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');\n        assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');\n        var request = {\n            // Protos are typed with string, but we support UInt8Array on Node\n            // tslint:disable-next-line:no-any\n            streamToken: this.lastStreamToken,\n            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })\n        };\n        this.sendRequest(request);\n    };\n    return PersistentWriteStream;\n}(PersistentStream));\nexport { PersistentWriteStream };\n\n//# sourceMappingURL=persistent_stream.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/persistent_stream.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as log from '../util/log';\nvar LOG_TAG = 'ExponentialBackoff';\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar ExponentialBackoff = /** @class */ (function () {\n    function ExponentialBackoff(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    queue, \n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    timerId, \n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    initialDelayMs, \n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */\n    backoffFactor, \n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */\n    maxDelayMs) {\n        this.queue = queue;\n        this.timerId = timerId;\n        this.initialDelayMs = initialDelayMs;\n        this.backoffFactor = backoffFactor;\n        this.maxDelayMs = maxDelayMs;\n        this.timerPromise = null;\n        this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */\n    ExponentialBackoff.prototype.reset = function () {\n        this.currentBaseMs = 0;\n    };\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n    ExponentialBackoff.prototype.resetToMax = function () {\n        this.currentBaseMs = this.maxDelayMs;\n    };\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */\n    ExponentialBackoff.prototype.backoffAndRun = function (op) {\n        if (this.timerPromise !== null) {\n            this.timerPromise.cancel();\n        }\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        var delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            log.debug(LOG_TAG, \"Backing off for \" + delayWithJitterMs + \" ms \" +\n                (\"(base delay: \" + this.currentBaseMs + \" ms)\"));\n        }\n        this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, delayWithJitterMs, op);\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        if (this.currentBaseMs < this.initialDelayMs) {\n            this.currentBaseMs = this.initialDelayMs;\n        }\n        if (this.currentBaseMs > this.maxDelayMs) {\n            this.currentBaseMs = this.maxDelayMs;\n        }\n    };\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\n        return (Math.random() - 0.5) * this.currentBaseMs;\n    };\n    return ExponentialBackoff;\n}());\nexport { ExponentialBackoff };\n\n//# sourceMappingURL=backoff.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/backoff.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { assert } from '../util/assert';\nimport { PersistentListenStream, PersistentWriteStream } from './persistent_stream';\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nvar Datastore = /** @class */ (function () {\n    function Datastore(queue, connection, credentials, serializer) {\n        this.queue = queue;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.serializer = serializer;\n    }\n    Datastore.prototype.newPersistentWriteStream = function () {\n        return new PersistentWriteStream(this.queue, this.connection, this.credentials, this.serializer);\n    };\n    Datastore.prototype.newPersistentWatchStream = function () {\n        return new PersistentListenStream(this.queue, this.connection, this.credentials, this.serializer);\n    };\n    Datastore.prototype.commit = function (mutations) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\n        };\n        return this.invokeRPC('Commit', params).then(function (response) {\n            return _this.serializer.fromWriteResults(response.writeResults);\n        });\n    };\n    Datastore.prototype.lookup = function (keys) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\n        };\n        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {\n            var docs = maybeDocumentMap();\n            response.forEach(function (proto) {\n                var doc = _this.serializer.fromMaybeDocument(proto);\n                docs = docs.insert(doc.key, doc);\n            });\n            var result = [];\n            keys.forEach(function (key) {\n                var doc = docs.get(key);\n                assert(!!doc, 'Missing entity in write response for ' + key);\n                result.push(doc);\n            });\n            return result;\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC. */\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeRPC(rpcName, request, token);\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC with streamed results. */\n    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeStreamingRPC(rpcName, request, token);\n        });\n    };\n    return Datastore;\n}());\nexport { Datastore };\n\n//# sourceMappingURL=datastore.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/datastore.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from './snapshot_version';\nimport { documentVersionMap } from '../model/collections';\nimport { NoDocument } from '../model/document';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport { Code, FirestoreError } from '../util/error';\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(datastore) {\n        this.datastore = datastore;\n        // The version of each document that was read during this transaction.\n        this.readVersions = documentVersionMap();\n        this.mutations = [];\n        this.committed = false;\n    }\n    Transaction.prototype.recordVersion = function (doc) {\n        var docVersion = doc.version;\n        if (doc instanceof NoDocument) {\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            docVersion = SnapshotVersion.forDeletedDoc();\n        }\n        var existingVersion = this.readVersions.get(doc.key);\n        if (existingVersion !== null) {\n            if (!docVersion.isEqual(existingVersion)) {\n                // This transaction will fail no matter what.\n                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n            }\n        }\n        else {\n            this.readVersions = this.readVersions.insert(doc.key, docVersion);\n        }\n    };\n    Transaction.prototype.lookup = function (keys) {\n        var _this = this;\n        if (this.committed) {\n            return Promise.reject('Transaction has already completed.');\n        }\n        if (this.mutations.length > 0) {\n            return Promise.reject('Transactions lookups are invalid after writes.');\n        }\n        return this.datastore.lookup(keys).then(function (docs) {\n            docs.forEach(function (doc) { return _this.recordVersion(doc); });\n            return docs;\n        });\n    };\n    Transaction.prototype.write = function (mutations) {\n        if (this.committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');\n        }\n        this.mutations = this.mutations.concat(mutations);\n    };\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n    Transaction.prototype.precondition = function (key) {\n        var version = this.readVersions.get(key);\n        if (version) {\n            return Precondition.updateTime(version);\n        }\n        else {\n            return Precondition.NONE;\n        }\n    };\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n    Transaction.prototype.preconditionForUpdate = function (key) {\n        var version = this.readVersions.get(key);\n        if (version && version.isEqual(SnapshotVersion.forDeletedDoc())) {\n            // The document doesn't exist, so fail the transaction.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, \"Can't update a document that doesn't exist.\");\n        }\n        else if (version) {\n            // Document exists, base precondition on document update time.\n            return Precondition.updateTime(version);\n        }\n        else {\n            // Document was not read, so we just use the preconditions for a blind\n            // update.\n            return Precondition.exists(true);\n        }\n    };\n    Transaction.prototype.set = function (key, data) {\n        this.write(data.toMutations(key, this.precondition(key)));\n    };\n    Transaction.prototype.update = function (key, data) {\n        this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    };\n    Transaction.prototype.delete = function (key) {\n        this.write([new DeleteMutation(key, this.precondition(key))]);\n        // Since the delete will be applied before all following writes, we need to\n        // ensure that the precondition for the next write will be exists: false.\n        this.readVersions = this.readVersions.insert(key, SnapshotVersion.forDeletedDoc());\n    };\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var unwritten = this.readVersions;\n        // For each mutation, note that the doc was written.\n        this.mutations.forEach(function (mutation) {\n            unwritten = unwritten.remove(mutation.key);\n        });\n        if (!unwritten.isEmpty()) {\n            return Promise.reject(Error('Every document read in a transaction must also be written.'));\n        }\n        return this.datastore.commit(this.mutations).then(function () {\n            _this.committed = true;\n        });\n    };\n    return Transaction;\n}());\nexport { Transaction };\n\n//# sourceMappingURL=transaction.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/transaction.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Transaction } from '../core/transaction';\nimport { OnlineState } from '../core/types';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { BATCHID_UNKNOWN, MutationBatchResult } from '../model/mutation_batch';\nimport { emptyByteString } from '../platform/platform';\nimport { assert } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\nimport * as objUtils from '../util/obj';\nimport { ResetMapping, UpdateMapping } from './remote_event';\nimport { isPermanentError } from './rpc_error';\nimport { WatchChangeAggregator, WatchTargetChange, WatchTargetChangeState } from './watch_change';\nvar LOG_TAG = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nvar MAX_PENDING_WRITES = 10;\n// The RemoteStore notifies an onlineStateHandler with OnlineState.Failed if we\n// fail to connect to the backend. This subsequently triggers get() requests to\n// fail or use cached data, etc. Unfortunately, our connections have\n// historically been subject to various transient failures. So we wait for\n// multiple failures before notifying the onlineStateHandler.\nvar ONLINE_ATTEMPTS_BEFORE_FAILURE = 2;\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nvar RemoteStore = /** @class */ (function () {\n    function RemoteStore(\n    /**\n     * The local store, used to fill the write pipeline with outbound\n     * mutations and resolve existence filter mismatches.\n     */\n    localStore, \n    /** The client-side proxy for interacting with the backend. */\n    datastore, onlineStateHandler) {\n        this.localStore = localStore;\n        this.datastore = datastore;\n        this.onlineStateHandler = onlineStateHandler;\n        this.pendingWrites = [];\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        /**\n         * A mapping of watched targets that the client cares about tracking and the\n         * user has explicitly called a 'listen' for this target.\n         *\n         * These targets may or may not have been sent to or acknowledged by the\n         * server. On re-establishing the listen stream, these targets should be sent\n         * to the server. The targets removed with unlistens are removed eagerly\n         * without waiting for confirmation from the listen stream.\n         */\n        this.listenTargets = {};\n        /**\n         * A mapping of targetId to pending acks needed.\n         *\n         * If a targetId is present in this map, then we're waiting for watch to\n         * acknowledge a removal or addition of the target. If a target is not in this\n         * mapping, and it's in the listenTargets map, then we consider the target to\n         * be active.\n         *\n         * We increment the count here every time we issue a request over the stream\n         * to watch or unwatch. We then decrement the count every time we get a target\n         * added or target removed message from the server. Once the count is equal to\n         * 0 we know that the client and server are in the same state (once this state\n         * is reached the targetId is removed from the map to free the memory).\n         */\n        this.pendingTargetResponses = {};\n        this.accumulatedWatchChanges = [];\n        this.watchStream = null;\n        this.writeStream = null;\n        /**\n         * The online state of the watch stream. The state is set to healthy if and\n         * only if there are messages received by the backend.\n         */\n        this.watchStreamOnlineState = OnlineState.Unknown;\n        /** A count of consecutive failures to open the stream. */\n        this.watchStreamFailures = 0;\n        /** Whether the client should fire offline warning. */\n        this.shouldWarnOffline = true;\n    }\n    /**\n     * Starts up the remote store, creating streams, restoring state from\n     * LocalStore, etc.\n     */\n    RemoteStore.prototype.start = function () {\n        return this.enableNetwork();\n    };\n    /**\n     * Updates our OnlineState to the new state, updating local state\n     * and notifying the onlineStateHandler as appropriate. Idempotent.\n     */\n    RemoteStore.prototype.updateOnlineState = function (newState) {\n        if (newState !== this.watchStreamOnlineState) {\n            if (newState === OnlineState.Healthy) {\n                // We've connected to watch at least once. Don't warn the developer about\n                // being offline going forward.\n                this.shouldWarnOffline = false;\n            }\n            else if (newState === OnlineState.Unknown) {\n                // The state is set to unknown when a healthy stream is closed (e.g. due to\n                // a token timeout) or when we have no active listens and therefore there's\n                // no need to start the stream. Assuming there is (possibly in the future)\n                // an active listen, then we will eventually move to state Online or Failed,\n                // but we always want to make at least ONLINE_ATTEMPTS_BEFORE_FAILURE\n                // attempts before failing, so we reset the count here.\n                this.watchStreamFailures = 0;\n            }\n            this.watchStreamOnlineState = newState;\n            this.onlineStateHandler(newState);\n        }\n    };\n    /**\n     * Updates our OnlineState as appropriate after the watch stream reports a\n     * failure. The first failure moves us to the 'Unknown' state. We then may\n     * allow multiple failures (based on ONLINE_ATTEMPTS_BEFORE_FAILURE) before we\n     * actually transition to OnlineState.Failed.\n     */\n    RemoteStore.prototype.updateOnlineStateAfterFailure = function () {\n        if (this.watchStreamOnlineState === OnlineState.Healthy) {\n            this.updateOnlineState(OnlineState.Unknown);\n        }\n        else {\n            this.watchStreamFailures++;\n            if (this.watchStreamFailures >= ONLINE_ATTEMPTS_BEFORE_FAILURE) {\n                if (this.shouldWarnOffline) {\n                    log.error('Could not reach Firestore backend.');\n                    this.shouldWarnOffline = false;\n                }\n                this.updateOnlineState(OnlineState.Failed);\n            }\n        }\n    };\n    RemoteStore.prototype.isNetworkEnabled = function () {\n        assert((this.watchStream == null) === (this.writeStream == null), 'WatchStream and WriteStream should both be null or non-null');\n        return this.watchStream != null;\n    };\n    /** Re-enables the network. Idempotent. */\n    RemoteStore.prototype.enableNetwork = function () {\n        var _this = this;\n        if (this.isNetworkEnabled()) {\n            return Promise.resolve();\n        }\n        // Create new streams (but note they're not started yet).\n        this.watchStream = this.datastore.newPersistentWatchStream();\n        this.writeStream = this.datastore.newPersistentWriteStream();\n        // Load any saved stream token from persistent storage\n        return this.localStore.getLastStreamToken().then(function (token) {\n            _this.writeStream.lastStreamToken = token;\n            if (_this.shouldStartWatchStream()) {\n                _this.startWatchStream();\n            }\n            _this.updateOnlineState(OnlineState.Unknown);\n            return _this.fillWritePipeline(); // This may start the writeStream.\n        });\n    };\n    /**\n     * Temporarily disables the network. The network can be re-enabled using\n     * enableNetwork().\n     */\n    RemoteStore.prototype.disableNetwork = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                this.disableNetworkInternal();\n                // Set the OnlineState to failed so get()'s return from cache, etc.\n                this.updateOnlineState(OnlineState.Failed);\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Disables the network, if it is currently enabled.\n     */\n    RemoteStore.prototype.disableNetworkInternal = function () {\n        if (this.isNetworkEnabled()) {\n            // NOTE: We're guaranteed not to get any further events from these streams (not even a close\n            // event).\n            this.watchStream.stop();\n            this.writeStream.stop();\n            this.cleanUpWatchStreamState();\n            this.cleanUpWriteStreamState();\n            this.writeStream = null;\n            this.watchStream = null;\n        }\n    };\n    RemoteStore.prototype.shutdown = function () {\n        log.debug(LOG_TAG, 'RemoteStore shutting down.');\n        this.disableNetworkInternal();\n        // Set the OnlineState to Unknown (rather than Failed) to avoid potentially\n        // triggering spurious listener events with cached data, etc.\n        this.updateOnlineState(OnlineState.Unknown);\n        return Promise.resolve();\n    };\n    /** Starts new listen for the given query. Uses resume token if provided */\n    RemoteStore.prototype.listen = function (queryData) {\n        assert(!objUtils.contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');\n        // Mark this as something the client is currently listening for.\n        this.listenTargets[queryData.targetId] = queryData;\n        if (this.shouldStartWatchStream()) {\n            // The listen will be sent in onWatchStreamOpen\n            this.startWatchStream();\n        }\n        else if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendWatchRequest(queryData);\n        }\n    };\n    /** Removes the listen from server */\n    RemoteStore.prototype.unlisten = function (targetId) {\n        assert(objUtils.contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');\n        delete this.listenTargets[targetId];\n        if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendUnwatchRequest(targetId);\n            if (objUtils.isEmpty(this.listenTargets)) {\n                this.watchStream.markIdle();\n            }\n        }\n    };\n    /**\n     * We need to increment the the expected number of pending responses we're due\n     * from watch so we wait for the ack to process any messages from this target.\n     */\n    RemoteStore.prototype.sendWatchRequest = function (queryData) {\n        this.recordPendingTargetRequest(queryData.targetId);\n        this.watchStream.watch(queryData);\n    };\n    /**\n     * We need to increment the expected number of pending responses we're due\n     * from watch so we wait for the removal on the server before we process any\n     * messages from this target.\n     */\n    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {\n        this.recordPendingTargetRequest(targetId);\n        this.watchStream.unwatch(targetId);\n    };\n    /**\n     * Increment the mapping of how many acks are needed from watch before we can\n     * consider the server to be 'in-sync' with the client's active targets.\n     */\n    RemoteStore.prototype.recordPendingTargetRequest = function (targetId) {\n        // For each request we get we need to record we need a response for it.\n        this.pendingTargetResponses[targetId] =\n            (this.pendingTargetResponses[targetId] || 0) + 1;\n    };\n    RemoteStore.prototype.startWatchStream = function () {\n        assert(this.shouldStartWatchStream(), 'startWriteStream() called when shouldStartWatchStream() is false.');\n        this.watchStream.start({\n            onOpen: this.onWatchStreamOpen.bind(this),\n            onClose: this.onWatchStreamClose.bind(this),\n            onWatchChange: this.onWatchStreamChange.bind(this)\n        });\n    };\n    /**\n     * Returns whether the watch stream should be started because there are\n     * active targets trying to be listened too\n     */\n    RemoteStore.prototype.shouldStartWatchStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.watchStream.isStarted() &&\n            !objUtils.isEmpty(this.listenTargets));\n    };\n    RemoteStore.prototype.cleanUpWatchStreamState = function () {\n        // If the connection is closed then we'll never get a snapshot version for\n        // the accumulated changes and so we'll never be able to complete the batch.\n        // When we start up again the server is going to resend these changes\n        // anyway, so just toss the accumulated state.\n        this.accumulatedWatchChanges = [];\n        this.pendingTargetResponses = {};\n    };\n    RemoteStore.prototype.onWatchStreamOpen = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                // TODO(b/35852690): close the stream again (with some timeout?) if no watch\n                // targets are active\n                objUtils.forEachNumber(this.listenTargets, function (targetId, queryData) {\n                    _this.sendWatchRequest(queryData);\n                });\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.onWatchStreamClose = function (error) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                assert(this.isNetworkEnabled(), 'onWatchStreamClose() should only be called when the network is enabled');\n                this.cleanUpWatchStreamState();\n                // If there was an error, retry the connection.\n                if (this.shouldStartWatchStream()) {\n                    this.updateOnlineStateAfterFailure();\n                    this.startWatchStream();\n                }\n                else {\n                    // No need to restart watch stream because there are no active targets.\n                    // The online state is set to unknown because there is no active attempt\n                    // at establishing a connection\n                    this.updateOnlineState(OnlineState.Unknown);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var changes;\n            return tslib_1.__generator(this, function (_a) {\n                // Mark the connection as healthy because we got a message from the server\n                this.updateOnlineState(OnlineState.Healthy);\n                if (watchChange instanceof WatchTargetChange &&\n                    watchChange.state === WatchTargetChangeState.Removed &&\n                    watchChange.cause) {\n                    // There was an error on a target, don't wait for a consistent snapshot\n                    // to raise events\n                    return [2 /*return*/, this.handleTargetError(watchChange)];\n                }\n                // Accumulate watch changes but don't process them if there's no\n                // snapshotVersion or it's older than a previous snapshot we've processed\n                // (can happen after we resume a target using a resume token).\n                this.accumulatedWatchChanges.push(watchChange);\n                if (!snapshotVersion.isEqual(SnapshotVersion.MIN) &&\n                    snapshotVersion.compareTo(this.localStore.getLastRemoteSnapshotVersion()) >= 0) {\n                    changes = this.accumulatedWatchChanges;\n                    this.accumulatedWatchChanges = [];\n                    return [2 /*return*/, this.handleWatchChangeBatch(snapshotVersion, changes)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Takes a batch of changes from the Datastore, repackages them as a\n     * RemoteEvent, and passes that on to the listener, which is typically the\n     * SyncEngine.\n     */\n    RemoteStore.prototype.handleWatchChangeBatch = function (snapshotVersion, changes) {\n        var _this = this;\n        var aggregator = new WatchChangeAggregator(snapshotVersion, this.listenTargets, this.pendingTargetResponses);\n        aggregator.addChanges(changes);\n        var remoteEvent = aggregator.createRemoteEvent();\n        // Get the new response counts from the aggregator\n        this.pendingTargetResponses = aggregator.pendingTargetResponses;\n        var promises = [];\n        // Handle existence filters and existence filter mismatches.\n        objUtils.forEachNumber(aggregator.existenceFilters, function (targetId, filter) {\n            var queryData = _this.listenTargets[targetId];\n            if (!queryData) {\n                // A watched target might have been removed already.\n                return;\n            }\n            var query = queryData.query;\n            if (query.isDocumentQuery()) {\n                if (filter.count === 0) {\n                    // The existence filter told us the document does not exist.\n                    // We need to deduce that this document does not exist and apply\n                    // a deleted document to our updates. Without applying a deleted\n                    // document there might be another query that will raise this\n                    // document as part of a snapshot until it is resolved,\n                    // essentially exposing inconsistency between queries.\n                    var key = new DocumentKey(query.path);\n                    var deletedDoc = new NoDocument(key, snapshotVersion);\n                    remoteEvent.addDocumentUpdate(deletedDoc);\n                }\n                else {\n                    assert(filter.count === 1, 'Single document existence filter with count: ' + filter.count);\n                }\n            }\n            else {\n                // Not a document query.\n                var promise = _this.localStore\n                    .remoteDocumentKeys(targetId)\n                    .then(function (trackedRemote) {\n                    if (remoteEvent.targetChanges[targetId]) {\n                        var mapping = remoteEvent.targetChanges[targetId].mapping;\n                        if (mapping !== null) {\n                            if (mapping instanceof UpdateMapping) {\n                                trackedRemote = mapping.applyToKeySet(trackedRemote);\n                            }\n                            else {\n                                assert(mapping instanceof ResetMapping, 'Expected either reset or update mapping but got something else: ' +\n                                    mapping);\n                                trackedRemote = mapping.documents;\n                            }\n                        }\n                    }\n                    if (trackedRemote.size !== filter.count) {\n                        // Existence filter mismatch, resetting mapping.\n                        // Make sure the mismatch is exposed in the remote event.\n                        remoteEvent.handleExistenceFilterMismatch(targetId);\n                        // Clear the resume token for the query, since we're in a\n                        // known mismatch state.\n                        var newQueryData = new QueryData(query, targetId, queryData.purpose);\n                        _this.listenTargets[targetId] = newQueryData;\n                        // Cause a hard reset by unwatching and rewatching\n                        // immediately, but deliberately don't send a resume token\n                        // so that we get a full update.\n                        // Make sure we expect that this acks are going to happen.\n                        _this.sendUnwatchRequest(targetId);\n                        // Mark the query we send as being on behalf of an existence\n                        // filter mismatch, but don't actually retain that in\n                        // listenTargets. This ensures that we flag the first\n                        // re-listen this way without impacting future listens of\n                        // this target (that might happen e.g. on reconnect).\n                        var requestQueryData = new QueryData(query, targetId, QueryPurpose.ExistenceFilterMismatch);\n                        _this.sendWatchRequest(requestQueryData);\n                    }\n                });\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises).then(function () {\n            // Update in-memory resume tokens. LocalStore will update the\n            // persistent view of these when applying the completed RemoteEvent.\n            objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                if (change.resumeToken.length > 0) {\n                    var queryData = _this.listenTargets[targetId];\n                    // A watched target might have been removed already.\n                    if (queryData) {\n                        _this.listenTargets[targetId] = queryData.update({\n                            resumeToken: change.resumeToken,\n                            snapshotVersion: change.snapshotVersion\n                        });\n                    }\n                }\n            });\n            // Finally handle remote event\n            return _this.syncEngine.applyRemoteEvent(remoteEvent);\n        });\n    };\n    /** Handles an error on a target */\n    RemoteStore.prototype.handleTargetError = function (watchChange) {\n        var _this = this;\n        assert(!!watchChange.cause, 'Handling target error without a cause');\n        var error = watchChange.cause;\n        var promiseChain = Promise.resolve();\n        watchChange.targetIds.forEach(function (targetId) {\n            promiseChain = promiseChain.then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    // A watched target might have been removed already.\n                    if (objUtils.contains(this.listenTargets, targetId)) {\n                        delete this.listenTargets[targetId];\n                        return [2 /*return*/, this.syncEngine.rejectListen(targetId, error)];\n                    }\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n        return promiseChain;\n    };\n    RemoteStore.prototype.cleanUpWriteStreamState = function () {\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        log.debug(LOG_TAG, 'Stopping write stream with ' +\n            this.pendingWrites.length +\n            ' pending writes');\n        this.pendingWrites = [];\n    };\n    /**\n     * Notifies that there are new mutations to process in the queue. This is\n     * typically called by SyncEngine after it has sent mutations to LocalStore.\n     */\n    RemoteStore.prototype.fillWritePipeline = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                if (this.canWriteMutations()) {\n                    return [2 /*return*/, this.localStore\n                            .nextMutationBatch(this.lastBatchSeen)\n                            .then(function (batch) {\n                            if (batch === null) {\n                                if (_this.pendingWrites.length === 0) {\n                                    _this.writeStream.markIdle();\n                                }\n                            }\n                            else {\n                                _this.commit(batch);\n                                return _this.fillWritePipeline();\n                            }\n                        })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Returns true if the backend can accept additional write requests.\n     *\n     * When sending mutations to the write stream (e.g. in fillWritePipeline),\n     * call this method first to check if more mutations can be sent.\n     *\n     * Currently the only thing that can prevent the backend from accepting\n     * write requests is if there are too many requests already outstanding. As\n     * writes complete the backend will be able to accept more.\n     */\n    RemoteStore.prototype.canWriteMutations = function () {\n        return (this.isNetworkEnabled() && this.pendingWrites.length < MAX_PENDING_WRITES);\n    };\n    // For testing\n    RemoteStore.prototype.outstandingWrites = function () {\n        return this.pendingWrites.length;\n    };\n    /**\n     * Given mutations to commit, actually commits them to the Datastore. Note\n     * that this does *not* return a Promise specifically because the AsyncQueue\n     * should not block operations for this.\n     */\n    RemoteStore.prototype.commit = function (batch) {\n        assert(this.canWriteMutations(), \"commit called when batches can't be written\");\n        this.lastBatchSeen = batch.batchId;\n        this.pendingWrites.push(batch);\n        if (this.shouldStartWriteStream()) {\n            this.startWriteStream();\n        }\n        else if (this.isNetworkEnabled() && this.writeStream.handshakeComplete) {\n            this.writeStream.writeMutations(batch.mutations);\n        }\n    };\n    RemoteStore.prototype.shouldStartWriteStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.writeStream.isStarted() &&\n            this.pendingWrites.length > 0);\n    };\n    RemoteStore.prototype.startWriteStream = function () {\n        assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');\n        this.writeStream.start({\n            onOpen: this.onWriteStreamOpen.bind(this),\n            onClose: this.onWriteStreamClose.bind(this),\n            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n            onMutationResult: this.onMutationResult.bind(this)\n        });\n    };\n    RemoteStore.prototype.onWriteStreamOpen = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                this.writeStream.writeHandshake();\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.onWriteHandshakeComplete = function () {\n        var _this = this;\n        // Record the stream token.\n        return this.localStore\n            .setLastStreamToken(this.writeStream.lastStreamToken)\n            .then(function () {\n            // Drain any pending writes.\n            //\n            // Note that at this point pendingWrites contains mutations that\n            // have already been accepted by fillWritePipeline/commitBatch. If\n            // the pipeline is full, canWriteMutations will be false, despite\n            // the fact that we actually need to send mutations over.\n            //\n            // This also means that this method indirectly respects the limits\n            // imposed by canWriteMutations since writes can't be added to the\n            // pendingWrites array when canWriteMutations is false. If the\n            // limits imposed by canWriteMutations actually protect us from\n            // DOSing ourselves then those limits won't be exceeded here and\n            // we'll continue to make progress.\n            for (var _i = 0, _a = _this.pendingWrites; _i < _a.length; _i++) {\n                var batch = _a[_i];\n                _this.writeStream.writeMutations(batch.mutations);\n            }\n        });\n    };\n    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {\n        var _this = this;\n        // This is a response to a write containing mutations and should be\n        // correlated to the first pending write.\n        assert(this.pendingWrites.length > 0, 'Got result for empty pending writes');\n        var batch = this.pendingWrites.shift();\n        var success = MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);\n        return this.syncEngine.applySuccessfulWrite(success).then(function () {\n            // It's possible that with the completion of this mutation another\n            // slot has freed up.\n            return _this.fillWritePipeline();\n        });\n    };\n    RemoteStore.prototype.onWriteStreamClose = function (error) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var errorHandling;\n            return tslib_1.__generator(this, function (_a) {\n                assert(this.isNetworkEnabled(), 'onWriteStreamClose() should only be called when the network is enabled');\n                // If the write stream closed due to an error, invoke the error callbacks if\n                // there are pending writes.\n                if (error && this.pendingWrites.length > 0) {\n                    assert(!!error, 'We have pending writes, but the write stream closed without an error');\n                    errorHandling = void 0;\n                    if (this.writeStream.handshakeComplete) {\n                        // This error affects the actual write.\n                        errorHandling = this.handleWriteError(error);\n                    }\n                    else {\n                        // If there was an error before the handshake has finished, it's\n                        // possible that the server is unable to process the stream token\n                        // we're sending. (Perhaps it's too old?)\n                        errorHandling = this.handleHandshakeError(error);\n                    }\n                    return [2 /*return*/, errorHandling.then(function () {\n                            // The write stream might have been started by refilling the write\n                            // pipeline for failed writes\n                            if (_this.shouldStartWriteStream()) {\n                                _this.startWriteStream();\n                            }\n                        })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.handleHandshakeError = function (error) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                // Reset the token if it's a permanent error or the error code is\n                // ABORTED, signaling the write stream is no longer valid.\n                if (isPermanentError(error.code) || error.code === Code.ABORTED) {\n                    log.debug(LOG_TAG, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);\n                    this.writeStream.lastStreamToken = emptyByteString();\n                    return [2 /*return*/, this.localStore.setLastStreamToken(emptyByteString())];\n                }\n                else {\n                    // Some other error, don't reset stream token. Our stream logic will\n                    // just retry with exponential backoff.\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.handleWriteError = function (error) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var batch;\n            return tslib_1.__generator(this, function (_a) {\n                if (isPermanentError(error.code)) {\n                    batch = this.pendingWrites.shift();\n                    // In this case it's also unlikely that the server itself is melting\n                    // down -- this was just a bad request so inhibit backoff on the next\n                    // restart.\n                    this.writeStream.inhibitBackoff();\n                    return [2 /*return*/, this.syncEngine\n                            .rejectFailedWrite(batch.batchId, error)\n                            .then(function () {\n                            // It's possible that with the completion of this mutation\n                            // another slot has freed up.\n                            return _this.fillWritePipeline();\n                        })];\n                }\n                else {\n                    // Transient error, just let the retry logic kick in.\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    RemoteStore.prototype.createTransaction = function () {\n        return new Transaction(this.datastore);\n    };\n    RemoteStore.prototype.handleUserChange = function (user) {\n        log.debug(LOG_TAG, 'RemoteStore changing users: uid=', user.uid);\n        // If the network has been explicitly disabled, make sure we don't\n        // accidentally re-enable it.\n        if (this.isNetworkEnabled()) {\n            // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n            // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n            // (since mutations are per-user).\n            this.disableNetworkInternal();\n            this.updateOnlineState(OnlineState.Unknown);\n            return this.enableNetwork();\n        }\n    };\n    return RemoteStore;\n}());\nexport { RemoteStore };\n\n//# sourceMappingURL=remote_store.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/remote_store.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EventManager, QueryListener } from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { IndexedDbPersistence } from '../local/indexeddb_persistence';\nimport { LocalStore } from '../local/local_store';\nimport { MemoryPersistence } from '../local/memory_persistence';\nimport { NoOpGarbageCollector } from '../local/no_op_garbage_collector';\nimport { Datastore } from '../remote/datastore';\nimport { RemoteStore } from '../remote/remote_store';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { Code } from '../util/error';\nimport { debug } from '../util/log';\nimport { Deferred } from '../util/promise';\nvar LOG_TAG = 'FirestoreClient';\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nvar FirestoreClient = /** @class */ (function () {\n    function FirestoreClient(platform, databaseInfo, credentials, \n    /**\n     * Asynchronous queue responsible for all of our internal processing. When\n     * we get incoming work from the user (via public API) or the network\n     * (incoming GRPC messages), we should always schedule onto this queue.\n     * This ensures all of our work is properly serialized (e.g. we don't\n     * start processing a new operation while the previous one is waiting for\n     * an async I/O to complete).\n     */\n    asyncQueue) {\n        this.platform = platform;\n        this.databaseInfo = databaseInfo;\n        this.credentials = credentials;\n        this.asyncQueue = asyncQueue;\n    }\n    /**\n     * Starts up the FirestoreClient, returning only whether or not enabling\n     * persistence succeeded.\n     *\n     * The intent here is to \"do the right thing\" as far as users are concerned.\n     * Namely, in cases where offline persistence is requested and possible,\n     * enable it, but otherwise fall back to persistence disabled. For the most\n     * part we expect this to succeed one way or the other so we don't expect our\n     * users to actually wait on the firestore.enablePersistence Promise since\n     * they generally won't care.\n     *\n     * Of course some users actually do care about whether or not persistence\n     * was successfully enabled, so the Promise returned from this method\n     * indicates this outcome.\n     *\n     * This presents a problem though: even before enablePersistence resolves or\n     * rejects, users may have made calls to e.g. firestore.collection() which\n     * means that the FirestoreClient in there will be available and will be\n     * enqueuing actions on the async queue.\n     *\n     * Meanwhile any failure of an operation on the async queue causes it to\n     * panic and reject any further work, on the premise that unhandled errors\n     * are fatal.\n     *\n     * Consequently the fallback is handled internally here in start, and if the\n     * fallback succeeds we signal success to the async queue even though the\n     * start() itself signals failure.\n     *\n     * @param usePersistence Whether or not to attempt to enable persistence.\n     * @returns A deferred result indicating the user-visible result of enabling\n     *     offline persistence. This method will reject this if IndexedDB fails to\n     *     start for any reason. If usePersistence is false this is\n     *     unconditionally resolved.\n     */\n    FirestoreClient.prototype.start = function (usePersistence) {\n        var _this = this;\n        // We defer our initialization until we get the current user from\n        // setUserChangeListener(). We block the async queue until we got the\n        // initial user and the initialization is completed. This will prevent\n        // any scheduled work from happening before initialization is completed.\n        //\n        // If initializationDone resolved then the FirestoreClient is in a usable\n        // state.\n        var initializationDone = new Deferred();\n        // If usePersistence is true, certain classes of errors while starting are\n        // recoverable but only by falling back to persistence disabled.\n        //\n        // If there's an error in the first case but not in recovery we cannot\n        // reject the promise blocking the async queue because this will cause the\n        // async queue to panic.\n        var persistenceResult = new Deferred();\n        var initialized = false;\n        this.credentials.setUserChangeListener(function (user) {\n            if (!initialized) {\n                initialized = true;\n                _this.initializePersistence(usePersistence, persistenceResult)\n                    .then(function () { return _this.initializeRest(user); })\n                    .then(initializationDone.resolve, initializationDone.reject);\n            }\n            else {\n                _this.asyncQueue.enqueue(function () {\n                    return _this.handleUserChange(user);\n                });\n            }\n        });\n        // Block the async queue until initialization is done\n        this.asyncQueue.enqueue(function () {\n            return initializationDone.promise;\n        });\n        // Return only the result of enabling persistence. Note that this does not\n        // need to await the completion of initializationDone because the result of\n        // this method should not reflect any other kind of failure to start.\n        return persistenceResult.promise;\n    };\n    /** Enables the network connection and requeues all pending operations. */\n    FirestoreClient.prototype.enableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.enqueue(function () {\n            return _this.remoteStore.enableNetwork();\n        });\n    };\n    /**\n     * Initializes persistent storage, attempting to use IndexedDB if\n     * usePersistence is true or memory-only if false.\n     *\n     * If IndexedDB fails because it's already open in another tab or because the\n     * platform can't possibly support our implementation then this method rejects\n     * the persistenceResult and falls back on memory-only persistence.\n     *\n     * @param usePersistence indicates whether or not to use offline persistence\n     * @param persistenceResult A deferred result indicating the user-visible\n     *     result of enabling offline persistence. This method will reject this if\n     *     IndexedDB fails to start for any reason. If usePersistence is false\n     *     this is unconditionally resolved.\n     * @returns a Promise indicating whether or not initialization should\n     *     continue, i.e. that one of the persistence implementations actually\n     *     succeeded.\n     */\n    FirestoreClient.prototype.initializePersistence = function (usePersistence, persistenceResult) {\n        var _this = this;\n        if (usePersistence) {\n            return this.startIndexedDbPersistence()\n                .then(persistenceResult.resolve)\n                .catch(function (error) {\n                // Regardless of whether or not the retry succeeds, from an user\n                // perspective, offline persistence has failed.\n                persistenceResult.reject(error);\n                // An unknown failure on the first stage shuts everything down.\n                if (!_this.canFallback(error)) {\n                    return Promise.reject(error);\n                }\n                console.warn('Error enabling offline storage. Falling back to' +\n                    ' storage disabled: ' +\n                    error);\n                return _this.startMemoryPersistence();\n            });\n        }\n        else {\n            // When usePersistence == false, enabling offline persistence is defined\n            // to unconditionally succeed. This allows start() to have the same\n            // signature for both cases, despite the fact that the returned promise\n            // is only used in the enablePersistence call.\n            persistenceResult.resolve();\n            return this.startMemoryPersistence();\n        }\n    };\n    FirestoreClient.prototype.canFallback = function (error) {\n        return (error.code === Code.FAILED_PRECONDITION ||\n            error.code === Code.UNIMPLEMENTED);\n    };\n    /**\n     * Starts IndexedDB-based persistence.\n     *\n     * @returns A promise indicating success or failure.\n     */\n    FirestoreClient.prototype.startIndexedDbPersistence = function () {\n        // TODO(http://b/33384523): For now we just disable garbage collection\n        // when persistence is enabled.\n        this.garbageCollector = new NoOpGarbageCollector();\n        var storagePrefix = IndexedDbPersistence.buildStoragePrefix(this.databaseInfo);\n        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n        var serializer = new JsonProtoSerializer(this.databaseInfo.databaseId, {\n            useProto3Json: true\n        });\n        this.persistence = new IndexedDbPersistence(storagePrefix, serializer);\n        return this.persistence.start();\n    };\n    /**\n     * Starts Memory-backed persistence. In practice this cannot fail.\n     *\n     * @returns A promise that will successfully resolve.\n     */\n    FirestoreClient.prototype.startMemoryPersistence = function () {\n        this.garbageCollector = new EagerGarbageCollector();\n        this.persistence = new MemoryPersistence();\n        return this.persistence.start();\n    };\n    /**\n     * Initializes the rest of the FirestoreClient, assuming the initial user\n     * has been obtained from the credential provider and some persistence\n     * implementation is available in this.persistence.\n     */\n    FirestoreClient.prototype.initializeRest = function (user) {\n        var _this = this;\n        return this.platform\n            .loadConnection(this.databaseInfo)\n            .then(function (connection) {\n            _this.localStore = new LocalStore(_this.persistence, user, _this.garbageCollector);\n            var serializer = _this.platform.newSerializer(_this.databaseInfo.databaseId);\n            var datastore = new Datastore(_this.asyncQueue, connection, _this.credentials, serializer);\n            var onlineStateChangedHandler = function (onlineState) {\n                _this.syncEngine.applyOnlineStateChange(onlineState);\n                _this.eventMgr.applyOnlineStateChange(onlineState);\n            };\n            _this.remoteStore = new RemoteStore(_this.localStore, datastore, onlineStateChangedHandler);\n            _this.syncEngine = new SyncEngine(_this.localStore, _this.remoteStore, user);\n            // Setup wiring between sync engine and remote store\n            _this.remoteStore.syncEngine = _this.syncEngine;\n            _this.eventMgr = new EventManager(_this.syncEngine);\n            // NOTE: RemoteStore depends on LocalStore (for persisting stream\n            // tokens, refilling mutation queue, etc.) so must be started after\n            // LocalStore.\n            return _this.localStore.start();\n        })\n            .then(function () {\n            return _this.remoteStore.start();\n        });\n    };\n    FirestoreClient.prototype.handleUserChange = function (user) {\n        this.asyncQueue.verifyOperationInProgress();\n        debug(LOG_TAG, 'User Changed: ' + user.uid);\n        return this.syncEngine.handleUserChange(user);\n    };\n    /** Disables the network connection. Pending operations will not complete. */\n    FirestoreClient.prototype.disableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.enqueue(function () {\n            return _this.remoteStore.disableNetwork();\n        });\n    };\n    FirestoreClient.prototype.shutdown = function () {\n        var _this = this;\n        return this.asyncQueue\n            .enqueue(function () {\n            _this.credentials.removeUserChangeListener();\n            return _this.remoteStore.shutdown();\n        })\n            .then(function () {\n            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n            return _this.persistence.shutdown();\n        });\n    };\n    FirestoreClient.prototype.listen = function (query, observer, options) {\n        var _this = this;\n        var listener = new QueryListener(query, observer, options);\n        this.asyncQueue.enqueue(function () {\n            return _this.eventMgr.listen(listener);\n        });\n        return listener;\n    };\n    FirestoreClient.prototype.unlisten = function (listener) {\n        var _this = this;\n        this.asyncQueue.enqueue(function () {\n            return _this.eventMgr.unlisten(listener);\n        });\n    };\n    FirestoreClient.prototype.write = function (mutations) {\n        var _this = this;\n        var deferred = new Deferred();\n        this.asyncQueue.enqueue(function () { return _this.syncEngine.write(mutations, deferred); });\n        return deferred.promise;\n    };\n    FirestoreClient.prototype.databaseId = function () {\n        return this.databaseInfo.databaseId;\n    };\n    FirestoreClient.prototype.transaction = function (updateFunction) {\n        var _this = this;\n        // We have to wait for the async queue to be sure syncEngine is initialized.\n        return this.asyncQueue\n            .enqueue(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {\n            return [2 /*return*/];\n        }); }); })\n            .then(function () { return _this.syncEngine.runTransaction(updateFunction); });\n    };\n    return FirestoreClient;\n}());\nexport { FirestoreClient };\n\n//# sourceMappingURL=firestore_client.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/firestore_client.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nvar AsyncObserver = /** @class */ (function () {\n    function AsyncObserver(observer) {\n        this.observer = observer;\n        /**\n         * When set to true, will not raise future events. Necessary to deal with\n         * async detachment of listener.\n         */\n        this.muted = false;\n    }\n    AsyncObserver.prototype.next = function (value) {\n        this.scheduleEvent(this.observer.next, value);\n    };\n    AsyncObserver.prototype.error = function (error) {\n        this.scheduleEvent(this.observer.error, error);\n    };\n    AsyncObserver.prototype.mute = function () {\n        this.muted = true;\n    };\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n        var _this = this;\n        if (!this.muted) {\n            setTimeout(function () {\n                if (!_this.muted) {\n                    eventHandler(event);\n                }\n            }, 0);\n        }\n    };\n    return AsyncObserver;\n}());\nexport { AsyncObserver };\n\n//# sourceMappingURL=async_observer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/async_observer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User = /** @class */ (function () {\n    function User(uid) {\n        this.uid = uid;\n    }\n    User.prototype.isAuthenticated = function () {\n        return this.uid != null;\n    };\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n    User.prototype.toKey = function () {\n        if (this.isAuthenticated()) {\n            return 'uid:' + this.uid;\n        }\n        else {\n            return 'anonymous-user';\n        }\n    };\n    User.prototype.isEqual = function (otherUser) {\n        return otherUser.uid === this.uid;\n    };\n    /** A user with a null UID. */\n    User.UNAUTHENTICATED = new User(null);\n    // TODO(mikelehen): Look into getting a proper uid-equivalent for\n    // non-FirebaseAuth providers.\n    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n    User.FIRST_PARTY = new User('first-party-uid');\n    return User;\n}());\nexport { User };\n\n//# sourceMappingURL=user.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/auth/user.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { makeConstructorPrivate } from '../util/api';\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return ServerTimestampFieldValueImpl.instance;\n    };\n    FieldValueImpl.prototype.isEqual = function (other) {\n        return this === other;\n    };\n    return FieldValueImpl;\n}());\nexport { FieldValueImpl };\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\nexport { DeleteFieldValueImpl };\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\nexport { ServerTimestampFieldValueImpl };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nexport var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n//# sourceMappingURL=field_value.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/field_value.js\n// module id = null\n// module chunks = ","(function() {var g,goog=goog||{},k=this;function l(a){return\"string\"==typeof a}function aa(){}\nfunction ba(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"array\"==ba(a)}function ca(a){var b=ba(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length}function da(a){return\"function\"==ba(a)}function ea(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}var p=\"closure_uid_\"+(1E9*Math.random()>>>0),fa=0;function ha(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ia(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function q(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?q=ha:q=ia;return q.apply(null,arguments)}\nfunction ja(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var r=Date.now||function(){return+new Date};function t(a,b){function c(){}c.prototype=b.prototype;a.H=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Db=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ka(a){if(Error.captureStackTrace)Error.captureStackTrace(this,ka);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}t(ka,Error);ka.prototype.name=\"CustomError\";function la(a,b){a=a.split(\"%s\");for(var c=\"\",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:\"%s\");ka.call(this,c+a[d])}t(la,ka);la.prototype.name=\"AssertionError\";function ma(a,b){throw new la(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1));};function u(){0!=na&&(pa[this[p]||(this[p]=++fa)]=this);this.i=this.i;this.m=this.m}var na=0,pa={};u.prototype.i=!1;u.prototype.$=function(){if(!this.i&&(this.i=!0,this.w(),0!=na)){var a=this[p]||(this[p]=++fa);if(0!=na&&this.m&&0<this.m.length)throw Error(this+\" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.\");delete pa[a]}};u.prototype.w=function(){if(this.m)for(;this.m.length;)this.m.shift()()};var qa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(l(a))return l(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ra=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};\nfunction sa(a){a:{var b=ta;for(var c=a.length,d=l(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function ua(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function va(a){return Array.prototype.concat.apply([],arguments)}function wa(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};function xa(a){return/^[\\s\\xa0]*$/.test(a)}var ya=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(a)[1]};function za(a,b){return a<b?-1:a>b?1:0};var w;a:{var Aa=k.navigator;if(Aa){var Ba=Aa.userAgent;if(Ba){w=Ba;break a}}w=\"\"}function x(a){return-1!=w.indexOf(a)};function Ca(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Da(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Ea(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Fa(a){var b={},c;for(c in a)b[c]=a[c];return b}var Ga=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ha(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Ga.length;f++)c=Ga[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ia(a){Ia[\" \"](a);return a}Ia[\" \"]=aa;function Ja(a,b){var c=Ka;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var La=x(\"Opera\"),y=x(\"Trident\")||x(\"MSIE\"),Ma=x(\"Edge\"),Na=Ma||y,Oa=x(\"Gecko\")&&!(-1!=w.toLowerCase().indexOf(\"webkit\")&&!x(\"Edge\"))&&!(x(\"Trident\")||x(\"MSIE\"))&&!x(\"Edge\"),Pa=-1!=w.toLowerCase().indexOf(\"webkit\")&&!x(\"Edge\");function Qa(){var a=k.document;return a?a.documentMode:void 0}var Ra;\na:{var Sa=\"\",Ta=function(){var a=w;if(Oa)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(Ma)return/Edge\\/([\\d\\.]+)/.exec(a);if(y)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Pa)return/WebKit\\/(\\S+)/.exec(a);if(La)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Ta&&(Sa=Ta?Ta[1]:\"\");if(y){var Ua=Qa();if(null!=Ua&&Ua>parseFloat(Sa)){Ra=String(Ua);break a}}Ra=Sa}var Ka={};\nfunction Va(a){return Ja(a,function(){for(var b=0,c=ya(String(Ra)).split(\".\"),d=ya(String(a)).split(\".\"),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||\"\",m=d[f]||\"\";do{h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];m=/(\\d*)(\\D*)(.*)/.exec(m)||[\"\",\"\",\"\",\"\"];if(0==h[0].length&&0==m[0].length)break;b=za(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||za(0==h[2].length,0==m[2].length)||za(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var Wa;var Xa=k.document;\nWa=Xa&&y?Qa()||(\"CSS1Compat\"==Xa.compatMode?parseInt(Ra,10):5):void 0;var Ya=Object.freeze||function(a){return a};var Za=!y||9<=Number(Wa),$a=y&&!Va(\"9\"),ab=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},\"passive\",{get:function(){a=!0}});k.addEventListener(\"test\",aa,b);k.removeEventListener(\"test\",aa,b);return a}();function z(a,b){this.type=a;this.a=this.target=b;this.Qa=!0}z.prototype.b=function(){this.Qa=!1};function bb(a,b){z.call(this,a?a.type:\"\");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key=\"\";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType=\"\";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Oa){a:{try{Ia(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else\"mouseover\"==c?b=\na.fromElement:\"mouseout\"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||\"\";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=\na.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:cb[a.pointerType]||\"\";this.c=a;a.defaultPrevented&&this.b()}}t(bb,z);var cb=Ya({2:\"touch\",3:\"pen\",4:\"mouse\"});bb.prototype.b=function(){bb.H.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,$a)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var db=\"closure_listenable_\"+(1E6*Math.random()|0),eb=0;function fb(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.ga=e;this.key=++eb;this.Z=this.ba=!1}function gb(a){a.Z=!0;a.listener=null;a.proxy=null;a.src=null;a.ga=null};function hb(a){this.src=a;this.a={};this.b=0}hb.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=ib(a,b,d,e);-1<h?(b=a[h],c||(b.ba=!1)):(b=new fb(b,this.src,f,!!d,e),b.ba=c,a.push(b));return b};function jb(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=qa(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(gb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}\nfunction ib(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.Z&&f.listener==b&&f.capture==!!c&&f.ga==d)return e}return-1};var kb=\"closure_lm_\"+(1E6*Math.random()|0),lb={},mb=0;function nb(a,b,c,d,e){if(d&&d.once)return ob(a,b,c,d,e);if(n(b)){for(var f=0;f<b.length;f++)nb(a,b[f],c,d,e);return null}c=pb(c);return a&&a[db]?a.Ha(b,c,ea(d)?!!d.capture:!!d,e):qb(a,b,c,!1,d,e)}\nfunction qb(a,b,c,d,e,f){if(!b)throw Error(\"Invalid event type\");var h=ea(e)?!!e.capture:!!e,m=rb(a);m||(a[kb]=m=new hb(a));c=m.add(b,c,d,h,f);if(c.proxy)return c;d=sb();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)ab||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(tb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error(\"addEventListener and attachEvent are unavailable.\");mb++;return c}\nfunction sb(){var a=ub,b=Za?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function ob(a,b,c,d,e){if(n(b)){for(var f=0;f<b.length;f++)ob(a,b[f],c,d,e);return null}c=pb(c);return a&&a[db]?a.Ia(b,c,ea(d)?!!d.capture:!!d,e):qb(a,b,c,!0,d,e)}\nfunction vb(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)vb(a,b[f],c,d,e);else(d=ea(d)?!!d.capture:!!d,c=pb(c),a&&a[db])?(a=a.f,b=String(b).toString(),b in a.a&&(f=a.a[b],c=ib(f,c,d,e),-1<c&&(gb(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=rb(a))&&(b=a.a[b.toString()],a=-1,b&&(a=ib(b,c,d,e)),(c=-1<a?b[a]:null)&&wb(c))}\nfunction wb(a){if(\"number\"!=typeof a&&a&&!a.Z){var b=a.src;if(b&&b[db])jb(b.f,a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(tb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);mb--;(c=rb(b))?(jb(c,a),0==c.b&&(c.src=null,b[kb]=null)):gb(a)}}}function tb(a){return a in lb?lb[a]:lb[a]=\"on\"+a}\nfunction xb(a,b,c,d){var e=!0;if(a=rb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.Z&&(f=yb(f,d),e=e&&!1!==f)}return e}function yb(a,b){var c=a.listener,d=a.ga||a.src;a.ba&&wb(a);return c.call(d,b)}\nfunction ub(a,b){if(a.Z)return!0;if(!Za){if(!b)a:{b=[\"window\",\"event\"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new bb(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=xb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=xb(d[e],a,!1,b),c=c&&f}return c}return yb(a,\nnew bb(b,this))}function rb(a){a=a[kb];return a instanceof hb?a:null}var zb=\"__closure_events_fn_\"+(1E9*Math.random()>>>0);function pb(a){if(da(a))return a;a[zb]||(a[zb]=function(b){return a.handleEvent(b)});return a[zb]};function A(){u.call(this);this.f=new hb(this);this.N=this;this.J=null}t(A,u);A.prototype[db]=!0;g=A.prototype;g.addEventListener=function(a,b,c,d){nb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){vb(this,a,b,c,d)};\ng.dispatchEvent=function(a){var b,c=this.J;if(c)for(b=[];c;c=c.J)b.push(c);c=this.N;var d=a.type||a;if(l(a))a=new z(a,c);else if(a instanceof z)a.target=a.target||c;else{var e=a;a=new z(d,c);Ha(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=Ab(h,d,!0,a)&&e}h=a.a=c;e=Ab(h,d,!0,a)&&e;e=Ab(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=Ab(h,d,!1,a)&&e;return e};\ng.w=function(){A.H.w.call(this);if(this.f){var a=this.f,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,gb(d[e]);delete a.a[c];a.b--}}this.J=null};g.Ha=function(a,b,c,d){return this.f.add(String(a),b,!1,c,d)};g.Ia=function(a,b,c,d){return this.f.add(String(a),b,!0,c,d)};\nfunction Ab(a,b,c,d){b=a.f.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.Z&&h.capture==c){var m=h.listener,v=h.ga||h.src;h.ba&&jb(a.f,h);e=!1!==m.call(v,d)&&e}}return e&&0!=d.Qa};function Bb(a){return/^\\s*$/.test(a)?!1:/^[\\],:{}\\s\\u2028\\u2029]*$/.test(a.replace(/\\\\[\"\\\\\\/bfnrtu]/g,\"@\").replace(/(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g,\"]\").replace(/(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g,\"\"))}function Cb(a){a=String(a);if(Bb(a))try{return eval(\"(\"+a+\")\")}catch(b){}throw Error(\"Invalid JSON string: \"+a);}function Db(a){var b=[];Eb(new Fb,a,b);return b.join(\"\")}function Fb(){}\nfunction Eb(a,b,c){if(null==b)c.push(\"null\");else{if(\"object\"==typeof b){if(n(b)){var d=b;b=d.length;c.push(\"[\");for(var e=\"\",f=0;f<b;f++)c.push(e),Eb(a,d[f],c),e=\",\";c.push(\"]\");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push(\"{\");e=\"\";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],\"function\"!=typeof f&&(c.push(e),Gb(d,c),c.push(\":\"),Eb(a,f,c),e=\",\"));c.push(\"}\");return}}switch(typeof b){case \"string\":Gb(b,c);break;case \"number\":c.push(isFinite(b)&&\n!isNaN(b)?String(b):\"null\");break;case \"boolean\":c.push(String(b));break;case \"function\":c.push(\"null\");break;default:throw Error(\"Unknown type: \"+typeof b);}}}var Hb={'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\u000b\"},Ib=/\\uffff/.test(\"\\uffff\")?/[\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g:/[\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\nfunction Gb(a,b){b.push('\"',a.replace(Ib,function(a){var b=Hb[a];b||(b=\"\\\\u\"+(a.charCodeAt(0)|65536).toString(16).substr(1),Hb[a]=b);return b}),'\"')};function Jb(a,b){this.c=a;this.f=b;this.b=0;this.a=null}Jb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function Kb(){this.b=this.a=null}var Nb=new Jb(function(){return new Mb},function(a){a.reset()});Kb.prototype.add=function(a,b){var c=Nb.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function Ob(){var a=Pb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Mb(){this.next=this.b=this.a=null}Mb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};Mb.prototype.reset=function(){this.next=this.b=this.a=null};function Qb(a){k.setTimeout(function(){throw a;},0)}var Rb;\nfunction Sb(){var a=k.MessageChannel;\"undefined\"===typeof a&&\"undefined\"!==typeof window&&window.postMessage&&window.addEventListener&&!x(\"Presto\")&&(a=function(){var a=document.createElement(\"IFRAME\");a.style.display=\"none\";a.src=\"\";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write(\"\");a.close();var c=\"callImmediate\"+Math.random(),d=\"file:\"==b.location.protocol?\"*\":b.location.protocol+\"//\"+b.location.host;a=q(function(a){if((\"*\"==d||a.origin==d)&&a.data==\nc)this.port1.onmessage()},this);b.addEventListener(\"message\",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if(\"undefined\"!==typeof a&&!x(\"Trident\")&&!x(\"MSIE\")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.ya;c.ya=null;a()}};return function(a){d.next={ya:a};d=d.next;b.port2.postMessage(0)}}return\"undefined\"!==typeof document&&\"onreadystatechange\"in document.createElement(\"SCRIPT\")?function(a){var b=document.createElement(\"SCRIPT\");\nb.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};var Tb;function Ub(){if(-1!=String(k.Promise).indexOf(\"[native code]\")){var a=k.Promise.resolve(void 0);Tb=function(){a.then(Vb)}}else Tb=function(){var a=Vb;!da(k.setImmediate)||k.Window&&k.Window.prototype&&!x(\"Edge\")&&k.Window.prototype.setImmediate==k.setImmediate?(Rb||(Rb=Sb()),Rb(a)):k.setImmediate(a)}}var Wb=!1,Pb=new Kb;function Vb(){for(var a;a=Ob();){try{a.a.call(a.b)}catch(c){Qb(c)}var b=Nb;b.f(a);100>b.b&&(b.b++,a.next=b.a,b.a=a)}Wb=!1};function Xb(a,b){A.call(this);this.b=a||1;this.a=b||k;this.c=q(this.lb,this);this.g=r()}t(Xb,A);g=Xb.prototype;g.ea=!1;g.O=null;g.lb=function(){if(this.ea){var a=r()-this.g;0<a&&a<.8*this.b?this.O=this.a.setTimeout(this.c,this.b-a):(this.O&&(this.a.clearTimeout(this.O),this.O=null),this.dispatchEvent(\"tick\"),this.ea&&(this.O=this.a.setTimeout(this.c,this.b),this.g=r()))}};g.start=function(){this.ea=!0;this.O||(this.O=this.a.setTimeout(this.c,this.b),this.g=r())};\nfunction Yb(a){a.ea=!1;a.O&&(a.a.clearTimeout(a.O),a.O=null)}g.w=function(){Xb.H.w.call(this);Yb(this);delete this.a};function Zb(a,b,c){if(da(a))c&&(a=q(a,c));else if(a&&\"function\"==typeof a.handleEvent)a=q(a.handleEvent,a);else throw Error(\"Invalid listener argument\");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)};function $b(a,b,c){u.call(this);this.f=null!=c?q(a,c):a;this.c=b;this.b=q(this.fb,this);this.a=[]}t($b,u);g=$b.prototype;g.ha=!1;g.Y=null;g.Ya=function(a){this.a=arguments;this.Y?this.ha=!0:ac(this)};g.w=function(){$b.H.w.call(this);this.Y&&(k.clearTimeout(this.Y),this.Y=null,this.ha=!1,this.a=[])};g.fb=function(){this.Y=null;this.ha&&(this.ha=!1,ac(this))};function ac(a){a.Y=Zb(a.b,a.c);a.f.apply(null,a.a)};function bc(a){u.call(this);this.b=a;this.a={}}t(bc,u);var cc=[];function dc(a,b,c,d){n(c)||(c&&(cc[0]=c.toString()),c=cc);for(var e=0;e<c.length;e++){var f=nb(b,c[e],d||a.handleEvent,!1,a.b||a);if(!f)break;a.a[f.key]=f}}function ec(a){Ca(a.a,function(a,c){this.a.hasOwnProperty(c)&&wb(a)},a);a.a={}}bc.prototype.w=function(){bc.H.w.call(this);ec(this)};bc.prototype.handleEvent=function(){throw Error(\"EventHandler.handleEvent not implemented\");};function fc(a,b,c){this.reset(a,b,c,void 0,void 0)}fc.prototype.a=null;var gc=0;fc.prototype.reset=function(a,b,c,d,e){\"number\"==typeof e||gc++;d||r();delete this.a};function hc(a){this.f=a;this.b=this.c=this.a=null}function B(a,b){this.name=a;this.value=b}B.prototype.toString=function(){return this.name};var ic=new B(\"SEVERE\",1E3),jc=new B(\"WARNING\",900),kc=new B(\"INFO\",800),lc=new B(\"CONFIG\",700),mc=new B(\"FINE\",500);function nc(a){if(a.c)return a.c;if(a.a)return nc(a.a);ma(\"Root logger has no level set.\");return null}hc.prototype.log=function(a,b,c){if(a.value>=nc(this).value)for(da(b)&&(b=b()),a=new fc(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};\nvar oc={},pc=null;function qc(a){pc||(pc=new hc(\"\"),oc[\"\"]=pc,pc.c=lc);var b;if(!(b=oc[a])){b=new hc(a);var c=a.lastIndexOf(\".\"),d=a.substr(c+1);c=qc(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;oc[a]=b}return b};function C(a,b){a&&a.log(jc,b,void 0)}function rc(a,b){a&&a.log(kc,b,void 0)}function D(a,b){a&&a.log(mc,b,void 0)};function sc(){this.a=qc(\"goog.labs.net.webChannel.WebChannelDebug\");this.b=!0}sc.prototype.Ea=function(){this.b=!1};function tc(a,b,c,d,e,f){E(a,function(){if(a.b)if(f){var h=\"\";for(var m=f.split(\"&\"),v=0;v<m.length;v++){var I=m[v].split(\"=\");if(1<I.length){var W=I[0];I=I[1];var Lb=W.split(\"_\");h=2<=Lb.length&&\"type\"==Lb[1]?h+(W+\"=\"+I+\"&\"):h+(W+\"=redacted&\")}}}else h=null;else h=f;return\"XMLHTTP REQ (\"+d+\") [attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+h})}\nfunction uc(a,b,c,d,e,f,h){E(a,function(){return\"XMLHTTP RESP (\"+d+\") [ attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+f+\" \"+h})}function F(a,b,c,d){E(a,function(){return\"XMLHTTP TEXT (\"+b+\"): \"+vc(a,c)+(d?\" \"+d:\"\")})}function wc(a,b){E(a,function(){return\"TIMEOUT: \"+b})}function G(a,b){D(a.a,b)}function xc(a,b,c){(a=a.a)&&a.log(ic,c||\"Exception\",b)}function E(a,b){rc(a.a,b)}function H(a,b){(a=a.a)&&a.log(ic,b,void 0)}\nfunction vc(a,b){if(!a.b)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(var d=0;d<c.length;d++)if(n(c[d])){var e=c[d];if(!(2>e.length)){var f=e[1];if(n(f)&&!(1>f.length)){var h=f[0];if(\"noop\"!=h&&\"stop\"!=h&&\"close\"!=h)for(var m=1;m<f.length;m++)f[m]=\"\"}}}return Db(c)}catch(v){return G(a,\"Exception parsing expected JS array - probably was not JS\"),b}};var J=new A;function yc(a){z.call(this,\"serverreachability\",a)}t(yc,z);function zc(a){J.dispatchEvent(new yc(J,a))}function Ac(a){z.call(this,\"statevent\",a)}t(Ac,z);function K(a){J.dispatchEvent(new Ac(J,a))}function Bc(a){z.call(this,\"timingevent\",a)}t(Bc,z);function Cc(a,b,c){J.dispatchEvent(new Bc(J,a,b,c))}function Dc(a,b){if(!da(a))throw Error(\"Fn must not be null and must be a function\");return k.setTimeout(function(){a()},b)};var Ec={NO_ERROR:0,mb:1,tb:2,sb:3,pb:4,rb:5,ub:6,Sa:7,TIMEOUT:8,xb:9};var Fc={ob:\"complete\",Bb:\"success\",Ta:\"error\",Sa:\"abort\",zb:\"ready\",Ab:\"readystatechange\",TIMEOUT:\"timeout\",vb:\"incrementaldata\",yb:\"progress\",qb:\"downloadprogress\",Cb:\"uploadprogress\"};function Gc(){}var Hc={OPEN:\"a\",nb:\"b\",Ta:\"c\",wb:\"d\"};function Ic(){z.call(this,\"d\")}t(Ic,z);function Jc(){z.call(this,\"c\")}t(Jc,z);function Kc(){}Kc.prototype.a=null;function Lc(a){var b;(b=a.a)||(b={},Mc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Nc;function Oc(){}t(Oc,Kc);function Pc(a){return(a=Mc(a))?new ActiveXObject(a):new XMLHttpRequest}function Mc(a){if(!a.b&&\"undefined\"==typeof XMLHttpRequest&&\"undefined\"!=typeof ActiveXObject){for(var b=[\"MSXML2.XMLHTTP.6.0\",\"MSXML2.XMLHTTP.3.0\",\"MSXML2.XMLHTTP\",\"Microsoft.XMLHTTP\"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error(\"Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed\");}return a.b}Nc=new Oc;function L(a,b,c,d){this.i=a;this.b=b;this.c=c;this.T=d||1;this.L=new bc(this);this.R=Qc;a=Na?125:void 0;this.S=new Xb(a);this.j=null;this.f=!1;this.l=this.g=this.h=this.J=this.D=this.U=this.s=null;this.u=[];this.a=null;this.G=0;this.m=this.o=null;this.C=-1;this.B=!1;this.N=0;this.I=null;this.v=this.X=this.K=!1}var Qc=45E3;\nfunction Rc(a,b){switch(a){case 0:return\"Non-200 return code (\"+b+\")\";case 1:return\"XMLHTTP failure (no data)\";case 2:return\"HttpConnection timeout\";default:return\"Unknown error\"}}var Sc={},Tc={};g=L.prototype;g.setTimeout=function(a){this.R=a};function Uc(a,b,c){a.J=1;a.h=Vc(M(b));a.l=c;a.K=!0;Wc(a,null)}function Xc(a,b,c,d){a.J=1;a.h=Vc(M(b));a.l=null;a.K=c;Wc(a,d)}\nfunction Wc(a,b){a.D=r();Yc(a);a.g=M(a.h);Zc(a.g,\"t\",a.T);a.G=0;a.a=a.i.ca(a.i.ia()?b:null);0<a.N&&(a.I=new $b(q(a.Ra,a,a.a),a.N));dc(a.L,a.a,\"readystatechange\",a.ib);b=a.j?Fa(a.j):{};a.l?(a.o||(a.o=\"POST\"),b[\"Content-Type\"]=\"application/x-www-form-urlencoded\",a.a.fa(a.g,a.o,a.l,b)):(a.o=\"GET\",a.a.fa(a.g,a.o,null,b));zc(1);tc(a.b,a.o,a.g,a.c,a.T,a.l)}g.ib=function(a){a=a.target;var b=this.I;b&&3==N(a)?(G(this.b,\"Throttling readystatechange.\"),b.Ya()):this.Ra(a)};\ng.Ra=function(a){try{a==this.a?$c(this):C(this.b.a,\"Called back with an unexpected xmlhttp\")}catch(c){if(G(this.b,\"Failed call to OnXmlHttpReadyStateChanged_\"),this.a&&this.a.V()){var b=this;xc(this.b,c,function(){return\"ResponseText: \"+b.a.V()})}else xc(this.b,c,\"No response text\")}finally{}};\nfunction $c(a){var b=N(a.a),c=a.a.Fa(),d=a.a.W();if(!(3>b||3==b&&!Na&&!a.a.V())){a.B||4!=b||7==c||(8==c||0>=d?zc(3):zc(2));ad(a);var e=a.a.W();a.C=e;(c=a.a.V())||G(a.b,function(){return\"No response text for uri \"+a.g+\" status \"+e});a.f=200==e;uc(a.b,a.o,a.g,a.c,a.T,b,e);if(a.f){if(d=bd(a))F(a.b,a.c,d,\"Initial handshake response via X-HTTP-Initial-Response\"),a.v=!0,cd(a,d);a.K?(dd(a,b,c),Na&&a.f&&3==b&&ed(a)):(F(a.b,a.c,c,null),cd(a,c));4==b&&fd(a);a.f&&!a.B&&(4==b?a.i.ta(a):(a.f=!1,Yc(a)))}else 400==\ne&&0<c.indexOf(\"Unknown SID\")?(a.m=3,K(12),C(a.b.a,\"XMLHTTP Unknown SID (\"+a.c+\")\")):(a.m=0,K(13),C(a.b.a,\"XMLHTTP Bad status \"+e+\" (\"+a.c+\")\")),fd(a),gd(a)}}function bd(a){return!a.X||a.v?null:a.a&&(a=hd(a.a,\"X-HTTP-Initial-Response\"))&&!xa(a)?a:null}\nfunction dd(a,b,c){for(var d=!0;!a.B&&a.G<c.length;){var e=id(a,c);if(e==Tc){4==b&&(a.m=4,K(14),d=!1);F(a.b,a.c,null,\"[Incomplete Response]\");break}else if(e==Sc){a.m=4;K(15);F(a.b,a.c,c,\"[Invalid Chunk]\");d=!1;break}else F(a.b,a.c,e,null),cd(a,e)}4==b&&0==c.length&&(a.m=1,K(16),d=!1);a.f=a.f&&d;d||(F(a.b,a.c,c,\"[Invalid Chunked Response]\"),fd(a),gd(a))}g.hb=function(){if(this.a){var a=N(this.a),b=this.a.V();this.G<b.length&&(ad(this),dd(this,a,b),this.f&&4!=a&&Yc(this))}};\nfunction ed(a){dc(a.L,a.S,\"tick\",a.hb);a.S.start()}function id(a,b){var c=a.G,d=b.indexOf(\"\\n\",c);if(-1==d)return Tc;c=Number(b.substring(c,d));if(isNaN(c))return Sc;d+=1;if(d+c>b.length)return Tc;b=b.substr(d,c);a.G=d+c;return b}g.cancel=function(){this.B=!0;fd(this)};function Yc(a){a.U=r()+a.R;jd(a,a.R)}function jd(a,b){if(null!=a.s)throw Error(\"WatchDog timer not null\");a.s=Dc(q(a.gb,a),b)}function ad(a){a.s&&(k.clearTimeout(a.s),a.s=null)}\ng.gb=function(){this.s=null;var a=r();0<=a-this.U?(this.f&&H(this.b,\"Received watchdog timeout even though request loaded successfully\"),wc(this.b,this.g),2!=this.J&&(zc(3),K(17)),fd(this),this.m=2,gd(this)):(C(this.b.a,\"WatchDog timer called too early\"),jd(this,this.U-a))};function gd(a){a.i.Ka()||a.B||a.i.ta(a)}function fd(a){ad(a);var b=a.I;b&&\"function\"==typeof b.$&&b.$();a.I=null;Yb(a.S);ec(a.L);a.a&&(b=a.a,a.a=null,b.abort(),b.$())}\nfunction cd(a,b){try{a.i.Na(a,b),zc(4)}catch(c){xc(a.b,c,\"Error in httprequest callback\")}};function kd(a){if(a.A&&\"function\"==typeof a.A)return a.A();if(l(a))return a.split(\"\");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Da(a)}\nfunction ld(a,b){if(a.forEach&&\"function\"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||l(a))ra(a,b,void 0);else{if(a.M&&\"function\"==typeof a.M)var c=a.M();else if(a.A&&\"function\"==typeof a.A)c=void 0;else if(ca(a)||l(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else c=Ea(a);d=kd(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}};function O(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error(\"Uneven number of arguments\");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a)if(a instanceof O)for(c=a.M(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d])}g=O.prototype;g.A=function(){md(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.M=function(){md(this);return this.a.concat()};\nfunction nd(a){a.b={};a.a.length=0;a.c=0}function od(a,b){return P(a.b,b)?(delete a.b[b],a.c--,a.a.length>2*a.c&&md(a),!0):!1}function md(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];P(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],P(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return P(this.b,a)?this.b[a]:b};g.set=function(a,b){P(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};\ng.forEach=function(a,b){for(var c=this.M(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function P(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var pd=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;function qd(a,b){if(a){a=a.split(\"&\");for(var c=0;c<a.length;c++){var d=a[c].indexOf(\"=\"),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\\+/g,\" \")):\"\")}}};function Q(a,b){this.b=this.j=this.f=\"\";this.i=null;this.g=this.a=\"\";this.h=!1;var c;a instanceof Q?(this.h=void 0!==b?b:a.h,rd(this,a.f),this.j=a.j,sd(this,a.b),td(this,a.i),this.a=a.a,ud(this,vd(a.c)),this.g=a.g):a&&(c=String(a).match(pd))?(this.h=!!b,rd(this,c[1]||\"\",!0),this.j=wd(c[2]||\"\"),sd(this,c[3]||\"\",!0),td(this,c[4]),this.a=wd(c[5]||\"\",!0),ud(this,c[6]||\"\",!0),this.g=wd(c[7]||\"\")):(this.h=!!b,this.c=new xd(null,this.h))}\nQ.prototype.toString=function(){var a=[],b=this.f;b&&a.push(yd(b,zd,!0),\":\");var c=this.b;if(c||\"file\"==b)a.push(\"//\"),(b=this.j)&&a.push(yd(b,zd,!0),\"@\"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),c=this.i,null!=c&&a.push(\":\",String(c));if(c=this.a)this.b&&\"/\"!=c.charAt(0)&&a.push(\"/\"),a.push(yd(c,\"/\"==c.charAt(0)?Ad:Bd,!0));(c=this.c.toString())&&a.push(\"?\",c);(c=this.g)&&a.push(\"#\",yd(c,Cd));return a.join(\"\")};\nQ.prototype.resolve=function(a){var b=M(this),c=!!a.f;c?rd(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?sd(b,a.b):c=null!=a.i;var d=a.a;if(c)td(b,a.i);else if(c=!!a.a){if(\"/\"!=d.charAt(0))if(this.b&&!this.a)d=\"/\"+d;else{var e=b.a.lastIndexOf(\"/\");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(\"..\"==e||\".\"==e)d=\"\";else if(-1!=e.indexOf(\"./\")||-1!=e.indexOf(\"/.\")){d=0==e.lastIndexOf(\"/\",0);e=e.split(\"/\");for(var f=[],h=0;h<e.length;){var m=e[h++];\".\"==m?d&&h==e.length&&f.push(\"\"):\"..\"==m?((1<f.length||1==f.length&&\"\"!=\nf[0])&&f.pop(),d&&h==e.length&&f.push(\"\")):(f.push(m),d=!0)}d=f.join(\"/\")}else d=e}c?b.a=d:c=\"\"!==a.c.toString();c?ud(b,vd(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function M(a){return new Q(a)}function rd(a,b,c){a.f=c?wd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,\"\"))}function sd(a,b,c){a.b=c?wd(b,!0):b}function td(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error(\"Bad port number \"+b);a.i=b}else a.i=null}function ud(a,b,c){b instanceof xd?(a.c=b,Dd(a.c,a.h)):(c||(b=yd(b,Ed)),a.c=new xd(b,a.h))}\nfunction R(a,b,c){a.c.set(b,c)}function Zc(a,b,c){n(c)||(c=[String(c)]);Fd(a.c,b,c)}function Vc(a){R(a,\"zx\",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^r()).toString(36));return a}function Gd(a){return a instanceof Q?M(a):new Q(a,void 0)}function Hd(a,b,c,d){var e=new Q(null,void 0);a&&rd(e,a);b&&sd(e,b);c&&td(e,c);d&&(e.a=d);return e}function wd(a,b){return a?b?decodeURI(a.replace(/%25/g,\"%2525\")):decodeURIComponent(a):\"\"}\nfunction yd(a,b,c){return l(a)?(a=encodeURI(a).replace(b,Id),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),a):null}function Id(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)}var zd=/[#\\/\\?@]/g,Bd=/[#\\?:]/g,Ad=/[#\\?]/g,Ed=/[#\\?@]/g,Cd=/#/g;function xd(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}function S(a){a.a||(a.a=new O,a.b=0,a.c&&qd(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\\+/g,\" \")),c)}))}g=xd.prototype;\ng.add=function(a,b){S(this);this.c=null;a=Jd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Kd(a,b){S(a);b=Jd(a,b);P(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,od(a.a,b))}function Ld(a,b){S(a);b=Jd(a,b);return P(a.a.b,b)}g.forEach=function(a,b){S(this);this.a.forEach(function(c,d){ra(c,function(c){a.call(b,c,d,this)},this)},this)};\ng.M=function(){S(this);for(var a=this.a.A(),b=this.a.M(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.A=function(a){S(this);var b=[];if(l(a))Ld(this,a)&&(b=va(b,this.a.get(Jd(this,a))));else{a=this.a.A();for(var c=0;c<a.length;c++)b=va(b,a[c])}return b};g.set=function(a,b){S(this);this.c=null;a=Jd(this,a);Ld(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.A(a):[];return 0<a.length?String(a[0]):b};\nfunction Fd(a,b,c){Kd(a,b);0<c.length&&(a.c=null,a.a.set(Jd(a,b),wa(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return\"\";for(var a=[],b=this.a.M(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.A(d);for(var f=0;f<d.length;f++){var h=e;\"\"!==d[f]&&(h+=\"=\"+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join(\"&\")};function vd(a){var b=new xd;b.c=a.c;a.a&&(b.a=new O(a.a),b.b=a.b);return b}\nfunction Jd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function Dd(a,b){b&&!a.f&&(S(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(Kd(this,b),Fd(this,c,a))},a));a.f=b};function Md(){this.a=r()}var Nd=null;Md.prototype.set=function(a){this.a=a};Md.prototype.reset=function(){this.set(r())};Md.prototype.get=function(){return this.a};function Od(){Nd||(Nd=new Md)}function Pd(){Nd||(Nd=new Md)}t(Pd,Od);function Qd(a,b){this.a=a;this.b=b;this.c=this.i=null;this.h=!1;this.m=null;this.f=-1;this.l=this.g=null}g=Qd.prototype;g.P=null;\nfunction Rd(a){G(a.b,\"TestConnection: starting stage 2\");var b=a.a.I.a;if(null!=b)G(a.b,function(){return\"TestConnection: skipping stage 2, precomputed result is \"+b?\"Buffered\":\"Unbuffered\"}),K(4),b?(K(10),Sd(a.a,a,!1)):(K(11),Sd(a.a,a,!0));else{a.c=new L(a,a.b,void 0,void 0);a.c.j=a.i;var c=Td(a.a,a.g,a.m);K(4);Zc(c,\"TYPE\",\"xmlhttp\");var d=a.a.j,e=a.a.K;d&&e&&R(c,d,e);Xc(a.c,c,!1,a.g)}}g.ca=function(a){return this.a.ca(a)};g.abort=function(){this.c&&(this.c.cancel(),this.c=null);this.f=-1};\ng.Ka=function(){return!1};\ng.Na=function(a,b){this.f=a.C;if(0==this.P){G(this.b,\"TestConnection: Got data for stage 1\");if(!this.a.o&&(a=a.a)){var c=hd(a,\"X-Client-Wire-Protocol\");this.l=c?c:null;this.a.j&&((a=hd(a,\"X-HTTP-Session-Id\"))?this.a.K=a:C(this.b.a,\"Missing X_HTTP_SESSION_ID in the handshake response\"))}if(b){try{var d=this.a.la.a.parse(b)}catch(e){xc(this.b,e);Ud(this.a,this);return}this.g=d[0]}else G(this.b,\"TestConnection: Null responseText\"),Ud(this.a,this)}else if(1==this.P)if(this.h)K(6);else if(\"11111\"==b){if(K(5),\nthis.h=!0,!y||10<=Number(Wa))this.f=200,this.c.cancel(),G(this.b,\"Test connection succeeded; using streaming connection\"),K(11),Sd(this.a,this,!0)}else K(7),this.h=!1};\ng.ta=function(){this.f=this.c.C;this.c.f?0==this.P?(this.P=1,G(this.b,\"TestConnection: request complete for initial check\"),Rd(this)):1==this.P&&(G(this.b,\"TestConnection: request complete for stage 2\"),this.h?(G(this.b,\"Test connection succeeded; using streaming connection\"),K(11),Sd(this.a,this,!0)):(G(this.b,\"Test connection failed; not using streaming\"),K(10),Sd(this.a,this,!1))):(G(this.b,\"TestConnection: request failed, in state \"+this.P),0==this.P?K(8):1==this.P&&K(9),Ud(this.a,this))};\ng.ia=function(){return this.a.ia()};g.qa=function(){return this.a.qa()};function Vd(){this.a=this.b=null};function Wd(){this.a=new O}function Xd(a){var b=typeof a;return\"object\"==b&&a||\"function\"==b?\"o\"+(a[p]||(a[p]=++fa)):b.charAt(0)+a}Wd.prototype.add=function(a){this.a.set(Xd(a),a)};Wd.prototype.A=function(){return this.a.A()};function Yd(a,b){this.a=a;this.b=b};function Zd(a){this.g=a||$d;this.f=k.oa&&k.oa.La&&k.oa.La()&&k.oa.La().Fb?this.g:1;this.a=null;1<this.f&&(this.a=new Wd);this.b=null;this.c=[]}var $d=10;function ae(a,b){a.a||-1==b.indexOf(\"spdy\")&&-1==b.indexOf(\"quic\")&&-1==b.indexOf(\"h2\")||(a.f=a.g,a.a=new Wd,a.b&&(be(a,a.b),a.b=null))}function ce(a){return a.b?!0:a.a?a.a.a.c>=a.f:!1}function de(a,b){a.b?a=a.b==b:a.a?(b=Xd(b),a=P(a.a.a.b,b)):a=!1;return a}function be(a,b){a.a?a.a.add(b):a.b=b}\nfunction ee(a,b){if(a.b&&a.b==b)a.b=null;else{var c;if(c=a.a)c=Xd(b),c=P(a.a.a.b,c);c&&od(a.a.a,Xd(b))}}Zd.prototype.cancel=function(){this.c=fe(this);this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(ra(this.a.A(),function(a){a.cancel()}),nd(this.a.a))};function fe(a){if(null!=a.b)return a.c.concat(a.b.u);if(null!=a.a&&0!=a.a.a.c){var b=a.c;ra(a.a.A(),function(a){b=b.concat(a.u)});return b}return wa(a.c)}function ge(a,b){a.c=a.c.concat(b)};function he(){}he.prototype.stringify=function(a){return k.JSON.stringify(a,void 0)};he.prototype.parse=function(a){return k.JSON.parse(a,void 0)};function ie(){this.a=new he}function je(a,b,c){var d=c||\"\";try{ld(a,function(a,c){var e=a;ea(a)&&(e=Db(a));b.push(d+c+\"=\"+encodeURIComponent(e))})}catch(e){throw b.push(d+\"type=\"+encodeURIComponent(\"_badmap\")),e;}};function ke(a,b){var c=new sc;G(c,\"TestLoadImage: loading \"+a);var d=new Image;d.onload=ja(le,c,d,\"TestLoadImage: loaded\",!0,b);d.onerror=ja(le,c,d,\"TestLoadImage: error\",!1,b);d.onabort=ja(le,c,d,\"TestLoadImage: abort\",!1,b);d.ontimeout=ja(le,c,d,\"TestLoadImage: timeout\",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function le(a,b,c,d,e){try{G(a,c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){xc(a,f)}};function T(a){A.call(this);this.headers=new O;this.D=a||null;this.c=!1;this.v=this.a=null;this.K=this.u=\"\";this.j=0;this.g=\"\";this.h=this.I=this.s=this.G=!1;this.l=0;this.B=null;this.L=me;this.C=this.o=!1}t(T,A);var me=\"\";T.prototype.b=qc(\"goog.net.XhrIo\");var ne=/^https?$/i,oe=[\"POST\",\"PUT\"];g=T.prototype;\ng.fa=function(a,b,c,d){if(this.a)throw Error(\"[goog.net.XhrIo] Object is active with another request=\"+this.u+\"; newUri=\"+a);b=b?b.toUpperCase():\"GET\";this.u=a;this.g=\"\";this.j=0;this.K=b;this.G=!1;this.c=!0;this.a=this.D?Pc(this.D):Pc(Nc);this.v=this.D?Lc(this.D):Lc(Nc);this.a.onreadystatechange=q(this.Ma,this);try{D(this.b,U(this,\"Opening Xhr\")),this.I=!0,this.a.open(b,String(a),!0),this.I=!1}catch(f){D(this.b,U(this,\"Error opening Xhr: \"+f.message));pe(this,f);return}a=c||\"\";var e=new O(this.headers);\nd&&ld(d,function(a,b){e.set(b,a)});d=sa(e.M());c=k.FormData&&a instanceof k.FormData;!(0<=qa(oe,b))||d||c||e.set(\"Content-Type\",\"application/x-www-form-urlencoded;charset=utf-8\");e.forEach(function(a,b){this.a.setRequestHeader(b,a)},this);this.L&&(this.a.responseType=this.L);\"withCredentials\"in this.a&&this.a.withCredentials!==this.o&&(this.a.withCredentials=this.o);try{qe(this),0<this.l&&(this.C=re(this.a),D(this.b,U(this,\"Will abort after \"+this.l+\"ms if incomplete, xhr2 \"+this.C)),this.C?(this.a.timeout=\nthis.l,this.a.ontimeout=q(this.Ja,this)):this.B=Zb(this.Ja,this.l,this)),D(this.b,U(this,\"Sending request\")),this.s=!0,this.a.send(a),this.s=!1}catch(f){D(this.b,U(this,\"Send error: \"+f.message)),pe(this,f)}};function re(a){return y&&Va(9)&&\"number\"==typeof a.timeout&&void 0!==a.ontimeout}function ta(a){return\"content-type\"==a.toLowerCase()}\ng.Ja=function(){\"undefined\"!=typeof goog&&this.a&&(this.g=\"Timed out after \"+this.l+\"ms, aborting\",this.j=8,D(this.b,U(this,this.g)),this.dispatchEvent(\"timeout\"),this.abort(8))};function pe(a,b){a.c=!1;a.a&&(a.h=!0,a.a.abort(),a.h=!1);a.g=b;a.j=5;se(a);te(a)}function se(a){a.G||(a.G=!0,a.dispatchEvent(\"complete\"),a.dispatchEvent(\"error\"))}\ng.abort=function(a){this.a&&this.c&&(D(this.b,U(this,\"Aborting\")),this.c=!1,this.h=!0,this.a.abort(),this.h=!1,this.j=a||7,this.dispatchEvent(\"complete\"),this.dispatchEvent(\"abort\"),te(this))};g.w=function(){this.a&&(this.c&&(this.c=!1,this.h=!0,this.a.abort(),this.h=!1),te(this,!0));T.H.w.call(this)};g.Ma=function(){this.i||(this.I||this.s||this.h?ue(this):this.eb())};g.eb=function(){ue(this)};\nfunction ue(a){if(a.c&&\"undefined\"!=typeof goog)if(a.v[1]&&4==N(a)&&2==a.W())D(a.b,U(a,\"Local request error detected and ignored\"));else if(a.s&&4==N(a))Zb(a.Ma,0,a);else if(a.dispatchEvent(\"readystatechange\"),4==N(a)){D(a.b,U(a,\"Request complete\"));a.c=!1;try{var b=a.W();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.u).match(pd)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;\nf=h.substr(0,h.length-1)}e=!ne.test(f?f.toLowerCase():\"\")}d=e}d?(a.dispatchEvent(\"complete\"),a.dispatchEvent(\"success\")):(a.j=6,a.g=a.Ga()+\" [\"+a.W()+\"]\",se(a))}finally{te(a)}}}function te(a,b){if(a.a){qe(a);var c=a.a,d=a.v[0]?aa:null;a.a=null;a.v=null;b||a.dispatchEvent(\"ready\");try{c.onreadystatechange=d}catch(e){(a=a.b)&&a.log(ic,\"Problem encountered resetting onreadystatechange: \"+e.message,void 0)}}}function qe(a){a.a&&a.C&&(a.a.ontimeout=null);a.B&&(k.clearTimeout(a.B),a.B=null)}\nfunction N(a){return a.a?a.a.readyState:0}g.W=function(){try{return 2<N(this)?this.a.status:-1}catch(a){return-1}};g.Ga=function(){try{return 2<N(this)?this.a.statusText:\"\"}catch(a){return D(this.b,\"Can not get status: \"+a.message),\"\"}};g.V=function(){try{return this.a?this.a.responseText:\"\"}catch(a){return D(this.b,\"Can not get responseText: \"+a.message),\"\"}};\ng.Za=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));a:{a=b;if(k.JSON)try{var c=k.JSON.parse(a);break a}catch(d){}c=Cb(a)}return c}};function hd(a,b){return a.a?a.a.getResponseHeader(b):null}g.Fa=function(){return this.j};g.bb=function(){return l(this.g)?this.g:String(this.g)};function U(a,b){return b+\" [\"+a.K+\" \"+a.u+\" \"+a.W()+\"]\"};function ve(a){var b=\"\";Ca(a,function(a,d){b+=d;b+=\":\";b+=a;b+=\"\\r\\n\"});return b}function we(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=ve(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?\"=\"+encodeURIComponent(String(c)):\"\";if(b+=c){c=a.indexOf(\"#\");0>c&&(c=a.length);d=a.indexOf(\"?\");if(0>d||d>c){d=c;var e=\"\"}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+\"&\"+b:b:c;a=a[0]+(a[1]?\"?\"+a[1]:\"\")+a[2]}return a}R(a,b,c);return a};function xe(a){this.xa=0;this.g=[];this.a=new sc;this.I=new Vd;this.X=this.ua=this.D=this.ja=this.b=this.K=this.j=this.U=this.h=this.L=this.i=null;this.Va=this.R=0;this.Ua=a&&a.Eb||!1;this.ka=this.C=this.s=this.l=this.m=this.f=null;this.u=this.wa=this.N=-1;this.T=this.B=this.v=0;this.G=void 0;this.S=a&&a.supportsCrossDomainXhr||!1;this.J=\"\";this.c=new Zd(a&&a.concurrentRequestLimit);this.la=new ie;this.o=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;(this.va=a&&a.fastHandshake||!1)&&\n!this.o&&(C(this.a.a,\"Force backgroundChannelTest when fastHandshake is enabled.\"),this.o=!0);a&&a.Ea&&this.a.Ea()}g=xe.prototype;g.na=8;g.F=1;\nfunction ye(a){G(a.a,\"disconnect()\");ze(a);if(3==a.F){var b=a.R++,c=M(a.D);R(c,\"SID\",a.J);R(c,\"RID\",b);R(c,\"TYPE\",\"terminate\");Ae(a,c);b=new L(a,a.a,b,void 0);b.J=2;b.h=Vc(M(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.h.toString(),\"\"));!c&&k.Image&&((new Image).src=b.h,c=!0);c||(b.a=b.i.ca(null),b.a.fa(b.h));b.D=r();Yc(b)}Be(a)}\nfunction ze(a){a.C&&(a.C.abort(),a.C=null);a.b&&(a.b.cancel(),a.b=null);a.l&&(k.clearTimeout(a.l),a.l=null);Ce(a);a.c.cancel();a.m&&(k.clearTimeout(a.m),a.m=null)}function De(a,b){1E3==a.g.length&&H(a.a,function(){return\"Already have 1000 queued maps upon queueing \"+Db(b)});a.g.push(new Yd(a.Va++,b));3==a.F&&Ee(a)}g.Ka=function(){return 0==this.F};function Ee(a){ce(a.c)||a.m||(a.m=Dc(q(a.Pa,a),0),a.v=0)}\nfunction Fe(a,b){var c=a.c;if((c.b?1:c.a?c.a.a.c:0)>=a.c.f-(a.m?1:0))return H(a.a,\"Unexpected retry request is scheduled.\"),!1;if(a.m)return G(a.a,\"Use the retry request that is already scheduled.\"),a.g=b.u.concat(a.g),!0;if(1==a.F||2==a.F||a.v>=(a.Ua?0:2))return!1;G(a.a,\"Going to retry POST\");a.m=Dc(q(a.Pa,a,b),Ge(a,a.v));a.v++;return!0}\ng.Pa=function(a){this.m=null;G(this.a,\"startForwardChannel_\");if(1==this.F)if(a)H(this.a,\"Not supposed to retry the open\");else{G(this.a,\"open_()\");this.R=Math.floor(1E5*Math.random());a=this.R++;var b=new L(this,this.a,a,void 0),c=this.i;this.L&&(c?(c=Fa(c),Ha(c,this.L)):c=this.L);null===this.h&&(b.j=c);var d=He(this,b),e=M(this.D);R(e,\"RID\",a);R(e,\"CVER\",22);this.o&&this.j&&R(e,\"X-HTTP-Session-Id\",this.j);Ae(this,e);this.h&&c&&we(e,this.h,c);be(this.c,b);this.va?(R(e,\"$req\",d),R(e,\"SID\",\"null\"),\nb.X=!0,Uc(b,e,null)):Uc(b,e,d);this.F=2}else 3==this.F&&(a?Ie(this,a):0==this.g.length?G(this.a,\"startForwardChannel_ returned: nothing to send\"):ce(this.c)?H(this.a,\"startForwardChannel_ returned: connection already in progress\"):(Ie(this),G(this.a,\"startForwardChannel_ finished, sent request\")))};\nfunction Ie(a,b){var c;b?c=b.c:c=a.R++;var d=M(a.D);R(d,\"SID\",a.J);R(d,\"RID\",c);R(d,\"AID\",a.N);Ae(a,d);a.h&&a.i&&we(d,a.h,a.i);c=new L(a,a.a,c,a.v+1);null===a.h&&(c.j=a.i);b&&(a.g=b.u.concat(a.g));b=He(a,c);c.setTimeout(1E4+Math.round(1E4*Math.random()));be(a.c,c);Uc(c,d,b)}function Ae(a,b){a.f&&ld({},function(a,d){R(b,d,a)})}\nfunction He(a,b){var c=Math.min(a.g.length,1E3),d=a.f?q(a.f.Wa,a.f,a):null;a:for(var e=a.g,f=-1;;){var h=[\"count=\"+c];-1==f?0<c?(f=e[0].a,h.push(\"ofs=\"+f)):f=0:h.push(\"ofs=\"+f);for(var m=!0,v=0;v<c;v++){var I=e[v].a,W=e[v].b;I-=f;if(0>I)f=Math.max(0,e[v].a-100),m=!1;else try{je(W,h,\"req\"+I+\"_\")}catch(Lb){d&&d(W)}}if(m){d=h.join(\"&\");break a}}a=a.g.splice(0,c);b.u=a;return d}function Je(a){if(!a.b&&!a.l){a.T=1;var b=a.Oa;Tb||Ub();Wb||(Tb(),Wb=!0);Pb.add(b,a);a.B=0}}\nfunction Ke(a){if(a.b||a.l)return H(a.a,\"Request already in progress\"),!1;if(3<=a.B)return!1;G(a.a,\"Going to retry GET\");a.T++;a.l=Dc(q(a.Oa,a),Ge(a,a.B));a.B++;return!0}\ng.Oa=function(){this.l=null;G(this.a,\"Creating new HttpRequest\");this.b=new L(this,this.a,\"rpc\",this.T);null===this.h&&(this.b.j=this.i);this.b.N=0;var a=M(this.ua);R(a,\"RID\",\"rpc\");R(a,\"SID\",this.J);R(a,\"CI\",this.ka?\"0\":\"1\");R(a,\"AID\",this.N);Ae(this,a);R(a,\"TYPE\",\"xmlhttp\");this.h&&this.i&&we(a,this.h,this.i);this.G&&this.b.setTimeout(this.G);Xc(this.b,a,!0,this.X);G(this.a,\"New Request created\")};\nfunction Sd(a,b,c){G(a.a,\"Test Connection Finished\");var d=b.l;d&&ae(a.c,d);a.ka=c;a.u=b.f;G(a.a,\"connectChannel_()\");a.D=Le(a,a.ja);Ee(a)}function Ud(a,b){G(a.a,\"Test Connection Failed\");a.u=b.f;V(a,2)}\ng.Na=function(a,b){if(0!=this.F&&(this.b==a||de(this.c,a)))if(this.u=a.C,!a.v&&de(this.c,a)&&3==this.F){try{var c=this.la.a.parse(b)}catch(f){c=null}if(n(c)&&3==c.length)if(b=c,0==b[0])a:if(G(this.a,\"Server claims our backchannel is missing.\"),this.l)G(this.a,\"But we are currently starting the request.\");else{if(this.b)if(this.b.D+3E3<a.D)Ce(this),this.b.cancel(),this.b=null;else break a;else C(this.a.a,\"We do not have a BackChannel established\");Ke(this);K(18)}else this.wa=b[1],a=this.wa-this.N,\n0<a&&(b=b[2],G(this.a,b+\" bytes (in \"+a+\" arrays) are outstanding on the BackChannel\"),37500>b&&this.ka&&0==this.B&&!this.s&&(this.s=Dc(q(this.cb,this),6E3)));else G(this.a,\"Bad POST response data returned\"),V(this,11)}else if((a.v||this.b==a)&&Ce(this),!xa(b))for(b=c=this.la.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.N=d[0];d=d[1];if(2==this.F)if(\"c\"==d[0]){this.J=d[1];this.X=d[2];var e=d[3];null!=e&&(this.na=e,E(this.a,\"VER=\"+this.na));e=d[4];null!=e&&(this.xa=e,E(this.a,\"SVER=\"+this.xa));d=\nd[5];null!=d&&\"number\"==typeof d&&0<d&&(this.G=d*=1.5,E(this.a,\"backChannelRequestTimeoutMs_=\"+d));this.o&&(d=a.a)&&((e=hd(d,\"X-Client-Wire-Protocol\"))&&ae(this.c,e),this.j&&((d=hd(d,\"X-HTTP-Session-Id\"))?(this.K=d,R(this.D,this.j,d)):C(this.a.a,\"Missing X_HTTP_SESSION_ID in the handshake response\")));this.F=3;this.f&&this.f.Ca();d=a;this.ua=Td(this,this.X,this.ja);d.v?(G(this.a,\"Upgrade the handshake request to a backchannel.\"),ee(this.c,d),(e=this.G)&&d.setTimeout(e),d.s&&(ad(d),Yc(d)),this.b=d):\nJe(this)}else\"stop\"!=d[0]&&\"close\"!=d[0]||V(this,7);else 3==this.F&&(\"stop\"==d[0]||\"close\"==d[0]?\"stop\"==d[0]?V(this,7):ye(this):\"noop\"!=d[0]&&this.f&&this.f.Ba(d),this.B=0)}};g.cb=function(){null!=this.s&&(this.s=null,this.b.cancel(),this.b=null,Ke(this),K(19))};function Ce(a){null!=a.s&&(k.clearTimeout(a.s),a.s=null)}\ng.ta=function(a){G(this.a,\"Request complete\");var b=null;if(this.b==a){Ce(this);this.b=null;var c=2}else if(de(this.c,a))b=a.u,ee(this.c,a),c=1;else return;this.u=a.C;if(0!=this.F)if(a.f)1==c?(Cc(a.l?a.l.length:0,r()-a.D,this.v),Ee(this)):Je(this);else{var d=a.m;if(3==d||0==d&&0<this.u)G(this.a,\"Not retrying due to error type\");else{var e=this;G(this.a,function(){return\"Maybe retrying, last error: \"+Rc(d,e.u)});if(1==c&&Fe(this,a)||2==c&&Ke(this))return;G(this.a,\"Exceeded max number of retries\")}b&&\n0<b.length&&ge(this.c,b);G(this.a,\"Error: HTTP request failed\");switch(d){case 1:V(this,5);break;case 4:V(this,10);break;case 3:V(this,6);break;default:V(this,2)}}};function Ge(a,b){var c=5E3+Math.floor(1E4*Math.random());a.qa()||(G(a.a,\"Inactive channel\"),c*=2);return c*b}\nfunction V(a,b){E(a.a,\"Error code \"+b);if(2==b){var c=null;a.f&&(c=null);var d=q(a.kb,a);c||(c=new Q(\"//www.google.com/images/cleardot.gif\"),k.location&&\"http\"==k.location.protocol||rd(c,\"https\"),Vc(c));ke(c.toString(),d)}else K(2);G(a.a,\"HttpChannel: error - \"+b);a.F=0;a.f&&a.f.Aa(b);Be(a);ze(a)}g.kb=function(a){a?(E(this.a,\"Successfully pinged google.com\"),K(2)):(E(this.a,\"Failed to ping google.com\"),K(1))};\nfunction Be(a){a.F=0;a.u=-1;if(a.f){var b=fe(a.c);if(0!=b.length||0!=a.g.length)G(a.a,function(){return\"Number of undelivered maps, pending: \"+b.length+\", outgoing: \"+a.g.length}),a.c.c.length=0,wa(a.g),a.g.length=0;a.f.za()}}function Le(a,b){b=Me(a,null,b);G(a.a,\"GetForwardChannelUri: \"+b);return b}function Td(a,b,c){b=Me(a,a.ia()?b:null,c);G(a.a,\"GetBackChannelUri: \"+b);return b}\nfunction Me(a,b,c){var d=Gd(c);if(\"\"!=d.b)b&&sd(d,b+\".\"+d.b),td(d,d.i);else{var e=k.location,f;b?f=b+\".\"+e.hostname:f=e.hostname;d=Hd(e.protocol,f,e.port,c)}a.U&&Ca(a.U,function(a,b){R(d,b,a)});b=a.j;c=a.K;b&&c&&R(d,b,c);R(d,\"VER\",a.na);Ae(a,d);return d}g.ca=function(a){if(a&&!this.S)throw Error(\"Can't create secondary domain capable XhrIo object.\");a=new T;a.o=this.S;return a};g.qa=function(){return!!this.f&&!0};g.ia=function(){return this.S};new Pd;function Ne(){}g=Ne.prototype;g.Ca=function(){};\ng.Ba=function(){};g.Aa=function(){};g.za=function(){};g.Wa=function(){};function Oe(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf(\"/\",0))b=d;else{var e;(e=\"\"==b)||(e=b.length-1,e=0<=e&&b.indexOf(\"/\",e)==e);e?b+=d:b+=\"/\"+d}}return b};function Pe(){if(y&&!(10<=Number(Wa)))throw Error(\"Environmental error: no available transport.\");}Pe.prototype.a=function(a,b){return new X(a,b)};\nfunction X(a,b){A.call(this);this.a=new xe(b);this.b=a;this.o=b&&b.testUrl?b.testUrl:Oe(this.b,\"test\");this.c=qc(\"goog.labs.net.webChannel.WebChannelBaseTransport\");this.g=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a[\"X-Client-Protocol\"]=\"webchannel\":a={\"X-Client-Protocol\":\"webchannel\"});this.a.i=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a[\"X-WebChannel-Content-Type\"]=b.messageContentType:a={\"X-WebChannel-Content-Type\":b.messageContentType});\nb&&b.Da&&(a?a[\"X-WebChannel-Client-Profile\"]=b.Da:a={\"X-WebChannel-Client-Profile\":b.Da});this.a.L=a;(a=b&&b.httpHeadersOverwriteParam)&&!xa(a)&&(this.a.h=a);this.l=b&&b.supportsCrossDomainXhr||!1;this.j=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!xa(b)&&(this.a.j=b,a=this.g,null!==a&&b in a&&(a=this.g,b in a&&delete a[b],C(this.c,\"Ignore httpSessionIdParam also specified with messageUrlParams: \"+b)));this.h=new Qe(this)}t(X,A);g=X.prototype;\ng.addEventListener=function(a,b,c,d){X.H.addEventListener.call(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){X.H.removeEventListener.call(this,a,b,c,d)};\ng.$a=function(){this.a.f=this.h;this.l&&(this.a.S=!0);var a=this.a,b=this.o,c=this.b,d=this.g||void 0;G(a.a,\"connect()\");K(0);a.ja=c;a.U=d||{};a.o&&(G(a.a,\"connect() bypassed channel-test.\"),a.I.b=[],a.I.a=!1);G(a.a,\"connectTest_()\");a.C=new Qd(a,a.a);null===a.h&&(a.C.i=a.i);c=b;a.h&&a.i&&(c=we(b,a.h,a.i));a=a.C;a.m=c;b=Le(a.a,a.m);K(3);c=a.a.I.b;null!=c?(a.g=c[0],a.P=1,Rd(a)):(Zc(b,\"MODE\",\"init\"),!a.a.o&&a.a.j&&Zc(b,\"X-HTTP-Session-Id\",a.a.j),a.c=new L(a,a.b,void 0,void 0),a.c.j=a.i,Xc(a.c,b,!1,\nnull),a.P=0)};g.close=function(){ye(this.a)};g.ab=function(a){if(l(a)){var b={};b.__data__=a;De(this.a,b)}else this.j?(b={},b.__data__=Db(a),De(this.a,b)):De(this.a,a)};g.w=function(){this.a.f=null;delete this.h;ye(this.a);delete this.a;X.H.w.call(this)};function Re(a){Ic.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0}(this.c=a)?(a=this.c,this.data=null!==b&&a in b?b[a]:void 0):this.data=b}else this.data=a}t(Re,Ic);function Se(){Jc.call(this);this.status=1}t(Se,Jc);\nfunction Qe(a){this.a=a}t(Qe,Ne);Qe.prototype.Ca=function(){rc(this.a.c,\"WebChannel opened on \"+this.a.b);this.a.dispatchEvent(\"a\")};Qe.prototype.Ba=function(a){this.a.dispatchEvent(new Re(a))};Qe.prototype.Aa=function(a){rc(this.a.c,\"WebChannel aborted on \"+this.a.b+\" due to channel error: \"+a);this.a.dispatchEvent(new Se(a))};Qe.prototype.za=function(){rc(this.a.c,\"WebChannel closed on \"+this.a.b);this.a.dispatchEvent(\"b\")};var Te=ja(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Pe);function Ue(){this.b=[];this.a=[]}function Ve(a){0==a.b.length&&(a.b=a.a,a.b.reverse(),a.a=[]);return a.b.pop()}function We(a){return a.b.length+a.a.length}Ue.prototype.A=function(){for(var a=[],b=this.b.length-1;0<=b;--b)a.push(this.b[b]);var c=this.a.length;for(b=0;b<c;++b)a.push(this.a[b]);return a};function Xe(a,b){u.call(this);this.h=a||0;this.c=b||10;if(this.h>this.c)throw Error(Ye);this.a=new Ue;this.b=new Wd;this.g=null;this.aa()}t(Xe,u);var Ye=\"[goog.structs.Pool] Min can not be greater than max\";g=Xe.prototype;g.da=function(){var a=r();if(!(null!=this.g&&0>a-this.g)){for(var b;0<We(this.a)&&(b=Ve(this.a),!this.sa(b));)this.aa();!b&&Ze(this)<this.c&&(b=this.pa());b&&(this.g=a,this.b.add(b));return b}};g.jb=function(a){return od(this.b.a,Xd(a))?(this.ma(a),!0):!1};\ng.ma=function(a){od(this.b.a,Xd(a));this.sa(a)&&Ze(this)<this.c?this.a.a.push(a):$e(a)};g.aa=function(){for(var a=this.a;Ze(this)<this.h;){var b=this.pa();a.a.push(b)}for(;Ze(this)>this.c&&0<We(this.a);)$e(Ve(a))};g.pa=function(){return{}};function $e(a){if(\"function\"==typeof a.$)a.$();else for(var b in a)a[b]=null}g.sa=function(a){return\"function\"==typeof a.Xa?a.Xa():!0};function Ze(a){return We(a.a)+a.b.a.c}\ng.w=function(){Xe.H.w.call(this);if(0<this.b.a.c)throw Error(\"[goog.structs.Pool] Objects not released\");delete this.b;for(var a=this.a;0!=a.b.length||0!=a.a.length;)$e(Ve(a));delete this.a};function af(a,b){this.a=a;this.b=b};function bf(a){this.a=[];if(a)a:{if(a instanceof bf){var b=a.M();a=a.A();if(0>=this.a.length){for(var c=this.a,d=0;d<b.length;d++)c.push(new af(b[d],a[d]));break a}}else b=Ea(a),a=Da(a);for(d=0;d<b.length;d++)cf(this,b[d],a[d])}}function cf(a,b,c){var d=a.a;d.push(new af(b,c));b=d.length-1;a=a.a;for(c=a[b];0<b;)if(d=b-1>>1,a[d].a>c.a)a[b]=a[d],b=d;else break;a[b]=c}bf.prototype.A=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].b);return b};\nbf.prototype.M=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].a);return b};function df(){bf.call(this)}t(df,bf);function Y(a,b){this.f=new df;Xe.call(this,a,b)}t(Y,Xe);g=Y.prototype;g.da=function(a,b){if(!a)return Y.H.da.call(this);cf(this.f,void 0!==b?b:100,a);this.ra()};g.ra=function(){for(var a=this.f;0<a.a.length;){var b=this.da();if(b){var c=a,d=c.a,e=d.length;var f=d[0];if(0>=e)f=void 0;else{if(1==e)ua(d);else{d[0]=d.pop();d=0;c=c.a;e=c.length;for(var h=c[d];d<e>>1;){var m=2*d+1,v=2*d+2;m=v<e&&c[v].a<c[m].a?v:m;if(c[m].a>h.a)break;c[d]=c[m];d=m}c[d]=h}f=f.b}f.apply(this,[b])}else break}};\ng.ma=function(a){Y.H.ma.call(this,a);this.ra()};g.aa=function(){Y.H.aa.call(this);this.ra()};g.w=function(){Y.H.w.call(this);k.clearTimeout(void 0);ua(this.f.a);this.f=null};function Z(a,b,c,d){this.l=a;this.j=!!d;Y.call(this,b,c)}t(Z,Y);Z.prototype.pa=function(){var a=new T,b=this.l;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.j&&(a.o=!0);return a};Z.prototype.sa=function(a){return!a.i&&!a.a};Pe.prototype.createWebChannel=Pe.prototype.a;X.prototype.send=X.prototype.ab;X.prototype.open=X.prototype.$a;X.prototype.close=X.prototype.close;Ec.NO_ERROR=0;Ec.TIMEOUT=8;Ec.HTTP_ERROR=6;Fc.COMPLETE=\"complete\";Gc.EventType=Hc;Hc.OPEN=\"a\";Hc.CLOSE=\"b\";Hc.ERROR=\"c\";Hc.MESSAGE=\"d\";A.prototype.listen=A.prototype.Ha;Z.prototype.getObject=Z.prototype.da;Z.prototype.releaseObject=Z.prototype.jb;T.prototype.listenOnce=T.prototype.Ia;T.prototype.getLastError=T.prototype.bb;T.prototype.getLastErrorCode=T.prototype.Fa;\nT.prototype.getStatus=T.prototype.W;T.prototype.getStatusText=T.prototype.Ga;T.prototype.getResponseJson=T.prototype.Za;T.prototype.getResponseText=T.prototype.V;T.prototype.getResponseText=T.prototype.V;T.prototype.send=T.prototype.fa;module.exports={createWebChannelTransport:Te,ErrorCode:Ec,EventType:Fc,WebChannel:Gc,XhrIoPool:Z};}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {})\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../webchannel-wrapper/dist/index.js\n// module id = 116\n// module chunks = 1"],"sourceRoot":""}